// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hardware_encoding_read_input5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_HP1_AWVALID,
        m_axi_HP1_AWREADY,
        m_axi_HP1_AWADDR,
        m_axi_HP1_AWID,
        m_axi_HP1_AWLEN,
        m_axi_HP1_AWSIZE,
        m_axi_HP1_AWBURST,
        m_axi_HP1_AWLOCK,
        m_axi_HP1_AWCACHE,
        m_axi_HP1_AWPROT,
        m_axi_HP1_AWQOS,
        m_axi_HP1_AWREGION,
        m_axi_HP1_AWUSER,
        m_axi_HP1_WVALID,
        m_axi_HP1_WREADY,
        m_axi_HP1_WDATA,
        m_axi_HP1_WSTRB,
        m_axi_HP1_WLAST,
        m_axi_HP1_WID,
        m_axi_HP1_WUSER,
        m_axi_HP1_ARVALID,
        m_axi_HP1_ARREADY,
        m_axi_HP1_ARADDR,
        m_axi_HP1_ARID,
        m_axi_HP1_ARLEN,
        m_axi_HP1_ARSIZE,
        m_axi_HP1_ARBURST,
        m_axi_HP1_ARLOCK,
        m_axi_HP1_ARCACHE,
        m_axi_HP1_ARPROT,
        m_axi_HP1_ARQOS,
        m_axi_HP1_ARREGION,
        m_axi_HP1_ARUSER,
        m_axi_HP1_RVALID,
        m_axi_HP1_RREADY,
        m_axi_HP1_RDATA,
        m_axi_HP1_RLAST,
        m_axi_HP1_RID,
        m_axi_HP1_RUSER,
        m_axi_HP1_RRESP,
        m_axi_HP1_BVALID,
        m_axi_HP1_BREADY,
        m_axi_HP1_BRESP,
        m_axi_HP1_BID,
        m_axi_HP1_BUSER,
        input_r_din,
        input_r_full_n,
        input_r_write,
        s1,
        output_r,
        output_out_din,
        output_out_full_n,
        output_out_write
);

parameter    ap_ST_fsm_state1 = 79'd1;
parameter    ap_ST_fsm_state2 = 79'd2;
parameter    ap_ST_fsm_state3 = 79'd4;
parameter    ap_ST_fsm_state4 = 79'd8;
parameter    ap_ST_fsm_state5 = 79'd16;
parameter    ap_ST_fsm_state6 = 79'd32;
parameter    ap_ST_fsm_state7 = 79'd64;
parameter    ap_ST_fsm_state8 = 79'd128;
parameter    ap_ST_fsm_state9 = 79'd256;
parameter    ap_ST_fsm_state10 = 79'd512;
parameter    ap_ST_fsm_state11 = 79'd1024;
parameter    ap_ST_fsm_state12 = 79'd2048;
parameter    ap_ST_fsm_state13 = 79'd4096;
parameter    ap_ST_fsm_state14 = 79'd8192;
parameter    ap_ST_fsm_state15 = 79'd16384;
parameter    ap_ST_fsm_state16 = 79'd32768;
parameter    ap_ST_fsm_state17 = 79'd65536;
parameter    ap_ST_fsm_state18 = 79'd131072;
parameter    ap_ST_fsm_state19 = 79'd262144;
parameter    ap_ST_fsm_state20 = 79'd524288;
parameter    ap_ST_fsm_state21 = 79'd1048576;
parameter    ap_ST_fsm_state22 = 79'd2097152;
parameter    ap_ST_fsm_state23 = 79'd4194304;
parameter    ap_ST_fsm_state24 = 79'd8388608;
parameter    ap_ST_fsm_state25 = 79'd16777216;
parameter    ap_ST_fsm_state26 = 79'd33554432;
parameter    ap_ST_fsm_state27 = 79'd67108864;
parameter    ap_ST_fsm_state28 = 79'd134217728;
parameter    ap_ST_fsm_state29 = 79'd268435456;
parameter    ap_ST_fsm_state30 = 79'd536870912;
parameter    ap_ST_fsm_state31 = 79'd1073741824;
parameter    ap_ST_fsm_state32 = 79'd2147483648;
parameter    ap_ST_fsm_state33 = 79'd4294967296;
parameter    ap_ST_fsm_state34 = 79'd8589934592;
parameter    ap_ST_fsm_state35 = 79'd17179869184;
parameter    ap_ST_fsm_state36 = 79'd34359738368;
parameter    ap_ST_fsm_state37 = 79'd68719476736;
parameter    ap_ST_fsm_state38 = 79'd137438953472;
parameter    ap_ST_fsm_state39 = 79'd274877906944;
parameter    ap_ST_fsm_state40 = 79'd549755813888;
parameter    ap_ST_fsm_state41 = 79'd1099511627776;
parameter    ap_ST_fsm_state42 = 79'd2199023255552;
parameter    ap_ST_fsm_state43 = 79'd4398046511104;
parameter    ap_ST_fsm_state44 = 79'd8796093022208;
parameter    ap_ST_fsm_state45 = 79'd17592186044416;
parameter    ap_ST_fsm_state46 = 79'd35184372088832;
parameter    ap_ST_fsm_state47 = 79'd70368744177664;
parameter    ap_ST_fsm_state48 = 79'd140737488355328;
parameter    ap_ST_fsm_state49 = 79'd281474976710656;
parameter    ap_ST_fsm_state50 = 79'd562949953421312;
parameter    ap_ST_fsm_state51 = 79'd1125899906842624;
parameter    ap_ST_fsm_state52 = 79'd2251799813685248;
parameter    ap_ST_fsm_state53 = 79'd4503599627370496;
parameter    ap_ST_fsm_state54 = 79'd9007199254740992;
parameter    ap_ST_fsm_state55 = 79'd18014398509481984;
parameter    ap_ST_fsm_state56 = 79'd36028797018963968;
parameter    ap_ST_fsm_state57 = 79'd72057594037927936;
parameter    ap_ST_fsm_state58 = 79'd144115188075855872;
parameter    ap_ST_fsm_state59 = 79'd288230376151711744;
parameter    ap_ST_fsm_state60 = 79'd576460752303423488;
parameter    ap_ST_fsm_state61 = 79'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 79'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 79'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 79'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 79'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 79'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 79'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 79'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 79'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 79'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 79'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 79'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 79'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 79'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 79'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 79'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 79'd75557863725914323419136;
parameter    ap_ST_fsm_pp0_stage0 = 79'd151115727451828646838272;
parameter    ap_ST_fsm_state151 = 79'd302231454903657293676544;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_HP1_AWVALID;
input   m_axi_HP1_AWREADY;
output  [63:0] m_axi_HP1_AWADDR;
output  [0:0] m_axi_HP1_AWID;
output  [31:0] m_axi_HP1_AWLEN;
output  [2:0] m_axi_HP1_AWSIZE;
output  [1:0] m_axi_HP1_AWBURST;
output  [1:0] m_axi_HP1_AWLOCK;
output  [3:0] m_axi_HP1_AWCACHE;
output  [2:0] m_axi_HP1_AWPROT;
output  [3:0] m_axi_HP1_AWQOS;
output  [3:0] m_axi_HP1_AWREGION;
output  [0:0] m_axi_HP1_AWUSER;
output   m_axi_HP1_WVALID;
input   m_axi_HP1_WREADY;
output  [15:0] m_axi_HP1_WDATA;
output  [1:0] m_axi_HP1_WSTRB;
output   m_axi_HP1_WLAST;
output  [0:0] m_axi_HP1_WID;
output  [0:0] m_axi_HP1_WUSER;
output   m_axi_HP1_ARVALID;
input   m_axi_HP1_ARREADY;
output  [63:0] m_axi_HP1_ARADDR;
output  [0:0] m_axi_HP1_ARID;
output  [31:0] m_axi_HP1_ARLEN;
output  [2:0] m_axi_HP1_ARSIZE;
output  [1:0] m_axi_HP1_ARBURST;
output  [1:0] m_axi_HP1_ARLOCK;
output  [3:0] m_axi_HP1_ARCACHE;
output  [2:0] m_axi_HP1_ARPROT;
output  [3:0] m_axi_HP1_ARQOS;
output  [3:0] m_axi_HP1_ARREGION;
output  [0:0] m_axi_HP1_ARUSER;
input   m_axi_HP1_RVALID;
output   m_axi_HP1_RREADY;
input  [15:0] m_axi_HP1_RDATA;
input   m_axi_HP1_RLAST;
input  [0:0] m_axi_HP1_RID;
input  [0:0] m_axi_HP1_RUSER;
input  [1:0] m_axi_HP1_RRESP;
input   m_axi_HP1_BVALID;
output   m_axi_HP1_BREADY;
input  [1:0] m_axi_HP1_BRESP;
input  [0:0] m_axi_HP1_BID;
input  [0:0] m_axi_HP1_BUSER;
output  [7:0] input_r_din;
input   input_r_full_n;
output   input_r_write;
input  [63:0] s1;
input  [63:0] output_r;
output  [63:0] output_out_din;
input   output_out_full_n;
output   output_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_HP1_ARVALID;
reg[63:0] m_axi_HP1_ARADDR;
reg m_axi_HP1_RREADY;
reg[7:0] input_r_din;
reg input_r_write;
reg output_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [78:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    HP1_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    HP1_blk_n_R;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln206_reg_403;
reg    ap_enable_reg_pp0_iter71;
reg   [0:0] icmp_ln206_reg_403_pp0_iter70_reg;
reg    input_r_blk_n;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
reg    ap_enable_reg_pp0_iter72;
reg   [0:0] icmp_ln206_reg_403_pp0_iter71_reg;
reg    output_out_blk_n;
reg   [14:0] i_reg_160;
reg   [14:0] i_reg_160_pp0_iter1_reg;
wire    ap_block_state78_pp0_stage0_iter0;
wire    ap_block_state79_pp0_stage0_iter1;
reg    ap_block_state79_io;
wire    ap_block_state80_pp0_stage0_iter2;
wire    ap_block_state81_pp0_stage0_iter3;
wire    ap_block_state82_pp0_stage0_iter4;
wire    ap_block_state83_pp0_stage0_iter5;
wire    ap_block_state84_pp0_stage0_iter6;
wire    ap_block_state85_pp0_stage0_iter7;
wire    ap_block_state86_pp0_stage0_iter8;
wire    ap_block_state87_pp0_stage0_iter9;
wire    ap_block_state88_pp0_stage0_iter10;
wire    ap_block_state89_pp0_stage0_iter11;
wire    ap_block_state90_pp0_stage0_iter12;
wire    ap_block_state91_pp0_stage0_iter13;
wire    ap_block_state92_pp0_stage0_iter14;
wire    ap_block_state93_pp0_stage0_iter15;
wire    ap_block_state94_pp0_stage0_iter16;
wire    ap_block_state95_pp0_stage0_iter17;
wire    ap_block_state96_pp0_stage0_iter18;
wire    ap_block_state97_pp0_stage0_iter19;
wire    ap_block_state98_pp0_stage0_iter20;
wire    ap_block_state99_pp0_stage0_iter21;
wire    ap_block_state100_pp0_stage0_iter22;
wire    ap_block_state101_pp0_stage0_iter23;
wire    ap_block_state102_pp0_stage0_iter24;
wire    ap_block_state103_pp0_stage0_iter25;
wire    ap_block_state104_pp0_stage0_iter26;
wire    ap_block_state105_pp0_stage0_iter27;
wire    ap_block_state106_pp0_stage0_iter28;
wire    ap_block_state107_pp0_stage0_iter29;
wire    ap_block_state108_pp0_stage0_iter30;
wire    ap_block_state109_pp0_stage0_iter31;
wire    ap_block_state110_pp0_stage0_iter32;
wire    ap_block_state111_pp0_stage0_iter33;
wire    ap_block_state112_pp0_stage0_iter34;
wire    ap_block_state113_pp0_stage0_iter35;
wire    ap_block_state114_pp0_stage0_iter36;
wire    ap_block_state115_pp0_stage0_iter37;
wire    ap_block_state116_pp0_stage0_iter38;
wire    ap_block_state117_pp0_stage0_iter39;
wire    ap_block_state118_pp0_stage0_iter40;
wire    ap_block_state119_pp0_stage0_iter41;
wire    ap_block_state120_pp0_stage0_iter42;
wire    ap_block_state121_pp0_stage0_iter43;
wire    ap_block_state122_pp0_stage0_iter44;
wire    ap_block_state123_pp0_stage0_iter45;
wire    ap_block_state124_pp0_stage0_iter46;
wire    ap_block_state125_pp0_stage0_iter47;
wire    ap_block_state126_pp0_stage0_iter48;
wire    ap_block_state127_pp0_stage0_iter49;
wire    ap_block_state128_pp0_stage0_iter50;
wire    ap_block_state129_pp0_stage0_iter51;
wire    ap_block_state130_pp0_stage0_iter52;
wire    ap_block_state131_pp0_stage0_iter53;
wire    ap_block_state132_pp0_stage0_iter54;
wire    ap_block_state133_pp0_stage0_iter55;
wire    ap_block_state134_pp0_stage0_iter56;
wire    ap_block_state135_pp0_stage0_iter57;
wire    ap_block_state136_pp0_stage0_iter58;
wire    ap_block_state137_pp0_stage0_iter59;
wire    ap_block_state138_pp0_stage0_iter60;
wire    ap_block_state139_pp0_stage0_iter61;
wire    ap_block_state140_pp0_stage0_iter62;
wire    ap_block_state141_pp0_stage0_iter63;
wire    ap_block_state142_pp0_stage0_iter64;
wire    ap_block_state143_pp0_stage0_iter65;
wire    ap_block_state144_pp0_stage0_iter66;
wire    ap_block_state145_pp0_stage0_iter67;
wire    ap_block_state146_pp0_stage0_iter68;
wire    ap_block_state147_pp0_stage0_iter69;
wire    ap_block_state148_pp0_stage0_iter70;
reg    ap_block_state149_pp0_stage0_iter71;
reg    ap_block_state150_pp0_stage0_iter72;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] i_reg_160_pp0_iter2_reg;
reg   [14:0] i_reg_160_pp0_iter3_reg;
reg   [14:0] i_reg_160_pp0_iter4_reg;
reg   [14:0] i_reg_160_pp0_iter5_reg;
reg   [14:0] i_reg_160_pp0_iter6_reg;
reg   [14:0] i_reg_160_pp0_iter7_reg;
reg   [14:0] i_reg_160_pp0_iter8_reg;
reg   [14:0] i_reg_160_pp0_iter9_reg;
reg   [14:0] i_reg_160_pp0_iter10_reg;
reg   [14:0] i_reg_160_pp0_iter11_reg;
reg   [14:0] i_reg_160_pp0_iter12_reg;
reg   [14:0] i_reg_160_pp0_iter13_reg;
reg   [14:0] i_reg_160_pp0_iter14_reg;
reg   [14:0] i_reg_160_pp0_iter15_reg;
reg   [14:0] i_reg_160_pp0_iter16_reg;
reg   [14:0] i_reg_160_pp0_iter17_reg;
reg   [14:0] i_reg_160_pp0_iter18_reg;
reg   [14:0] i_reg_160_pp0_iter19_reg;
reg   [14:0] i_reg_160_pp0_iter20_reg;
reg   [14:0] i_reg_160_pp0_iter21_reg;
reg   [14:0] i_reg_160_pp0_iter22_reg;
reg   [14:0] i_reg_160_pp0_iter23_reg;
reg   [14:0] i_reg_160_pp0_iter24_reg;
reg   [14:0] i_reg_160_pp0_iter25_reg;
reg   [14:0] i_reg_160_pp0_iter26_reg;
reg   [14:0] i_reg_160_pp0_iter27_reg;
reg   [14:0] i_reg_160_pp0_iter28_reg;
reg   [14:0] i_reg_160_pp0_iter29_reg;
reg   [14:0] i_reg_160_pp0_iter30_reg;
reg   [14:0] i_reg_160_pp0_iter31_reg;
reg   [14:0] i_reg_160_pp0_iter32_reg;
reg   [14:0] i_reg_160_pp0_iter33_reg;
reg   [14:0] i_reg_160_pp0_iter34_reg;
reg   [14:0] i_reg_160_pp0_iter35_reg;
reg   [14:0] i_reg_160_pp0_iter36_reg;
reg   [14:0] i_reg_160_pp0_iter37_reg;
reg   [14:0] i_reg_160_pp0_iter38_reg;
reg   [14:0] i_reg_160_pp0_iter39_reg;
reg   [14:0] i_reg_160_pp0_iter40_reg;
reg   [14:0] i_reg_160_pp0_iter41_reg;
reg   [14:0] i_reg_160_pp0_iter42_reg;
reg   [14:0] i_reg_160_pp0_iter43_reg;
reg   [14:0] i_reg_160_pp0_iter44_reg;
reg   [14:0] i_reg_160_pp0_iter45_reg;
reg   [14:0] i_reg_160_pp0_iter46_reg;
reg   [14:0] i_reg_160_pp0_iter47_reg;
reg   [14:0] i_reg_160_pp0_iter48_reg;
reg   [14:0] i_reg_160_pp0_iter49_reg;
reg   [14:0] i_reg_160_pp0_iter50_reg;
reg   [14:0] i_reg_160_pp0_iter51_reg;
reg   [14:0] i_reg_160_pp0_iter52_reg;
reg   [14:0] i_reg_160_pp0_iter53_reg;
reg   [14:0] i_reg_160_pp0_iter54_reg;
reg   [14:0] i_reg_160_pp0_iter55_reg;
reg   [14:0] i_reg_160_pp0_iter56_reg;
reg   [14:0] i_reg_160_pp0_iter57_reg;
reg   [14:0] i_reg_160_pp0_iter58_reg;
reg   [14:0] i_reg_160_pp0_iter59_reg;
reg   [14:0] i_reg_160_pp0_iter60_reg;
reg   [14:0] i_reg_160_pp0_iter61_reg;
reg   [14:0] i_reg_160_pp0_iter62_reg;
reg   [14:0] i_reg_160_pp0_iter63_reg;
reg   [14:0] i_reg_160_pp0_iter64_reg;
reg   [14:0] i_reg_160_pp0_iter65_reg;
reg   [14:0] i_reg_160_pp0_iter66_reg;
reg   [14:0] i_reg_160_pp0_iter67_reg;
reg   [14:0] i_reg_160_pp0_iter68_reg;
reg   [14:0] i_reg_160_pp0_iter69_reg;
reg   [14:0] i_reg_160_pp0_iter70_reg;
reg   [14:0] i_reg_160_pp0_iter71_reg;
wire   [0:0] trunc_ln201_fu_172_p1;
reg   [0:0] trunc_ln201_reg_347;
wire   [2:0] add_ln199_fu_176_p2;
reg   [2:0] add_ln199_reg_352;
wire    ap_CS_fsm_state2;
wire   [63:0] add_ln201_fu_208_p2;
reg   [63:0] add_ln201_reg_360;
wire   [0:0] icmp_ln199_fu_182_p2;
reg   [63:0] HP1_addr_reg_365;
wire   [7:0] size_upper_fu_233_p1;
reg   [7:0] size_upper_reg_371;
reg   [7:0] size_lower_reg_377;
wire    ap_CS_fsm_state76;
wire   [14:0] grp_fu_334_p3;
reg   [14:0] size_reg_393;
wire    ap_CS_fsm_state77;
wire   [14:0] add_ln206_fu_253_p2;
reg   [14:0] add_ln206_reg_398;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln206_fu_259_p2;
reg   [0:0] icmp_ln206_reg_403_pp0_iter1_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter2_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter3_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter4_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter5_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter6_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter7_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter8_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter9_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter10_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter11_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter12_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter13_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter14_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter15_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter16_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter17_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter18_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter19_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter20_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter21_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter22_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter23_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter24_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter25_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter26_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter27_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter28_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter29_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter30_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter31_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter32_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter33_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter34_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter35_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter36_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter37_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter38_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter39_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter40_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter41_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter42_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter43_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter44_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter45_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter46_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter47_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter48_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter49_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter50_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter51_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter52_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter53_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter54_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter55_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter56_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter57_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter58_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter59_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter60_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter61_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter62_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter63_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter64_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter65_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter66_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter67_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter68_reg;
reg   [0:0] icmp_ln206_reg_403_pp0_iter69_reg;
reg   [63:0] HP1_addr_1_reg_407;
reg   [15:0] HP1_addr_1_read_reg_413;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state78;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg   [2:0] c_reg_149;
wire    ap_CS_fsm_state151;
reg    ap_block_state1;
reg   [14:0] ap_phi_mux_i_phi_fu_164_p4;
wire  signed [63:0] sext_ln201_fu_223_p1;
wire  signed [63:0] sext_ln174_fu_293_p1;
wire   [7:0] trunc_ln174_2_fu_329_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] trunc_ln201_2_fu_188_p1;
wire   [14:0] or_ln_fu_192_p5;
wire   [63:0] zext_ln201_fu_204_p1;
wire   [62:0] trunc_ln201_1_fu_213_p4;
wire   [15:0] i_cast_fu_264_p1;
wire   [15:0] add_ln174_1_fu_268_p2;
wire   [63:0] zext_ln174_fu_274_p1;
wire   [63:0] add_ln174_fu_278_p2;
wire   [62:0] trunc_ln174_1_fu_283_p4;
wire   [0:0] trunc_ln174_fu_303_p1;
wire   [0:0] xor_ln174_fu_307_p2;
wire   [3:0] shl_ln_fu_312_p3;
wire   [15:0] zext_ln174_1_fu_320_p1;
wire   [15:0] lshr_ln174_fu_324_p2;
wire   [7:0] grp_fu_334_p0;
wire   [7:0] grp_fu_334_p1;
wire   [7:0] grp_fu_334_p2;
reg    grp_fu_334_ce;
reg   [78:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_334_p00;
wire   [14:0] grp_fu_334_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 79'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
end

hardware_encoding_mac_muladd_8ns_8ns_8ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mac_muladd_8ns_8ns_8ns_15_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(grp_fu_334_p1),
    .din2(grp_fu_334_p2),
    .ce(grp_fu_334_ce),
    .dout(grp_fu_334_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln199_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state78) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state78)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state78);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end else if ((1'b1 == ap_CS_fsm_state77)) begin
            ap_enable_reg_pp0_iter72 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (output_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_reg_149 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state151)) begin
        c_reg_149 <= add_ln199_reg_352;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        i_reg_160 <= 15'd0;
    end else if (((icmp_ln206_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_160 <= add_ln206_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        HP1_addr_1_read_reg_413 <= m_axi_HP1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln206_fu_259_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HP1_addr_1_reg_407 <= sext_ln174_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln199_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        HP1_addr_reg_365 <= sext_ln201_fu_223_p1;
        add_ln201_reg_360 <= add_ln201_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln199_reg_352 <= add_ln199_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln206_reg_398 <= add_ln206_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        i_reg_160_pp0_iter10_reg <= i_reg_160_pp0_iter9_reg;
        i_reg_160_pp0_iter11_reg <= i_reg_160_pp0_iter10_reg;
        i_reg_160_pp0_iter12_reg <= i_reg_160_pp0_iter11_reg;
        i_reg_160_pp0_iter13_reg <= i_reg_160_pp0_iter12_reg;
        i_reg_160_pp0_iter14_reg <= i_reg_160_pp0_iter13_reg;
        i_reg_160_pp0_iter15_reg <= i_reg_160_pp0_iter14_reg;
        i_reg_160_pp0_iter16_reg <= i_reg_160_pp0_iter15_reg;
        i_reg_160_pp0_iter17_reg <= i_reg_160_pp0_iter16_reg;
        i_reg_160_pp0_iter18_reg <= i_reg_160_pp0_iter17_reg;
        i_reg_160_pp0_iter19_reg <= i_reg_160_pp0_iter18_reg;
        i_reg_160_pp0_iter20_reg <= i_reg_160_pp0_iter19_reg;
        i_reg_160_pp0_iter21_reg <= i_reg_160_pp0_iter20_reg;
        i_reg_160_pp0_iter22_reg <= i_reg_160_pp0_iter21_reg;
        i_reg_160_pp0_iter23_reg <= i_reg_160_pp0_iter22_reg;
        i_reg_160_pp0_iter24_reg <= i_reg_160_pp0_iter23_reg;
        i_reg_160_pp0_iter25_reg <= i_reg_160_pp0_iter24_reg;
        i_reg_160_pp0_iter26_reg <= i_reg_160_pp0_iter25_reg;
        i_reg_160_pp0_iter27_reg <= i_reg_160_pp0_iter26_reg;
        i_reg_160_pp0_iter28_reg <= i_reg_160_pp0_iter27_reg;
        i_reg_160_pp0_iter29_reg <= i_reg_160_pp0_iter28_reg;
        i_reg_160_pp0_iter2_reg <= i_reg_160_pp0_iter1_reg;
        i_reg_160_pp0_iter30_reg <= i_reg_160_pp0_iter29_reg;
        i_reg_160_pp0_iter31_reg <= i_reg_160_pp0_iter30_reg;
        i_reg_160_pp0_iter32_reg <= i_reg_160_pp0_iter31_reg;
        i_reg_160_pp0_iter33_reg <= i_reg_160_pp0_iter32_reg;
        i_reg_160_pp0_iter34_reg <= i_reg_160_pp0_iter33_reg;
        i_reg_160_pp0_iter35_reg <= i_reg_160_pp0_iter34_reg;
        i_reg_160_pp0_iter36_reg <= i_reg_160_pp0_iter35_reg;
        i_reg_160_pp0_iter37_reg <= i_reg_160_pp0_iter36_reg;
        i_reg_160_pp0_iter38_reg <= i_reg_160_pp0_iter37_reg;
        i_reg_160_pp0_iter39_reg <= i_reg_160_pp0_iter38_reg;
        i_reg_160_pp0_iter3_reg <= i_reg_160_pp0_iter2_reg;
        i_reg_160_pp0_iter40_reg <= i_reg_160_pp0_iter39_reg;
        i_reg_160_pp0_iter41_reg <= i_reg_160_pp0_iter40_reg;
        i_reg_160_pp0_iter42_reg <= i_reg_160_pp0_iter41_reg;
        i_reg_160_pp0_iter43_reg <= i_reg_160_pp0_iter42_reg;
        i_reg_160_pp0_iter44_reg <= i_reg_160_pp0_iter43_reg;
        i_reg_160_pp0_iter45_reg <= i_reg_160_pp0_iter44_reg;
        i_reg_160_pp0_iter46_reg <= i_reg_160_pp0_iter45_reg;
        i_reg_160_pp0_iter47_reg <= i_reg_160_pp0_iter46_reg;
        i_reg_160_pp0_iter48_reg <= i_reg_160_pp0_iter47_reg;
        i_reg_160_pp0_iter49_reg <= i_reg_160_pp0_iter48_reg;
        i_reg_160_pp0_iter4_reg <= i_reg_160_pp0_iter3_reg;
        i_reg_160_pp0_iter50_reg <= i_reg_160_pp0_iter49_reg;
        i_reg_160_pp0_iter51_reg <= i_reg_160_pp0_iter50_reg;
        i_reg_160_pp0_iter52_reg <= i_reg_160_pp0_iter51_reg;
        i_reg_160_pp0_iter53_reg <= i_reg_160_pp0_iter52_reg;
        i_reg_160_pp0_iter54_reg <= i_reg_160_pp0_iter53_reg;
        i_reg_160_pp0_iter55_reg <= i_reg_160_pp0_iter54_reg;
        i_reg_160_pp0_iter56_reg <= i_reg_160_pp0_iter55_reg;
        i_reg_160_pp0_iter57_reg <= i_reg_160_pp0_iter56_reg;
        i_reg_160_pp0_iter58_reg <= i_reg_160_pp0_iter57_reg;
        i_reg_160_pp0_iter59_reg <= i_reg_160_pp0_iter58_reg;
        i_reg_160_pp0_iter5_reg <= i_reg_160_pp0_iter4_reg;
        i_reg_160_pp0_iter60_reg <= i_reg_160_pp0_iter59_reg;
        i_reg_160_pp0_iter61_reg <= i_reg_160_pp0_iter60_reg;
        i_reg_160_pp0_iter62_reg <= i_reg_160_pp0_iter61_reg;
        i_reg_160_pp0_iter63_reg <= i_reg_160_pp0_iter62_reg;
        i_reg_160_pp0_iter64_reg <= i_reg_160_pp0_iter63_reg;
        i_reg_160_pp0_iter65_reg <= i_reg_160_pp0_iter64_reg;
        i_reg_160_pp0_iter66_reg <= i_reg_160_pp0_iter65_reg;
        i_reg_160_pp0_iter67_reg <= i_reg_160_pp0_iter66_reg;
        i_reg_160_pp0_iter68_reg <= i_reg_160_pp0_iter67_reg;
        i_reg_160_pp0_iter69_reg <= i_reg_160_pp0_iter68_reg;
        i_reg_160_pp0_iter6_reg <= i_reg_160_pp0_iter5_reg;
        i_reg_160_pp0_iter70_reg <= i_reg_160_pp0_iter69_reg;
        i_reg_160_pp0_iter71_reg <= i_reg_160_pp0_iter70_reg;
        i_reg_160_pp0_iter7_reg <= i_reg_160_pp0_iter6_reg;
        i_reg_160_pp0_iter8_reg <= i_reg_160_pp0_iter7_reg;
        i_reg_160_pp0_iter9_reg <= i_reg_160_pp0_iter8_reg;
        icmp_ln206_reg_403_pp0_iter10_reg <= icmp_ln206_reg_403_pp0_iter9_reg;
        icmp_ln206_reg_403_pp0_iter11_reg <= icmp_ln206_reg_403_pp0_iter10_reg;
        icmp_ln206_reg_403_pp0_iter12_reg <= icmp_ln206_reg_403_pp0_iter11_reg;
        icmp_ln206_reg_403_pp0_iter13_reg <= icmp_ln206_reg_403_pp0_iter12_reg;
        icmp_ln206_reg_403_pp0_iter14_reg <= icmp_ln206_reg_403_pp0_iter13_reg;
        icmp_ln206_reg_403_pp0_iter15_reg <= icmp_ln206_reg_403_pp0_iter14_reg;
        icmp_ln206_reg_403_pp0_iter16_reg <= icmp_ln206_reg_403_pp0_iter15_reg;
        icmp_ln206_reg_403_pp0_iter17_reg <= icmp_ln206_reg_403_pp0_iter16_reg;
        icmp_ln206_reg_403_pp0_iter18_reg <= icmp_ln206_reg_403_pp0_iter17_reg;
        icmp_ln206_reg_403_pp0_iter19_reg <= icmp_ln206_reg_403_pp0_iter18_reg;
        icmp_ln206_reg_403_pp0_iter20_reg <= icmp_ln206_reg_403_pp0_iter19_reg;
        icmp_ln206_reg_403_pp0_iter21_reg <= icmp_ln206_reg_403_pp0_iter20_reg;
        icmp_ln206_reg_403_pp0_iter22_reg <= icmp_ln206_reg_403_pp0_iter21_reg;
        icmp_ln206_reg_403_pp0_iter23_reg <= icmp_ln206_reg_403_pp0_iter22_reg;
        icmp_ln206_reg_403_pp0_iter24_reg <= icmp_ln206_reg_403_pp0_iter23_reg;
        icmp_ln206_reg_403_pp0_iter25_reg <= icmp_ln206_reg_403_pp0_iter24_reg;
        icmp_ln206_reg_403_pp0_iter26_reg <= icmp_ln206_reg_403_pp0_iter25_reg;
        icmp_ln206_reg_403_pp0_iter27_reg <= icmp_ln206_reg_403_pp0_iter26_reg;
        icmp_ln206_reg_403_pp0_iter28_reg <= icmp_ln206_reg_403_pp0_iter27_reg;
        icmp_ln206_reg_403_pp0_iter29_reg <= icmp_ln206_reg_403_pp0_iter28_reg;
        icmp_ln206_reg_403_pp0_iter2_reg <= icmp_ln206_reg_403_pp0_iter1_reg;
        icmp_ln206_reg_403_pp0_iter30_reg <= icmp_ln206_reg_403_pp0_iter29_reg;
        icmp_ln206_reg_403_pp0_iter31_reg <= icmp_ln206_reg_403_pp0_iter30_reg;
        icmp_ln206_reg_403_pp0_iter32_reg <= icmp_ln206_reg_403_pp0_iter31_reg;
        icmp_ln206_reg_403_pp0_iter33_reg <= icmp_ln206_reg_403_pp0_iter32_reg;
        icmp_ln206_reg_403_pp0_iter34_reg <= icmp_ln206_reg_403_pp0_iter33_reg;
        icmp_ln206_reg_403_pp0_iter35_reg <= icmp_ln206_reg_403_pp0_iter34_reg;
        icmp_ln206_reg_403_pp0_iter36_reg <= icmp_ln206_reg_403_pp0_iter35_reg;
        icmp_ln206_reg_403_pp0_iter37_reg <= icmp_ln206_reg_403_pp0_iter36_reg;
        icmp_ln206_reg_403_pp0_iter38_reg <= icmp_ln206_reg_403_pp0_iter37_reg;
        icmp_ln206_reg_403_pp0_iter39_reg <= icmp_ln206_reg_403_pp0_iter38_reg;
        icmp_ln206_reg_403_pp0_iter3_reg <= icmp_ln206_reg_403_pp0_iter2_reg;
        icmp_ln206_reg_403_pp0_iter40_reg <= icmp_ln206_reg_403_pp0_iter39_reg;
        icmp_ln206_reg_403_pp0_iter41_reg <= icmp_ln206_reg_403_pp0_iter40_reg;
        icmp_ln206_reg_403_pp0_iter42_reg <= icmp_ln206_reg_403_pp0_iter41_reg;
        icmp_ln206_reg_403_pp0_iter43_reg <= icmp_ln206_reg_403_pp0_iter42_reg;
        icmp_ln206_reg_403_pp0_iter44_reg <= icmp_ln206_reg_403_pp0_iter43_reg;
        icmp_ln206_reg_403_pp0_iter45_reg <= icmp_ln206_reg_403_pp0_iter44_reg;
        icmp_ln206_reg_403_pp0_iter46_reg <= icmp_ln206_reg_403_pp0_iter45_reg;
        icmp_ln206_reg_403_pp0_iter47_reg <= icmp_ln206_reg_403_pp0_iter46_reg;
        icmp_ln206_reg_403_pp0_iter48_reg <= icmp_ln206_reg_403_pp0_iter47_reg;
        icmp_ln206_reg_403_pp0_iter49_reg <= icmp_ln206_reg_403_pp0_iter48_reg;
        icmp_ln206_reg_403_pp0_iter4_reg <= icmp_ln206_reg_403_pp0_iter3_reg;
        icmp_ln206_reg_403_pp0_iter50_reg <= icmp_ln206_reg_403_pp0_iter49_reg;
        icmp_ln206_reg_403_pp0_iter51_reg <= icmp_ln206_reg_403_pp0_iter50_reg;
        icmp_ln206_reg_403_pp0_iter52_reg <= icmp_ln206_reg_403_pp0_iter51_reg;
        icmp_ln206_reg_403_pp0_iter53_reg <= icmp_ln206_reg_403_pp0_iter52_reg;
        icmp_ln206_reg_403_pp0_iter54_reg <= icmp_ln206_reg_403_pp0_iter53_reg;
        icmp_ln206_reg_403_pp0_iter55_reg <= icmp_ln206_reg_403_pp0_iter54_reg;
        icmp_ln206_reg_403_pp0_iter56_reg <= icmp_ln206_reg_403_pp0_iter55_reg;
        icmp_ln206_reg_403_pp0_iter57_reg <= icmp_ln206_reg_403_pp0_iter56_reg;
        icmp_ln206_reg_403_pp0_iter58_reg <= icmp_ln206_reg_403_pp0_iter57_reg;
        icmp_ln206_reg_403_pp0_iter59_reg <= icmp_ln206_reg_403_pp0_iter58_reg;
        icmp_ln206_reg_403_pp0_iter5_reg <= icmp_ln206_reg_403_pp0_iter4_reg;
        icmp_ln206_reg_403_pp0_iter60_reg <= icmp_ln206_reg_403_pp0_iter59_reg;
        icmp_ln206_reg_403_pp0_iter61_reg <= icmp_ln206_reg_403_pp0_iter60_reg;
        icmp_ln206_reg_403_pp0_iter62_reg <= icmp_ln206_reg_403_pp0_iter61_reg;
        icmp_ln206_reg_403_pp0_iter63_reg <= icmp_ln206_reg_403_pp0_iter62_reg;
        icmp_ln206_reg_403_pp0_iter64_reg <= icmp_ln206_reg_403_pp0_iter63_reg;
        icmp_ln206_reg_403_pp0_iter65_reg <= icmp_ln206_reg_403_pp0_iter64_reg;
        icmp_ln206_reg_403_pp0_iter66_reg <= icmp_ln206_reg_403_pp0_iter65_reg;
        icmp_ln206_reg_403_pp0_iter67_reg <= icmp_ln206_reg_403_pp0_iter66_reg;
        icmp_ln206_reg_403_pp0_iter68_reg <= icmp_ln206_reg_403_pp0_iter67_reg;
        icmp_ln206_reg_403_pp0_iter69_reg <= icmp_ln206_reg_403_pp0_iter68_reg;
        icmp_ln206_reg_403_pp0_iter6_reg <= icmp_ln206_reg_403_pp0_iter5_reg;
        icmp_ln206_reg_403_pp0_iter70_reg <= icmp_ln206_reg_403_pp0_iter69_reg;
        icmp_ln206_reg_403_pp0_iter71_reg <= icmp_ln206_reg_403_pp0_iter70_reg;
        icmp_ln206_reg_403_pp0_iter7_reg <= icmp_ln206_reg_403_pp0_iter6_reg;
        icmp_ln206_reg_403_pp0_iter8_reg <= icmp_ln206_reg_403_pp0_iter7_reg;
        icmp_ln206_reg_403_pp0_iter9_reg <= icmp_ln206_reg_403_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_160_pp0_iter1_reg <= i_reg_160;
        icmp_ln206_reg_403 <= icmp_ln206_fu_259_p2;
        icmp_ln206_reg_403_pp0_iter1_reg <= icmp_ln206_reg_403;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        size_lower_reg_377 <= {{m_axi_HP1_RDATA[15:8]}};
        size_upper_reg_371 <= size_upper_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        size_reg_393 <= grp_fu_334_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln201_reg_347 <= trunc_ln201_fu_172_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln206_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        HP1_blk_n_AR = m_axi_HP1_ARREADY;
    end else begin
        HP1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | ((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        HP1_blk_n_R = m_axi_HP1_RVALID;
    end else begin
        HP1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln206_fu_259_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state78 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state78 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln206_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_164_p4 = add_ln206_reg_398;
    end else begin
        ap_phi_mux_i_phi_fu_164_p4 = i_reg_160;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | ((1'b1 == ap_CS_fsm_state75) & (input_r_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (input_r_full_n == 1'b1)))) begin
        grp_fu_334_ce = 1'b1;
    end else begin
        grp_fu_334_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | ((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        input_r_blk_n = input_r_full_n;
    end else begin
        input_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        input_r_din = trunc_ln174_2_fu_329_p1;
    end else if (((1'b1 == ap_CS_fsm_state75) & (input_r_full_n == 1'b1))) begin
        input_r_din = size_lower_reg_377;
    end else if (((1'b1 == ap_CS_fsm_state74) & (input_r_full_n == 1'b1))) begin
        input_r_din = size_upper_reg_371;
    end else begin
        input_r_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state75) & (input_r_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state74) & (input_r_full_n == 1'b1)))) begin
        input_r_write = 1'b1;
    end else begin
        input_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln206_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_HP1_ARADDR = HP1_addr_1_reg_407;
    end else if (((1'b1 == ap_CS_fsm_state3) & (m_axi_HP1_ARREADY == 1'b1))) begin
        m_axi_HP1_ARADDR = HP1_addr_reg_365;
    end else begin
        m_axi_HP1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln206_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (m_axi_HP1_ARREADY == 1'b1)))) begin
        m_axi_HP1_ARVALID = 1'b1;
    end else begin
        m_axi_HP1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state73) & (m_axi_HP1_RVALID == 1'b1)))) begin
        m_axi_HP1_RREADY = 1'b1;
    end else begin
        m_axi_HP1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_out_blk_n = output_out_full_n;
    end else begin
        output_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (output_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_out_write = 1'b1;
    end else begin
        output_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (output_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln199_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_HP1_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((1'b1 == ap_CS_fsm_state73) & (m_axi_HP1_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (input_r_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (input_r_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln206_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln206_fu_259_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter72 == 1'b1) & (ap_enable_reg_pp0_iter71 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln174_1_fu_268_p2 = (i_cast_fu_264_p1 + 16'd2);

assign add_ln174_fu_278_p2 = (zext_ln174_fu_274_p1 + add_ln201_reg_360);

assign add_ln199_fu_176_p2 = (c_reg_149 + 3'd1);

assign add_ln201_fu_208_p2 = (zext_ln201_fu_204_p1 + s1);

assign add_ln206_fu_253_p2 = (ap_phi_mux_i_phi_fu_164_p4 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (input_r_full_n == 1'b0)) | ((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_HP1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state79_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (input_r_full_n == 1'b0)) | ((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_HP1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state79_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (ap_enable_reg_pp0_iter72 == 1'b1) & (input_r_full_n == 1'b0)) | ((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (ap_enable_reg_pp0_iter71 == 1'b1) & (m_axi_HP1_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (output_out_full_n == 1'b0));
end

assign ap_block_state100_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state147_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state149_pp0_stage0_iter71 = ((icmp_ln206_reg_403_pp0_iter70_reg == 1'd0) & (m_axi_HP1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state150_pp0_stage0_iter72 = ((icmp_ln206_reg_403_pp0_iter71_reg == 1'd0) & (input_r_full_n == 1'b0));
end

assign ap_block_state78_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state79_io = ((icmp_ln206_reg_403 == 1'd0) & (m_axi_HP1_ARREADY == 1'b0));
end

assign ap_block_state79_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_334_p0 = grp_fu_334_p00;

assign grp_fu_334_p00 = size_upper_reg_371;

assign grp_fu_334_p1 = 15'd100;

assign grp_fu_334_p2 = grp_fu_334_p20;

assign grp_fu_334_p20 = size_lower_reg_377;

assign i_cast_fu_264_p1 = ap_phi_mux_i_phi_fu_164_p4;

assign icmp_ln199_fu_182_p2 = ((c_reg_149 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln206_fu_259_p2 = ((ap_phi_mux_i_phi_fu_164_p4 == size_reg_393) ? 1'b1 : 1'b0);

assign lshr_ln174_fu_324_p2 = HP1_addr_1_read_reg_413 >> zext_ln174_1_fu_320_p1;

assign m_axi_HP1_ARBURST = 2'd0;

assign m_axi_HP1_ARCACHE = 4'd0;

assign m_axi_HP1_ARID = 1'd0;

assign m_axi_HP1_ARLEN = 32'd1;

assign m_axi_HP1_ARLOCK = 2'd0;

assign m_axi_HP1_ARPROT = 3'd0;

assign m_axi_HP1_ARQOS = 4'd0;

assign m_axi_HP1_ARREGION = 4'd0;

assign m_axi_HP1_ARSIZE = 3'd0;

assign m_axi_HP1_ARUSER = 1'd0;

assign m_axi_HP1_AWADDR = 64'd0;

assign m_axi_HP1_AWBURST = 2'd0;

assign m_axi_HP1_AWCACHE = 4'd0;

assign m_axi_HP1_AWID = 1'd0;

assign m_axi_HP1_AWLEN = 32'd0;

assign m_axi_HP1_AWLOCK = 2'd0;

assign m_axi_HP1_AWPROT = 3'd0;

assign m_axi_HP1_AWQOS = 4'd0;

assign m_axi_HP1_AWREGION = 4'd0;

assign m_axi_HP1_AWSIZE = 3'd0;

assign m_axi_HP1_AWUSER = 1'd0;

assign m_axi_HP1_AWVALID = 1'b0;

assign m_axi_HP1_BREADY = 1'b0;

assign m_axi_HP1_WDATA = 16'd0;

assign m_axi_HP1_WID = 1'd0;

assign m_axi_HP1_WLAST = 1'b0;

assign m_axi_HP1_WSTRB = 2'd0;

assign m_axi_HP1_WUSER = 1'd0;

assign m_axi_HP1_WVALID = 1'b0;

assign or_ln_fu_192_p5 = {{{{trunc_ln201_2_fu_188_p1}, {10'd0}}, {trunc_ln201_2_fu_188_p1}}, {1'd0}};

assign output_out_din = output_r;

assign sext_ln174_fu_293_p1 = $signed(trunc_ln174_1_fu_283_p4);

assign sext_ln201_fu_223_p1 = $signed(trunc_ln201_1_fu_213_p4);

assign shl_ln_fu_312_p3 = {{xor_ln174_fu_307_p2}, {3'd0}};

assign size_upper_fu_233_p1 = m_axi_HP1_RDATA[7:0];

assign start_out = real_start;

assign trunc_ln174_1_fu_283_p4 = {{add_ln174_fu_278_p2[63:1]}};

assign trunc_ln174_2_fu_329_p1 = lshr_ln174_fu_324_p2[7:0];

assign trunc_ln174_fu_303_p1 = i_reg_160_pp0_iter71_reg[0:0];

assign trunc_ln201_1_fu_213_p4 = {{add_ln201_fu_208_p2[63:1]}};

assign trunc_ln201_2_fu_188_p1 = c_reg_149[1:0];

assign trunc_ln201_fu_172_p1 = s1[0:0];

assign xor_ln174_fu_307_p2 = (trunc_ln201_reg_347 ^ trunc_ln174_fu_303_p1);

assign zext_ln174_1_fu_320_p1 = shl_ln_fu_312_p3;

assign zext_ln174_fu_274_p1 = add_ln174_1_fu_268_p2;

assign zext_ln201_fu_204_p1 = or_ln_fu_192_p5;

endmodule //hardware_encoding_read_input5

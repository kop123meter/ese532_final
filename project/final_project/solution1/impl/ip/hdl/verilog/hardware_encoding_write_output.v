// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hardware_encoding_write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        output_stream_dout,
        output_stream_empty_n,
        output_stream_read,
        m_axi_HP3_AWVALID,
        m_axi_HP3_AWREADY,
        m_axi_HP3_AWADDR,
        m_axi_HP3_AWID,
        m_axi_HP3_AWLEN,
        m_axi_HP3_AWSIZE,
        m_axi_HP3_AWBURST,
        m_axi_HP3_AWLOCK,
        m_axi_HP3_AWCACHE,
        m_axi_HP3_AWPROT,
        m_axi_HP3_AWQOS,
        m_axi_HP3_AWREGION,
        m_axi_HP3_AWUSER,
        m_axi_HP3_WVALID,
        m_axi_HP3_WREADY,
        m_axi_HP3_WDATA,
        m_axi_HP3_WSTRB,
        m_axi_HP3_WLAST,
        m_axi_HP3_WID,
        m_axi_HP3_WUSER,
        m_axi_HP3_ARVALID,
        m_axi_HP3_ARREADY,
        m_axi_HP3_ARADDR,
        m_axi_HP3_ARID,
        m_axi_HP3_ARLEN,
        m_axi_HP3_ARSIZE,
        m_axi_HP3_ARBURST,
        m_axi_HP3_ARLOCK,
        m_axi_HP3_ARCACHE,
        m_axi_HP3_ARPROT,
        m_axi_HP3_ARQOS,
        m_axi_HP3_ARREGION,
        m_axi_HP3_ARUSER,
        m_axi_HP3_RVALID,
        m_axi_HP3_RREADY,
        m_axi_HP3_RDATA,
        m_axi_HP3_RLAST,
        m_axi_HP3_RID,
        m_axi_HP3_RUSER,
        m_axi_HP3_RRESP,
        m_axi_HP3_BVALID,
        m_axi_HP3_BREADY,
        m_axi_HP3_BRESP,
        m_axi_HP3_BID,
        m_axi_HP3_BUSER,
        output_r_dout,
        output_r_empty_n,
        output_r_read
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_state2 = 74'd2;
parameter    ap_ST_fsm_pp0_stage0 = 74'd4;
parameter    ap_ST_fsm_state74 = 74'd8;
parameter    ap_ST_fsm_state75 = 74'd16;
parameter    ap_ST_fsm_state76 = 74'd32;
parameter    ap_ST_fsm_state77 = 74'd64;
parameter    ap_ST_fsm_state78 = 74'd128;
parameter    ap_ST_fsm_state79 = 74'd256;
parameter    ap_ST_fsm_state80 = 74'd512;
parameter    ap_ST_fsm_state81 = 74'd1024;
parameter    ap_ST_fsm_state82 = 74'd2048;
parameter    ap_ST_fsm_state83 = 74'd4096;
parameter    ap_ST_fsm_state84 = 74'd8192;
parameter    ap_ST_fsm_state85 = 74'd16384;
parameter    ap_ST_fsm_state86 = 74'd32768;
parameter    ap_ST_fsm_state87 = 74'd65536;
parameter    ap_ST_fsm_state88 = 74'd131072;
parameter    ap_ST_fsm_state89 = 74'd262144;
parameter    ap_ST_fsm_state90 = 74'd524288;
parameter    ap_ST_fsm_state91 = 74'd1048576;
parameter    ap_ST_fsm_state92 = 74'd2097152;
parameter    ap_ST_fsm_state93 = 74'd4194304;
parameter    ap_ST_fsm_state94 = 74'd8388608;
parameter    ap_ST_fsm_state95 = 74'd16777216;
parameter    ap_ST_fsm_state96 = 74'd33554432;
parameter    ap_ST_fsm_state97 = 74'd67108864;
parameter    ap_ST_fsm_state98 = 74'd134217728;
parameter    ap_ST_fsm_state99 = 74'd268435456;
parameter    ap_ST_fsm_state100 = 74'd536870912;
parameter    ap_ST_fsm_state101 = 74'd1073741824;
parameter    ap_ST_fsm_state102 = 74'd2147483648;
parameter    ap_ST_fsm_state103 = 74'd4294967296;
parameter    ap_ST_fsm_state104 = 74'd8589934592;
parameter    ap_ST_fsm_state105 = 74'd17179869184;
parameter    ap_ST_fsm_state106 = 74'd34359738368;
parameter    ap_ST_fsm_state107 = 74'd68719476736;
parameter    ap_ST_fsm_state108 = 74'd137438953472;
parameter    ap_ST_fsm_state109 = 74'd274877906944;
parameter    ap_ST_fsm_state110 = 74'd549755813888;
parameter    ap_ST_fsm_state111 = 74'd1099511627776;
parameter    ap_ST_fsm_state112 = 74'd2199023255552;
parameter    ap_ST_fsm_state113 = 74'd4398046511104;
parameter    ap_ST_fsm_state114 = 74'd8796093022208;
parameter    ap_ST_fsm_state115 = 74'd17592186044416;
parameter    ap_ST_fsm_state116 = 74'd35184372088832;
parameter    ap_ST_fsm_state117 = 74'd70368744177664;
parameter    ap_ST_fsm_state118 = 74'd140737488355328;
parameter    ap_ST_fsm_state119 = 74'd281474976710656;
parameter    ap_ST_fsm_state120 = 74'd562949953421312;
parameter    ap_ST_fsm_state121 = 74'd1125899906842624;
parameter    ap_ST_fsm_state122 = 74'd2251799813685248;
parameter    ap_ST_fsm_state123 = 74'd4503599627370496;
parameter    ap_ST_fsm_state124 = 74'd9007199254740992;
parameter    ap_ST_fsm_state125 = 74'd18014398509481984;
parameter    ap_ST_fsm_state126 = 74'd36028797018963968;
parameter    ap_ST_fsm_state127 = 74'd72057594037927936;
parameter    ap_ST_fsm_state128 = 74'd144115188075855872;
parameter    ap_ST_fsm_state129 = 74'd288230376151711744;
parameter    ap_ST_fsm_state130 = 74'd576460752303423488;
parameter    ap_ST_fsm_state131 = 74'd1152921504606846976;
parameter    ap_ST_fsm_state132 = 74'd2305843009213693952;
parameter    ap_ST_fsm_state133 = 74'd4611686018427387904;
parameter    ap_ST_fsm_state134 = 74'd9223372036854775808;
parameter    ap_ST_fsm_state135 = 74'd18446744073709551616;
parameter    ap_ST_fsm_state136 = 74'd36893488147419103232;
parameter    ap_ST_fsm_state137 = 74'd73786976294838206464;
parameter    ap_ST_fsm_state138 = 74'd147573952589676412928;
parameter    ap_ST_fsm_state139 = 74'd295147905179352825856;
parameter    ap_ST_fsm_state140 = 74'd590295810358705651712;
parameter    ap_ST_fsm_state141 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_state142 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_state143 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state144 = 74'd9444732965739290427392;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] output_stream_dout;
input   output_stream_empty_n;
output   output_stream_read;
output   m_axi_HP3_AWVALID;
input   m_axi_HP3_AWREADY;
output  [63:0] m_axi_HP3_AWADDR;
output  [0:0] m_axi_HP3_AWID;
output  [31:0] m_axi_HP3_AWLEN;
output  [2:0] m_axi_HP3_AWSIZE;
output  [1:0] m_axi_HP3_AWBURST;
output  [1:0] m_axi_HP3_AWLOCK;
output  [3:0] m_axi_HP3_AWCACHE;
output  [2:0] m_axi_HP3_AWPROT;
output  [3:0] m_axi_HP3_AWQOS;
output  [3:0] m_axi_HP3_AWREGION;
output  [0:0] m_axi_HP3_AWUSER;
output   m_axi_HP3_WVALID;
input   m_axi_HP3_WREADY;
output  [15:0] m_axi_HP3_WDATA;
output  [1:0] m_axi_HP3_WSTRB;
output   m_axi_HP3_WLAST;
output  [0:0] m_axi_HP3_WID;
output  [0:0] m_axi_HP3_WUSER;
output   m_axi_HP3_ARVALID;
input   m_axi_HP3_ARREADY;
output  [63:0] m_axi_HP3_ARADDR;
output  [0:0] m_axi_HP3_ARID;
output  [31:0] m_axi_HP3_ARLEN;
output  [2:0] m_axi_HP3_ARSIZE;
output  [1:0] m_axi_HP3_ARBURST;
output  [1:0] m_axi_HP3_ARLOCK;
output  [3:0] m_axi_HP3_ARCACHE;
output  [2:0] m_axi_HP3_ARPROT;
output  [3:0] m_axi_HP3_ARQOS;
output  [3:0] m_axi_HP3_ARREGION;
output  [0:0] m_axi_HP3_ARUSER;
input   m_axi_HP3_RVALID;
output   m_axi_HP3_RREADY;
input  [15:0] m_axi_HP3_RDATA;
input   m_axi_HP3_RLAST;
input  [0:0] m_axi_HP3_RID;
input  [0:0] m_axi_HP3_RUSER;
input  [1:0] m_axi_HP3_RRESP;
input   m_axi_HP3_BVALID;
output   m_axi_HP3_BREADY;
input  [1:0] m_axi_HP3_BRESP;
input  [0:0] m_axi_HP3_BID;
input  [0:0] m_axi_HP3_BUSER;
input  [63:0] output_r_dout;
input   output_r_empty_n;
output   output_r_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_stream_read;
reg m_axi_HP3_AWVALID;
reg[63:0] m_axi_HP3_AWADDR;
reg m_axi_HP3_WVALID;
reg[15:0] m_axi_HP3_WDATA;
reg m_axi_HP3_BREADY;
reg output_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_stream_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln289_fu_195_p2;
reg    HP3_blk_n_AW;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln289_reg_331;
reg   [0:0] icmp_ln291_reg_345;
reg    HP3_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln289_reg_331_pp0_iter1_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter1_reg;
reg    HP3_blk_n_B;
reg    ap_enable_reg_pp0_iter70;
reg   [0:0] icmp_ln289_reg_331_pp0_iter69_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter69_reg;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state144;
reg    output_r_blk_n;
reg   [13:0] i_reg_150;
reg   [13:0] size_reg_161;
reg   [63:0] output_read_reg_311;
wire   [2:0] add_ln287_fu_173_p2;
reg   [2:0] add_ln287_reg_317;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln287_fu_179_p2;
wire   [15:0] or_ln_fu_185_p4;
reg   [15:0] or_ln_reg_326;
reg    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_predicate_op181_writereq_state4;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_predicate_op182_write_state5;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
wire    ap_block_state29_pp0_stage0_iter26;
wire    ap_block_state30_pp0_stage0_iter27;
wire    ap_block_state31_pp0_stage0_iter28;
wire    ap_block_state32_pp0_stage0_iter29;
wire    ap_block_state33_pp0_stage0_iter30;
wire    ap_block_state34_pp0_stage0_iter31;
wire    ap_block_state35_pp0_stage0_iter32;
wire    ap_block_state36_pp0_stage0_iter33;
wire    ap_block_state37_pp0_stage0_iter34;
wire    ap_block_state38_pp0_stage0_iter35;
wire    ap_block_state39_pp0_stage0_iter36;
wire    ap_block_state40_pp0_stage0_iter37;
wire    ap_block_state41_pp0_stage0_iter38;
wire    ap_block_state42_pp0_stage0_iter39;
wire    ap_block_state43_pp0_stage0_iter40;
wire    ap_block_state44_pp0_stage0_iter41;
wire    ap_block_state45_pp0_stage0_iter42;
wire    ap_block_state46_pp0_stage0_iter43;
wire    ap_block_state47_pp0_stage0_iter44;
wire    ap_block_state48_pp0_stage0_iter45;
wire    ap_block_state49_pp0_stage0_iter46;
wire    ap_block_state50_pp0_stage0_iter47;
wire    ap_block_state51_pp0_stage0_iter48;
wire    ap_block_state52_pp0_stage0_iter49;
wire    ap_block_state53_pp0_stage0_iter50;
wire    ap_block_state54_pp0_stage0_iter51;
wire    ap_block_state55_pp0_stage0_iter52;
wire    ap_block_state56_pp0_stage0_iter53;
wire    ap_block_state57_pp0_stage0_iter54;
wire    ap_block_state58_pp0_stage0_iter55;
wire    ap_block_state59_pp0_stage0_iter56;
wire    ap_block_state60_pp0_stage0_iter57;
wire    ap_block_state61_pp0_stage0_iter58;
wire    ap_block_state62_pp0_stage0_iter59;
wire    ap_block_state63_pp0_stage0_iter60;
wire    ap_block_state64_pp0_stage0_iter61;
wire    ap_block_state65_pp0_stage0_iter62;
wire    ap_block_state66_pp0_stage0_iter63;
wire    ap_block_state67_pp0_stage0_iter64;
wire    ap_block_state68_pp0_stage0_iter65;
wire    ap_block_state69_pp0_stage0_iter66;
wire    ap_block_state70_pp0_stage0_iter67;
wire    ap_block_state71_pp0_stage0_iter68;
wire    ap_block_state72_pp0_stage0_iter69;
reg    ap_predicate_op250_writeresp_state73;
reg    ap_block_state73_pp0_stage0_iter70;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln289_reg_331_pp0_iter2_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter3_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter4_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter5_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter6_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter7_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter8_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter9_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter10_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter11_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter12_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter13_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter14_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter15_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter16_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter17_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter18_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter19_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter20_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter21_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter22_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter23_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter24_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter25_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter26_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter27_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter28_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter29_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter30_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter31_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter32_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter33_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter34_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter35_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter36_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter37_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter38_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter39_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter40_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter41_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter42_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter43_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter44_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter45_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter46_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter47_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter48_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter49_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter50_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter51_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter52_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter53_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter54_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter55_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter56_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter57_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter58_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter59_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter60_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter61_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter62_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter63_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter64_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter65_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter66_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter67_reg;
reg   [0:0] icmp_ln289_reg_331_pp0_iter68_reg;
wire   [13:0] size_1_fu_201_p2;
reg   [13:0] size_1_reg_335;
reg   [15:0] tmp_reg_340;
reg   [15:0] tmp_reg_340_pp0_iter1_reg;
wire   [0:0] icmp_ln291_fu_207_p2;
reg   [0:0] icmp_ln291_reg_345_pp0_iter2_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter3_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter4_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter5_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter6_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter7_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter8_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter9_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter10_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter11_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter12_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter13_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter14_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter15_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter16_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter17_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter18_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter19_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter20_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter21_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter22_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter23_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter24_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter25_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter26_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter27_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter28_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter29_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter30_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter31_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter32_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter33_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter34_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter35_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter36_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter37_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter38_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter39_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter40_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter41_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter42_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter43_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter44_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter45_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter46_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter47_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter48_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter49_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter50_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter51_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter52_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter53_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter54_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter55_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter56_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter57_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter58_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter59_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter60_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter61_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter62_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter63_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter64_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter65_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter66_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter67_reg;
reg   [0:0] icmp_ln291_reg_345_pp0_iter68_reg;
reg   [63:0] HP3_addr_1_reg_349;
wire   [13:0] add_ln289_fu_259_p2;
reg   [63:0] HP3_addr_reg_360;
wire    ap_CS_fsm_state74;
reg    ap_block_pp0_stage0_subdone;
reg    ap_predicate_tran3to74_state3;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg   [2:0] c_reg_138;
reg    ap_block_state1;
reg   [13:0] ap_phi_mux_size_phi_fu_165_p4;
wire  signed [63:0] sext_ln295_fu_249_p1;
wire  signed [63:0] sext_ln299_fu_296_p1;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln299_fu_306_p1;
wire   [15:0] zext_ln295_fu_213_p1;
wire   [15:0] add_ln295_fu_217_p2;
wire   [16:0] shl_ln_fu_222_p3;
wire   [63:0] zext_ln295_1_fu_230_p1;
wire   [63:0] add_ln295_1_fu_234_p2;
wire   [62:0] trunc_ln1_fu_239_p4;
wire   [16:0] or_ln1_fu_265_p5;
wire   [63:0] zext_ln299_1_fu_277_p1;
wire   [63:0] add_ln299_fu_281_p2;
wire   [62:0] trunc_ln_fu_286_p4;
reg   [73:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 74'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln287_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln287_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end else if (((icmp_ln287_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter70 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_reg_138 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state144) & (m_axi_HP3_BVALID == 1'b1))) begin
        c_reg_138 <= add_ln287_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_150 <= add_ln289_fu_259_p2;
    end else if (((icmp_ln287_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_150 <= 14'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln291_reg_345 == 1'd0) & (icmp_ln289_reg_331 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        size_reg_161 <= size_1_reg_335;
    end else if (((icmp_ln287_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        size_reg_161 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_fu_207_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        HP3_addr_1_reg_349 <= sext_ln295_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        HP3_addr_reg_360 <= sext_ln299_fu_296_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln287_reg_317 <= add_ln287_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln289_reg_331 <= icmp_ln289_fu_195_p2;
        icmp_ln289_reg_331_pp0_iter1_reg <= icmp_ln289_reg_331;
        icmp_ln291_reg_345_pp0_iter1_reg <= icmp_ln291_reg_345;
        tmp_reg_340_pp0_iter1_reg <= tmp_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln289_reg_331_pp0_iter10_reg <= icmp_ln289_reg_331_pp0_iter9_reg;
        icmp_ln289_reg_331_pp0_iter11_reg <= icmp_ln289_reg_331_pp0_iter10_reg;
        icmp_ln289_reg_331_pp0_iter12_reg <= icmp_ln289_reg_331_pp0_iter11_reg;
        icmp_ln289_reg_331_pp0_iter13_reg <= icmp_ln289_reg_331_pp0_iter12_reg;
        icmp_ln289_reg_331_pp0_iter14_reg <= icmp_ln289_reg_331_pp0_iter13_reg;
        icmp_ln289_reg_331_pp0_iter15_reg <= icmp_ln289_reg_331_pp0_iter14_reg;
        icmp_ln289_reg_331_pp0_iter16_reg <= icmp_ln289_reg_331_pp0_iter15_reg;
        icmp_ln289_reg_331_pp0_iter17_reg <= icmp_ln289_reg_331_pp0_iter16_reg;
        icmp_ln289_reg_331_pp0_iter18_reg <= icmp_ln289_reg_331_pp0_iter17_reg;
        icmp_ln289_reg_331_pp0_iter19_reg <= icmp_ln289_reg_331_pp0_iter18_reg;
        icmp_ln289_reg_331_pp0_iter20_reg <= icmp_ln289_reg_331_pp0_iter19_reg;
        icmp_ln289_reg_331_pp0_iter21_reg <= icmp_ln289_reg_331_pp0_iter20_reg;
        icmp_ln289_reg_331_pp0_iter22_reg <= icmp_ln289_reg_331_pp0_iter21_reg;
        icmp_ln289_reg_331_pp0_iter23_reg <= icmp_ln289_reg_331_pp0_iter22_reg;
        icmp_ln289_reg_331_pp0_iter24_reg <= icmp_ln289_reg_331_pp0_iter23_reg;
        icmp_ln289_reg_331_pp0_iter25_reg <= icmp_ln289_reg_331_pp0_iter24_reg;
        icmp_ln289_reg_331_pp0_iter26_reg <= icmp_ln289_reg_331_pp0_iter25_reg;
        icmp_ln289_reg_331_pp0_iter27_reg <= icmp_ln289_reg_331_pp0_iter26_reg;
        icmp_ln289_reg_331_pp0_iter28_reg <= icmp_ln289_reg_331_pp0_iter27_reg;
        icmp_ln289_reg_331_pp0_iter29_reg <= icmp_ln289_reg_331_pp0_iter28_reg;
        icmp_ln289_reg_331_pp0_iter2_reg <= icmp_ln289_reg_331_pp0_iter1_reg;
        icmp_ln289_reg_331_pp0_iter30_reg <= icmp_ln289_reg_331_pp0_iter29_reg;
        icmp_ln289_reg_331_pp0_iter31_reg <= icmp_ln289_reg_331_pp0_iter30_reg;
        icmp_ln289_reg_331_pp0_iter32_reg <= icmp_ln289_reg_331_pp0_iter31_reg;
        icmp_ln289_reg_331_pp0_iter33_reg <= icmp_ln289_reg_331_pp0_iter32_reg;
        icmp_ln289_reg_331_pp0_iter34_reg <= icmp_ln289_reg_331_pp0_iter33_reg;
        icmp_ln289_reg_331_pp0_iter35_reg <= icmp_ln289_reg_331_pp0_iter34_reg;
        icmp_ln289_reg_331_pp0_iter36_reg <= icmp_ln289_reg_331_pp0_iter35_reg;
        icmp_ln289_reg_331_pp0_iter37_reg <= icmp_ln289_reg_331_pp0_iter36_reg;
        icmp_ln289_reg_331_pp0_iter38_reg <= icmp_ln289_reg_331_pp0_iter37_reg;
        icmp_ln289_reg_331_pp0_iter39_reg <= icmp_ln289_reg_331_pp0_iter38_reg;
        icmp_ln289_reg_331_pp0_iter3_reg <= icmp_ln289_reg_331_pp0_iter2_reg;
        icmp_ln289_reg_331_pp0_iter40_reg <= icmp_ln289_reg_331_pp0_iter39_reg;
        icmp_ln289_reg_331_pp0_iter41_reg <= icmp_ln289_reg_331_pp0_iter40_reg;
        icmp_ln289_reg_331_pp0_iter42_reg <= icmp_ln289_reg_331_pp0_iter41_reg;
        icmp_ln289_reg_331_pp0_iter43_reg <= icmp_ln289_reg_331_pp0_iter42_reg;
        icmp_ln289_reg_331_pp0_iter44_reg <= icmp_ln289_reg_331_pp0_iter43_reg;
        icmp_ln289_reg_331_pp0_iter45_reg <= icmp_ln289_reg_331_pp0_iter44_reg;
        icmp_ln289_reg_331_pp0_iter46_reg <= icmp_ln289_reg_331_pp0_iter45_reg;
        icmp_ln289_reg_331_pp0_iter47_reg <= icmp_ln289_reg_331_pp0_iter46_reg;
        icmp_ln289_reg_331_pp0_iter48_reg <= icmp_ln289_reg_331_pp0_iter47_reg;
        icmp_ln289_reg_331_pp0_iter49_reg <= icmp_ln289_reg_331_pp0_iter48_reg;
        icmp_ln289_reg_331_pp0_iter4_reg <= icmp_ln289_reg_331_pp0_iter3_reg;
        icmp_ln289_reg_331_pp0_iter50_reg <= icmp_ln289_reg_331_pp0_iter49_reg;
        icmp_ln289_reg_331_pp0_iter51_reg <= icmp_ln289_reg_331_pp0_iter50_reg;
        icmp_ln289_reg_331_pp0_iter52_reg <= icmp_ln289_reg_331_pp0_iter51_reg;
        icmp_ln289_reg_331_pp0_iter53_reg <= icmp_ln289_reg_331_pp0_iter52_reg;
        icmp_ln289_reg_331_pp0_iter54_reg <= icmp_ln289_reg_331_pp0_iter53_reg;
        icmp_ln289_reg_331_pp0_iter55_reg <= icmp_ln289_reg_331_pp0_iter54_reg;
        icmp_ln289_reg_331_pp0_iter56_reg <= icmp_ln289_reg_331_pp0_iter55_reg;
        icmp_ln289_reg_331_pp0_iter57_reg <= icmp_ln289_reg_331_pp0_iter56_reg;
        icmp_ln289_reg_331_pp0_iter58_reg <= icmp_ln289_reg_331_pp0_iter57_reg;
        icmp_ln289_reg_331_pp0_iter59_reg <= icmp_ln289_reg_331_pp0_iter58_reg;
        icmp_ln289_reg_331_pp0_iter5_reg <= icmp_ln289_reg_331_pp0_iter4_reg;
        icmp_ln289_reg_331_pp0_iter60_reg <= icmp_ln289_reg_331_pp0_iter59_reg;
        icmp_ln289_reg_331_pp0_iter61_reg <= icmp_ln289_reg_331_pp0_iter60_reg;
        icmp_ln289_reg_331_pp0_iter62_reg <= icmp_ln289_reg_331_pp0_iter61_reg;
        icmp_ln289_reg_331_pp0_iter63_reg <= icmp_ln289_reg_331_pp0_iter62_reg;
        icmp_ln289_reg_331_pp0_iter64_reg <= icmp_ln289_reg_331_pp0_iter63_reg;
        icmp_ln289_reg_331_pp0_iter65_reg <= icmp_ln289_reg_331_pp0_iter64_reg;
        icmp_ln289_reg_331_pp0_iter66_reg <= icmp_ln289_reg_331_pp0_iter65_reg;
        icmp_ln289_reg_331_pp0_iter67_reg <= icmp_ln289_reg_331_pp0_iter66_reg;
        icmp_ln289_reg_331_pp0_iter68_reg <= icmp_ln289_reg_331_pp0_iter67_reg;
        icmp_ln289_reg_331_pp0_iter69_reg <= icmp_ln289_reg_331_pp0_iter68_reg;
        icmp_ln289_reg_331_pp0_iter6_reg <= icmp_ln289_reg_331_pp0_iter5_reg;
        icmp_ln289_reg_331_pp0_iter7_reg <= icmp_ln289_reg_331_pp0_iter6_reg;
        icmp_ln289_reg_331_pp0_iter8_reg <= icmp_ln289_reg_331_pp0_iter7_reg;
        icmp_ln289_reg_331_pp0_iter9_reg <= icmp_ln289_reg_331_pp0_iter8_reg;
        icmp_ln291_reg_345_pp0_iter10_reg <= icmp_ln291_reg_345_pp0_iter9_reg;
        icmp_ln291_reg_345_pp0_iter11_reg <= icmp_ln291_reg_345_pp0_iter10_reg;
        icmp_ln291_reg_345_pp0_iter12_reg <= icmp_ln291_reg_345_pp0_iter11_reg;
        icmp_ln291_reg_345_pp0_iter13_reg <= icmp_ln291_reg_345_pp0_iter12_reg;
        icmp_ln291_reg_345_pp0_iter14_reg <= icmp_ln291_reg_345_pp0_iter13_reg;
        icmp_ln291_reg_345_pp0_iter15_reg <= icmp_ln291_reg_345_pp0_iter14_reg;
        icmp_ln291_reg_345_pp0_iter16_reg <= icmp_ln291_reg_345_pp0_iter15_reg;
        icmp_ln291_reg_345_pp0_iter17_reg <= icmp_ln291_reg_345_pp0_iter16_reg;
        icmp_ln291_reg_345_pp0_iter18_reg <= icmp_ln291_reg_345_pp0_iter17_reg;
        icmp_ln291_reg_345_pp0_iter19_reg <= icmp_ln291_reg_345_pp0_iter18_reg;
        icmp_ln291_reg_345_pp0_iter20_reg <= icmp_ln291_reg_345_pp0_iter19_reg;
        icmp_ln291_reg_345_pp0_iter21_reg <= icmp_ln291_reg_345_pp0_iter20_reg;
        icmp_ln291_reg_345_pp0_iter22_reg <= icmp_ln291_reg_345_pp0_iter21_reg;
        icmp_ln291_reg_345_pp0_iter23_reg <= icmp_ln291_reg_345_pp0_iter22_reg;
        icmp_ln291_reg_345_pp0_iter24_reg <= icmp_ln291_reg_345_pp0_iter23_reg;
        icmp_ln291_reg_345_pp0_iter25_reg <= icmp_ln291_reg_345_pp0_iter24_reg;
        icmp_ln291_reg_345_pp0_iter26_reg <= icmp_ln291_reg_345_pp0_iter25_reg;
        icmp_ln291_reg_345_pp0_iter27_reg <= icmp_ln291_reg_345_pp0_iter26_reg;
        icmp_ln291_reg_345_pp0_iter28_reg <= icmp_ln291_reg_345_pp0_iter27_reg;
        icmp_ln291_reg_345_pp0_iter29_reg <= icmp_ln291_reg_345_pp0_iter28_reg;
        icmp_ln291_reg_345_pp0_iter2_reg <= icmp_ln291_reg_345_pp0_iter1_reg;
        icmp_ln291_reg_345_pp0_iter30_reg <= icmp_ln291_reg_345_pp0_iter29_reg;
        icmp_ln291_reg_345_pp0_iter31_reg <= icmp_ln291_reg_345_pp0_iter30_reg;
        icmp_ln291_reg_345_pp0_iter32_reg <= icmp_ln291_reg_345_pp0_iter31_reg;
        icmp_ln291_reg_345_pp0_iter33_reg <= icmp_ln291_reg_345_pp0_iter32_reg;
        icmp_ln291_reg_345_pp0_iter34_reg <= icmp_ln291_reg_345_pp0_iter33_reg;
        icmp_ln291_reg_345_pp0_iter35_reg <= icmp_ln291_reg_345_pp0_iter34_reg;
        icmp_ln291_reg_345_pp0_iter36_reg <= icmp_ln291_reg_345_pp0_iter35_reg;
        icmp_ln291_reg_345_pp0_iter37_reg <= icmp_ln291_reg_345_pp0_iter36_reg;
        icmp_ln291_reg_345_pp0_iter38_reg <= icmp_ln291_reg_345_pp0_iter37_reg;
        icmp_ln291_reg_345_pp0_iter39_reg <= icmp_ln291_reg_345_pp0_iter38_reg;
        icmp_ln291_reg_345_pp0_iter3_reg <= icmp_ln291_reg_345_pp0_iter2_reg;
        icmp_ln291_reg_345_pp0_iter40_reg <= icmp_ln291_reg_345_pp0_iter39_reg;
        icmp_ln291_reg_345_pp0_iter41_reg <= icmp_ln291_reg_345_pp0_iter40_reg;
        icmp_ln291_reg_345_pp0_iter42_reg <= icmp_ln291_reg_345_pp0_iter41_reg;
        icmp_ln291_reg_345_pp0_iter43_reg <= icmp_ln291_reg_345_pp0_iter42_reg;
        icmp_ln291_reg_345_pp0_iter44_reg <= icmp_ln291_reg_345_pp0_iter43_reg;
        icmp_ln291_reg_345_pp0_iter45_reg <= icmp_ln291_reg_345_pp0_iter44_reg;
        icmp_ln291_reg_345_pp0_iter46_reg <= icmp_ln291_reg_345_pp0_iter45_reg;
        icmp_ln291_reg_345_pp0_iter47_reg <= icmp_ln291_reg_345_pp0_iter46_reg;
        icmp_ln291_reg_345_pp0_iter48_reg <= icmp_ln291_reg_345_pp0_iter47_reg;
        icmp_ln291_reg_345_pp0_iter49_reg <= icmp_ln291_reg_345_pp0_iter48_reg;
        icmp_ln291_reg_345_pp0_iter4_reg <= icmp_ln291_reg_345_pp0_iter3_reg;
        icmp_ln291_reg_345_pp0_iter50_reg <= icmp_ln291_reg_345_pp0_iter49_reg;
        icmp_ln291_reg_345_pp0_iter51_reg <= icmp_ln291_reg_345_pp0_iter50_reg;
        icmp_ln291_reg_345_pp0_iter52_reg <= icmp_ln291_reg_345_pp0_iter51_reg;
        icmp_ln291_reg_345_pp0_iter53_reg <= icmp_ln291_reg_345_pp0_iter52_reg;
        icmp_ln291_reg_345_pp0_iter54_reg <= icmp_ln291_reg_345_pp0_iter53_reg;
        icmp_ln291_reg_345_pp0_iter55_reg <= icmp_ln291_reg_345_pp0_iter54_reg;
        icmp_ln291_reg_345_pp0_iter56_reg <= icmp_ln291_reg_345_pp0_iter55_reg;
        icmp_ln291_reg_345_pp0_iter57_reg <= icmp_ln291_reg_345_pp0_iter56_reg;
        icmp_ln291_reg_345_pp0_iter58_reg <= icmp_ln291_reg_345_pp0_iter57_reg;
        icmp_ln291_reg_345_pp0_iter59_reg <= icmp_ln291_reg_345_pp0_iter58_reg;
        icmp_ln291_reg_345_pp0_iter5_reg <= icmp_ln291_reg_345_pp0_iter4_reg;
        icmp_ln291_reg_345_pp0_iter60_reg <= icmp_ln291_reg_345_pp0_iter59_reg;
        icmp_ln291_reg_345_pp0_iter61_reg <= icmp_ln291_reg_345_pp0_iter60_reg;
        icmp_ln291_reg_345_pp0_iter62_reg <= icmp_ln291_reg_345_pp0_iter61_reg;
        icmp_ln291_reg_345_pp0_iter63_reg <= icmp_ln291_reg_345_pp0_iter62_reg;
        icmp_ln291_reg_345_pp0_iter64_reg <= icmp_ln291_reg_345_pp0_iter63_reg;
        icmp_ln291_reg_345_pp0_iter65_reg <= icmp_ln291_reg_345_pp0_iter64_reg;
        icmp_ln291_reg_345_pp0_iter66_reg <= icmp_ln291_reg_345_pp0_iter65_reg;
        icmp_ln291_reg_345_pp0_iter67_reg <= icmp_ln291_reg_345_pp0_iter66_reg;
        icmp_ln291_reg_345_pp0_iter68_reg <= icmp_ln291_reg_345_pp0_iter67_reg;
        icmp_ln291_reg_345_pp0_iter69_reg <= icmp_ln291_reg_345_pp0_iter68_reg;
        icmp_ln291_reg_345_pp0_iter6_reg <= icmp_ln291_reg_345_pp0_iter5_reg;
        icmp_ln291_reg_345_pp0_iter7_reg <= icmp_ln291_reg_345_pp0_iter6_reg;
        icmp_ln291_reg_345_pp0_iter8_reg <= icmp_ln291_reg_345_pp0_iter7_reg;
        icmp_ln291_reg_345_pp0_iter9_reg <= icmp_ln291_reg_345_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln291_reg_345 <= icmp_ln291_fu_207_p2;
        tmp_reg_340 <= output_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln287_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        or_ln_reg_326[2 : 0] <= or_ln_fu_185_p4[2 : 0];
or_ln_reg_326[15 : 13] <= or_ln_fu_185_p4[15 : 13];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        output_read_reg_311 <= output_r_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        size_1_reg_335 <= size_1_fu_201_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln291_reg_345 == 1'd0) & (icmp_ln289_reg_331 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        HP3_blk_n_AW = m_axi_HP3_AWREADY;
    end else begin
        HP3_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state144) | ((icmp_ln291_reg_345_pp0_iter69_reg == 1'd0) & (icmp_ln289_reg_331_pp0_iter69_reg == 1'd1) & (ap_enable_reg_pp0_iter70 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        HP3_blk_n_B = m_axi_HP3_BVALID;
    end else begin
        HP3_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state76) | ((icmp_ln291_reg_345_pp0_iter1_reg == 1'd0) & (icmp_ln289_reg_331_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        HP3_blk_n_W = m_axi_HP3_WREADY;
    end else begin
        HP3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((ap_predicate_tran3to74_state3 == 1'b1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln287_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln291_reg_345 == 1'd0) & (icmp_ln289_reg_331 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_size_phi_fu_165_p4 = size_1_reg_335;
    end else begin
        ap_phi_mux_size_phi_fu_165_p4 = size_reg_161;
    end
end

always @ (*) begin
    if (((icmp_ln287_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (m_axi_HP3_AWREADY == 1'b1))) begin
        m_axi_HP3_AWADDR = HP3_addr_reg_360;
    end else if (((ap_predicate_op181_writereq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_HP3_AWADDR = HP3_addr_1_reg_349;
    end else begin
        m_axi_HP3_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op181_writereq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state75) & (m_axi_HP3_AWREADY == 1'b1)))) begin
        m_axi_HP3_AWVALID = 1'b1;
    end else begin
        m_axi_HP3_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op250_writeresp_state73 == 1'b1) & (ap_enable_reg_pp0_iter70 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state144) & (m_axi_HP3_BVALID == 1'b1)))) begin
        m_axi_HP3_BREADY = 1'b1;
    end else begin
        m_axi_HP3_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        m_axi_HP3_WDATA = zext_ln299_fu_306_p1;
    end else if (((ap_predicate_op182_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_HP3_WDATA = tmp_reg_340_pp0_iter1_reg;
    end else begin
        m_axi_HP3_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op182_write_state5 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_state76) & (m_axi_HP3_WREADY == 1'b1)))) begin
        m_axi_HP3_WVALID = 1'b1;
    end else begin
        m_axi_HP3_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_r_blk_n = output_r_empty_n;
    end else begin
        output_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_r_read = 1'b1;
    end else begin
        output_r_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_stream_blk_n = output_stream_empty_n;
    end else begin
        output_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln289_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        output_stream_read = 1'b1;
    end else begin
        output_stream_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln287_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_predicate_tran3to74_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_predicate_tran3to74_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (m_axi_HP3_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == ap_CS_fsm_state76) & (m_axi_HP3_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (m_axi_HP3_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln287_fu_173_p2 = (c_reg_138 + 3'd1);

assign add_ln289_fu_259_p2 = (i_reg_150 + 14'd1);

assign add_ln295_1_fu_234_p2 = (output_read_reg_311 + zext_ln295_1_fu_230_p1);

assign add_ln295_fu_217_p2 = (or_ln_reg_326 + zext_ln295_fu_213_p1);

assign add_ln299_fu_281_p2 = (output_read_reg_311 + zext_ln299_1_fu_277_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op250_writeresp_state73 == 1'b1) & (ap_enable_reg_pp0_iter70 == 1'b1) & (m_axi_HP3_BVALID == 1'b0)) | ((output_stream_empty_n == 1'b0) & (icmp_ln289_fu_195_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op250_writeresp_state73 == 1'b1) & (ap_enable_reg_pp0_iter70 == 1'b1) & (m_axi_HP3_BVALID == 1'b0)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((output_stream_empty_n == 1'b0) & (icmp_ln289_fu_195_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op250_writeresp_state73 == 1'b1) & (ap_enable_reg_pp0_iter70 == 1'b1) & (m_axi_HP3_BVALID == 1'b0)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((output_stream_empty_n == 1'b0) & (icmp_ln289_fu_195_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (output_r_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter0 = ((output_stream_empty_n == 1'b0) & (icmp_ln289_fu_195_p2 == 1'd1));
end

assign ap_block_state40_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((ap_predicate_op181_writereq_state4 == 1'b1) & (m_axi_HP3_AWREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((ap_predicate_op182_write_state5 == 1'b1) & (m_axi_HP3_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter70 = ((ap_predicate_op250_writeresp_state73 == 1'b1) & (m_axi_HP3_BVALID == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op181_writereq_state4 = ((icmp_ln291_reg_345 == 1'd0) & (icmp_ln289_reg_331 == 1'd1));
end

always @ (*) begin
    ap_predicate_op182_write_state5 = ((icmp_ln291_reg_345_pp0_iter1_reg == 1'd0) & (icmp_ln289_reg_331_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op250_writeresp_state73 = ((icmp_ln291_reg_345_pp0_iter69_reg == 1'd0) & (icmp_ln289_reg_331_pp0_iter69_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_tran3to74_state3 = ((icmp_ln291_fu_207_p2 == 1'd1) | (icmp_ln289_fu_195_p2 == 1'd0));
end

assign icmp_ln287_fu_179_p2 = ((c_reg_138 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln289_fu_195_p2 = ((i_reg_150 < 14'd8193) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_207_p2 = ((output_stream_dout == 16'd61440) ? 1'b1 : 1'b0);

assign m_axi_HP3_ARADDR = 64'd0;

assign m_axi_HP3_ARBURST = 2'd0;

assign m_axi_HP3_ARCACHE = 4'd0;

assign m_axi_HP3_ARID = 1'd0;

assign m_axi_HP3_ARLEN = 32'd0;

assign m_axi_HP3_ARLOCK = 2'd0;

assign m_axi_HP3_ARPROT = 3'd0;

assign m_axi_HP3_ARQOS = 4'd0;

assign m_axi_HP3_ARREGION = 4'd0;

assign m_axi_HP3_ARSIZE = 3'd0;

assign m_axi_HP3_ARUSER = 1'd0;

assign m_axi_HP3_ARVALID = 1'b0;

assign m_axi_HP3_AWBURST = 2'd0;

assign m_axi_HP3_AWCACHE = 4'd0;

assign m_axi_HP3_AWID = 1'd0;

assign m_axi_HP3_AWLEN = 32'd1;

assign m_axi_HP3_AWLOCK = 2'd0;

assign m_axi_HP3_AWPROT = 3'd0;

assign m_axi_HP3_AWQOS = 4'd0;

assign m_axi_HP3_AWREGION = 4'd0;

assign m_axi_HP3_AWSIZE = 3'd0;

assign m_axi_HP3_AWUSER = 1'd0;

assign m_axi_HP3_RREADY = 1'b0;

assign m_axi_HP3_WID = 1'd0;

assign m_axi_HP3_WLAST = 1'b0;

assign m_axi_HP3_WSTRB = 2'd3;

assign m_axi_HP3_WUSER = 1'd0;

assign or_ln1_fu_265_p5 = {{{{c_reg_138}, {10'd0}}, {c_reg_138}}, {1'd0}};

assign or_ln_fu_185_p4 = {{{c_reg_138}, {10'd0}}, {c_reg_138}};

assign sext_ln295_fu_249_p1 = $signed(trunc_ln1_fu_239_p4);

assign sext_ln299_fu_296_p1 = $signed(trunc_ln_fu_286_p4);

assign shl_ln_fu_222_p3 = {{add_ln295_fu_217_p2}, {1'd0}};

assign size_1_fu_201_p2 = (ap_phi_mux_size_phi_fu_165_p4 + 14'd1);

assign trunc_ln1_fu_239_p4 = {{add_ln295_1_fu_234_p2[63:1]}};

assign trunc_ln_fu_286_p4 = {{add_ln299_fu_281_p2[63:1]}};

assign zext_ln295_1_fu_230_p1 = shl_ln_fu_222_p3;

assign zext_ln295_fu_213_p1 = i_reg_150;

assign zext_ln299_1_fu_277_p1 = or_ln1_fu_265_p5;

assign zext_ln299_fu_306_p1 = size_reg_161;

always @ (posedge ap_clk) begin
    or_ln_reg_326[12:3] <= 10'b0000000000;
end

endmodule //hardware_encoding_write_output

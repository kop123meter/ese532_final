-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hardware_encoding is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_HP1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_HP3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_HP3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_HP1_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HP1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_HP3_USER_VALUE : INTEGER := 0;
    C_M_AXI_HP3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_HP3_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_HP1_AWVALID : OUT STD_LOGIC;
    m_axi_HP1_AWREADY : IN STD_LOGIC;
    m_axi_HP1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ADDR_WIDTH-1 downto 0);
    m_axi_HP1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_AWUSER_WIDTH-1 downto 0);
    m_axi_HP1_WVALID : OUT STD_LOGIC;
    m_axi_HP1_WREADY : IN STD_LOGIC;
    m_axi_HP1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH-1 downto 0);
    m_axi_HP1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH/8-1 downto 0);
    m_axi_HP1_WLAST : OUT STD_LOGIC;
    m_axi_HP1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_WUSER_WIDTH-1 downto 0);
    m_axi_HP1_ARVALID : OUT STD_LOGIC;
    m_axi_HP1_ARREADY : IN STD_LOGIC;
    m_axi_HP1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ADDR_WIDTH-1 downto 0);
    m_axi_HP1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP1_ARUSER_WIDTH-1 downto 0);
    m_axi_HP1_RVALID : IN STD_LOGIC;
    m_axi_HP1_RREADY : OUT STD_LOGIC;
    m_axi_HP1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_DATA_WIDTH-1 downto 0);
    m_axi_HP1_RLAST : IN STD_LOGIC;
    m_axi_HP1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_RUSER_WIDTH-1 downto 0);
    m_axi_HP1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_BVALID : IN STD_LOGIC;
    m_axi_HP1_BREADY : OUT STD_LOGIC;
    m_axi_HP1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_ID_WIDTH-1 downto 0);
    m_axi_HP1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP1_BUSER_WIDTH-1 downto 0);
    m_axi_HP3_AWVALID : OUT STD_LOGIC;
    m_axi_HP3_AWREADY : IN STD_LOGIC;
    m_axi_HP3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ADDR_WIDTH-1 downto 0);
    m_axi_HP3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_AWUSER_WIDTH-1 downto 0);
    m_axi_HP3_WVALID : OUT STD_LOGIC;
    m_axi_HP3_WREADY : IN STD_LOGIC;
    m_axi_HP3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH-1 downto 0);
    m_axi_HP3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH/8-1 downto 0);
    m_axi_HP3_WLAST : OUT STD_LOGIC;
    m_axi_HP3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_WUSER_WIDTH-1 downto 0);
    m_axi_HP3_ARVALID : OUT STD_LOGIC;
    m_axi_HP3_ARREADY : IN STD_LOGIC;
    m_axi_HP3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ADDR_WIDTH-1 downto 0);
    m_axi_HP3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HP3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HP3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HP3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_HP3_ARUSER_WIDTH-1 downto 0);
    m_axi_HP3_RVALID : IN STD_LOGIC;
    m_axi_HP3_RREADY : OUT STD_LOGIC;
    m_axi_HP3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_DATA_WIDTH-1 downto 0);
    m_axi_HP3_RLAST : IN STD_LOGIC;
    m_axi_HP3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_RUSER_WIDTH-1 downto 0);
    m_axi_HP3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_BVALID : IN STD_LOGIC;
    m_axi_HP3_BREADY : OUT STD_LOGIC;
    m_axi_HP3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HP3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_ID_WIDTH-1 downto 0);
    m_axi_HP3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_HP3_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of hardware_encoding is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hardware_encoding_hardware_encoding,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=136,HLS_SYN_DSP=0,HLS_SYN_FF=4256,HLS_SYN_LUT=10141,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal s1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal HP1_AWREADY : STD_LOGIC;
    signal HP1_WREADY : STD_LOGIC;
    signal HP1_ARREADY : STD_LOGIC;
    signal HP1_RVALID : STD_LOGIC;
    signal HP1_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal HP1_RLAST : STD_LOGIC;
    signal HP1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_BVALID : STD_LOGIC;
    signal HP1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_AWREADY : STD_LOGIC;
    signal HP3_WREADY : STD_LOGIC;
    signal HP3_ARREADY : STD_LOGIC;
    signal HP3_RVALID : STD_LOGIC;
    signal HP3_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal HP3_RLAST : STD_LOGIC;
    signal HP3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_BVALID : STD_LOGIC;
    signal HP3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal HP3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal HP3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_ap_start : STD_LOGIC;
    signal read_input5_U0_start_full_n : STD_LOGIC;
    signal read_input5_U0_ap_done : STD_LOGIC;
    signal read_input5_U0_ap_continue : STD_LOGIC;
    signal read_input5_U0_ap_idle : STD_LOGIC;
    signal read_input5_U0_ap_ready : STD_LOGIC;
    signal read_input5_U0_start_out : STD_LOGIC;
    signal read_input5_U0_start_write : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_AWVALID : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input5_U0_m_axi_HP1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input5_U0_m_axi_HP1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input5_U0_m_axi_HP1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input5_U0_m_axi_HP1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input5_U0_m_axi_HP1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input5_U0_m_axi_HP1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_WVALID : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal read_input5_U0_m_axi_HP1_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input5_U0_m_axi_HP1_WLAST : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_ARVALID : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input5_U0_m_axi_HP1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input5_U0_m_axi_HP1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input5_U0_m_axi_HP1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input5_U0_m_axi_HP1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input5_U0_m_axi_HP1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input5_U0_m_axi_HP1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input5_U0_m_axi_HP1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input5_U0_m_axi_HP1_RREADY : STD_LOGIC;
    signal read_input5_U0_m_axi_HP1_BREADY : STD_LOGIC;
    signal read_input5_U0_input_r_din : STD_LOGIC_VECTOR (7 downto 0);
    signal read_input5_U0_input_r_write : STD_LOGIC;
    signal read_input5_U0_output_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input5_U0_output_out_write : STD_LOGIC;
    signal computing_U0_ap_start : STD_LOGIC;
    signal computing_U0_ap_done : STD_LOGIC;
    signal computing_U0_ap_continue : STD_LOGIC;
    signal computing_U0_ap_idle : STD_LOGIC;
    signal computing_U0_ap_ready : STD_LOGIC;
    signal computing_U0_input_r_read : STD_LOGIC;
    signal computing_U0_output_r_din : STD_LOGIC_VECTOR (15 downto 0);
    signal computing_U0_output_r_write : STD_LOGIC;
    signal write_output_U0_ap_start : STD_LOGIC;
    signal write_output_U0_ap_done : STD_LOGIC;
    signal write_output_U0_ap_continue : STD_LOGIC;
    signal write_output_U0_ap_idle : STD_LOGIC;
    signal write_output_U0_ap_ready : STD_LOGIC;
    signal write_output_U0_output_stream_read : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_AWVALID : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_output_U0_m_axi_HP3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_output_U0_m_axi_HP3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_output_U0_m_axi_HP3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_U0_m_axi_HP3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_U0_m_axi_HP3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_output_U0_m_axi_HP3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_WVALID : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal write_output_U0_m_axi_HP3_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_U0_m_axi_HP3_WLAST : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_ARVALID : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_output_U0_m_axi_HP3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_output_U0_m_axi_HP3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_output_U0_m_axi_HP3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_U0_m_axi_HP3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_output_U0_m_axi_HP3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_output_U0_m_axi_HP3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_output_U0_m_axi_HP3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_output_U0_m_axi_HP3_RREADY : STD_LOGIC;
    signal write_output_U0_m_axi_HP3_BREADY : STD_LOGIC;
    signal write_output_U0_output_r_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal input_stream_full_n : STD_LOGIC;
    signal input_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_empty_n : STD_LOGIC;
    signal output_c_full_n : STD_LOGIC;
    signal output_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_c_empty_n : STD_LOGIC;
    signal output_stream_full_n : STD_LOGIC;
    signal output_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal output_stream_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_computing_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_computing_U0_full_n : STD_LOGIC;
    signal start_for_computing_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_computing_U0_empty_n : STD_LOGIC;
    signal start_for_write_output_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_U0_full_n : STD_LOGIC;
    signal start_for_write_output_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_output_U0_empty_n : STD_LOGIC;
    signal computing_U0_start_full_n : STD_LOGIC;
    signal computing_U0_start_write : STD_LOGIC;
    signal write_output_U0_start_full_n : STD_LOGIC;
    signal write_output_U0_start_write : STD_LOGIC;

    component hardware_encoding_read_input5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_HP1_AWVALID : OUT STD_LOGIC;
        m_axi_HP1_AWREADY : IN STD_LOGIC;
        m_axi_HP1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_HP1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_HP1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_WVALID : OUT STD_LOGIC;
        m_axi_HP1_WREADY : IN STD_LOGIC;
        m_axi_HP1_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_HP1_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_WLAST : OUT STD_LOGIC;
        m_axi_HP1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_ARVALID : OUT STD_LOGIC;
        m_axi_HP1_ARREADY : IN STD_LOGIC;
        m_axi_HP1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_HP1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_HP1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_RVALID : IN STD_LOGIC;
        m_axi_HP1_RREADY : OUT STD_LOGIC;
        m_axi_HP1_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_HP1_RLAST : IN STD_LOGIC;
        m_axi_HP1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_BVALID : IN STD_LOGIC;
        m_axi_HP1_BREADY : OUT STD_LOGIC;
        m_axi_HP1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_r_full_n : IN STD_LOGIC;
        input_r_write : OUT STD_LOGIC;
        s1 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_out_full_n : IN STD_LOGIC;
        output_out_write : OUT STD_LOGIC );
    end component;


    component hardware_encoding_computing IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        output_r_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_full_n : IN STD_LOGIC;
        output_r_write : OUT STD_LOGIC );
    end component;


    component hardware_encoding_write_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_stream_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_stream_empty_n : IN STD_LOGIC;
        output_stream_read : OUT STD_LOGIC;
        m_axi_HP3_AWVALID : OUT STD_LOGIC;
        m_axi_HP3_AWREADY : IN STD_LOGIC;
        m_axi_HP3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_HP3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_HP3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_WVALID : OUT STD_LOGIC;
        m_axi_HP3_WREADY : IN STD_LOGIC;
        m_axi_HP3_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_HP3_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_WLAST : OUT STD_LOGIC;
        m_axi_HP3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_ARVALID : OUT STD_LOGIC;
        m_axi_HP3_ARREADY : IN STD_LOGIC;
        m_axi_HP3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_HP3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_HP3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_HP3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_HP3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_RVALID : IN STD_LOGIC;
        m_axi_HP3_RREADY : OUT STD_LOGIC;
        m_axi_HP3_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_HP3_RLAST : IN STD_LOGIC;
        m_axi_HP3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_BVALID : IN STD_LOGIC;
        m_axi_HP3_BREADY : OUT STD_LOGIC;
        m_axi_HP3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_HP3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_HP3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC );
    end component;


    component hardware_encoding_fifo_w8_d500_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hardware_encoding_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hardware_encoding_fifo_w16_d500_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hardware_encoding_start_for_computing_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hardware_encoding_start_for_write_output_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component hardware_encoding_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        s1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component hardware_encoding_HP1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component hardware_encoding_HP3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component hardware_encoding_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        s1 => s1,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    HP1_m_axi_U : component hardware_encoding_HP1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP1_AWVALID,
        AWREADY => m_axi_HP1_AWREADY,
        AWADDR => m_axi_HP1_AWADDR,
        AWID => m_axi_HP1_AWID,
        AWLEN => m_axi_HP1_AWLEN,
        AWSIZE => m_axi_HP1_AWSIZE,
        AWBURST => m_axi_HP1_AWBURST,
        AWLOCK => m_axi_HP1_AWLOCK,
        AWCACHE => m_axi_HP1_AWCACHE,
        AWPROT => m_axi_HP1_AWPROT,
        AWQOS => m_axi_HP1_AWQOS,
        AWREGION => m_axi_HP1_AWREGION,
        AWUSER => m_axi_HP1_AWUSER,
        WVALID => m_axi_HP1_WVALID,
        WREADY => m_axi_HP1_WREADY,
        WDATA => m_axi_HP1_WDATA,
        WSTRB => m_axi_HP1_WSTRB,
        WLAST => m_axi_HP1_WLAST,
        WID => m_axi_HP1_WID,
        WUSER => m_axi_HP1_WUSER,
        ARVALID => m_axi_HP1_ARVALID,
        ARREADY => m_axi_HP1_ARREADY,
        ARADDR => m_axi_HP1_ARADDR,
        ARID => m_axi_HP1_ARID,
        ARLEN => m_axi_HP1_ARLEN,
        ARSIZE => m_axi_HP1_ARSIZE,
        ARBURST => m_axi_HP1_ARBURST,
        ARLOCK => m_axi_HP1_ARLOCK,
        ARCACHE => m_axi_HP1_ARCACHE,
        ARPROT => m_axi_HP1_ARPROT,
        ARQOS => m_axi_HP1_ARQOS,
        ARREGION => m_axi_HP1_ARREGION,
        ARUSER => m_axi_HP1_ARUSER,
        RVALID => m_axi_HP1_RVALID,
        RREADY => m_axi_HP1_RREADY,
        RDATA => m_axi_HP1_RDATA,
        RLAST => m_axi_HP1_RLAST,
        RID => m_axi_HP1_RID,
        RUSER => m_axi_HP1_RUSER,
        RRESP => m_axi_HP1_RRESP,
        BVALID => m_axi_HP1_BVALID,
        BREADY => m_axi_HP1_BREADY,
        BRESP => m_axi_HP1_BRESP,
        BID => m_axi_HP1_BID,
        BUSER => m_axi_HP1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_input5_U0_m_axi_HP1_ARVALID,
        I_ARREADY => HP1_ARREADY,
        I_ARADDR => read_input5_U0_m_axi_HP1_ARADDR,
        I_ARID => read_input5_U0_m_axi_HP1_ARID,
        I_ARLEN => read_input5_U0_m_axi_HP1_ARLEN,
        I_ARSIZE => read_input5_U0_m_axi_HP1_ARSIZE,
        I_ARLOCK => read_input5_U0_m_axi_HP1_ARLOCK,
        I_ARCACHE => read_input5_U0_m_axi_HP1_ARCACHE,
        I_ARQOS => read_input5_U0_m_axi_HP1_ARQOS,
        I_ARPROT => read_input5_U0_m_axi_HP1_ARPROT,
        I_ARUSER => read_input5_U0_m_axi_HP1_ARUSER,
        I_ARBURST => read_input5_U0_m_axi_HP1_ARBURST,
        I_ARREGION => read_input5_U0_m_axi_HP1_ARREGION,
        I_RVALID => HP1_RVALID,
        I_RREADY => read_input5_U0_m_axi_HP1_RREADY,
        I_RDATA => HP1_RDATA,
        I_RID => HP1_RID,
        I_RUSER => HP1_RUSER,
        I_RRESP => HP1_RRESP,
        I_RLAST => HP1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => HP1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => HP1_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => HP1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => HP1_BRESP,
        I_BID => HP1_BID,
        I_BUSER => HP1_BUSER);

    HP3_m_axi_U : component hardware_encoding_HP3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_HP3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_HP3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_HP3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_HP3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_HP3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_HP3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_HP3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_HP3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_HP3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_HP3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_HP3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_HP3_AWVALID,
        AWREADY => m_axi_HP3_AWREADY,
        AWADDR => m_axi_HP3_AWADDR,
        AWID => m_axi_HP3_AWID,
        AWLEN => m_axi_HP3_AWLEN,
        AWSIZE => m_axi_HP3_AWSIZE,
        AWBURST => m_axi_HP3_AWBURST,
        AWLOCK => m_axi_HP3_AWLOCK,
        AWCACHE => m_axi_HP3_AWCACHE,
        AWPROT => m_axi_HP3_AWPROT,
        AWQOS => m_axi_HP3_AWQOS,
        AWREGION => m_axi_HP3_AWREGION,
        AWUSER => m_axi_HP3_AWUSER,
        WVALID => m_axi_HP3_WVALID,
        WREADY => m_axi_HP3_WREADY,
        WDATA => m_axi_HP3_WDATA,
        WSTRB => m_axi_HP3_WSTRB,
        WLAST => m_axi_HP3_WLAST,
        WID => m_axi_HP3_WID,
        WUSER => m_axi_HP3_WUSER,
        ARVALID => m_axi_HP3_ARVALID,
        ARREADY => m_axi_HP3_ARREADY,
        ARADDR => m_axi_HP3_ARADDR,
        ARID => m_axi_HP3_ARID,
        ARLEN => m_axi_HP3_ARLEN,
        ARSIZE => m_axi_HP3_ARSIZE,
        ARBURST => m_axi_HP3_ARBURST,
        ARLOCK => m_axi_HP3_ARLOCK,
        ARCACHE => m_axi_HP3_ARCACHE,
        ARPROT => m_axi_HP3_ARPROT,
        ARQOS => m_axi_HP3_ARQOS,
        ARREGION => m_axi_HP3_ARREGION,
        ARUSER => m_axi_HP3_ARUSER,
        RVALID => m_axi_HP3_RVALID,
        RREADY => m_axi_HP3_RREADY,
        RDATA => m_axi_HP3_RDATA,
        RLAST => m_axi_HP3_RLAST,
        RID => m_axi_HP3_RID,
        RUSER => m_axi_HP3_RUSER,
        RRESP => m_axi_HP3_RRESP,
        BVALID => m_axi_HP3_BVALID,
        BREADY => m_axi_HP3_BREADY,
        BRESP => m_axi_HP3_BRESP,
        BID => m_axi_HP3_BID,
        BUSER => m_axi_HP3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => HP3_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => HP3_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => HP3_RDATA,
        I_RID => HP3_RID,
        I_RUSER => HP3_RUSER,
        I_RRESP => HP3_RRESP,
        I_RLAST => HP3_RLAST,
        I_AWVALID => write_output_U0_m_axi_HP3_AWVALID,
        I_AWREADY => HP3_AWREADY,
        I_AWADDR => write_output_U0_m_axi_HP3_AWADDR,
        I_AWID => write_output_U0_m_axi_HP3_AWID,
        I_AWLEN => write_output_U0_m_axi_HP3_AWLEN,
        I_AWSIZE => write_output_U0_m_axi_HP3_AWSIZE,
        I_AWLOCK => write_output_U0_m_axi_HP3_AWLOCK,
        I_AWCACHE => write_output_U0_m_axi_HP3_AWCACHE,
        I_AWQOS => write_output_U0_m_axi_HP3_AWQOS,
        I_AWPROT => write_output_U0_m_axi_HP3_AWPROT,
        I_AWUSER => write_output_U0_m_axi_HP3_AWUSER,
        I_AWBURST => write_output_U0_m_axi_HP3_AWBURST,
        I_AWREGION => write_output_U0_m_axi_HP3_AWREGION,
        I_WVALID => write_output_U0_m_axi_HP3_WVALID,
        I_WREADY => HP3_WREADY,
        I_WDATA => write_output_U0_m_axi_HP3_WDATA,
        I_WID => write_output_U0_m_axi_HP3_WID,
        I_WUSER => write_output_U0_m_axi_HP3_WUSER,
        I_WLAST => write_output_U0_m_axi_HP3_WLAST,
        I_WSTRB => write_output_U0_m_axi_HP3_WSTRB,
        I_BVALID => HP3_BVALID,
        I_BREADY => write_output_U0_m_axi_HP3_BREADY,
        I_BRESP => HP3_BRESP,
        I_BID => HP3_BID,
        I_BUSER => HP3_BUSER);

    read_input5_U0 : component hardware_encoding_read_input5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_input5_U0_ap_start,
        start_full_n => read_input5_U0_start_full_n,
        ap_done => read_input5_U0_ap_done,
        ap_continue => read_input5_U0_ap_continue,
        ap_idle => read_input5_U0_ap_idle,
        ap_ready => read_input5_U0_ap_ready,
        start_out => read_input5_U0_start_out,
        start_write => read_input5_U0_start_write,
        m_axi_HP1_AWVALID => read_input5_U0_m_axi_HP1_AWVALID,
        m_axi_HP1_AWREADY => ap_const_logic_0,
        m_axi_HP1_AWADDR => read_input5_U0_m_axi_HP1_AWADDR,
        m_axi_HP1_AWID => read_input5_U0_m_axi_HP1_AWID,
        m_axi_HP1_AWLEN => read_input5_U0_m_axi_HP1_AWLEN,
        m_axi_HP1_AWSIZE => read_input5_U0_m_axi_HP1_AWSIZE,
        m_axi_HP1_AWBURST => read_input5_U0_m_axi_HP1_AWBURST,
        m_axi_HP1_AWLOCK => read_input5_U0_m_axi_HP1_AWLOCK,
        m_axi_HP1_AWCACHE => read_input5_U0_m_axi_HP1_AWCACHE,
        m_axi_HP1_AWPROT => read_input5_U0_m_axi_HP1_AWPROT,
        m_axi_HP1_AWQOS => read_input5_U0_m_axi_HP1_AWQOS,
        m_axi_HP1_AWREGION => read_input5_U0_m_axi_HP1_AWREGION,
        m_axi_HP1_AWUSER => read_input5_U0_m_axi_HP1_AWUSER,
        m_axi_HP1_WVALID => read_input5_U0_m_axi_HP1_WVALID,
        m_axi_HP1_WREADY => ap_const_logic_0,
        m_axi_HP1_WDATA => read_input5_U0_m_axi_HP1_WDATA,
        m_axi_HP1_WSTRB => read_input5_U0_m_axi_HP1_WSTRB,
        m_axi_HP1_WLAST => read_input5_U0_m_axi_HP1_WLAST,
        m_axi_HP1_WID => read_input5_U0_m_axi_HP1_WID,
        m_axi_HP1_WUSER => read_input5_U0_m_axi_HP1_WUSER,
        m_axi_HP1_ARVALID => read_input5_U0_m_axi_HP1_ARVALID,
        m_axi_HP1_ARREADY => HP1_ARREADY,
        m_axi_HP1_ARADDR => read_input5_U0_m_axi_HP1_ARADDR,
        m_axi_HP1_ARID => read_input5_U0_m_axi_HP1_ARID,
        m_axi_HP1_ARLEN => read_input5_U0_m_axi_HP1_ARLEN,
        m_axi_HP1_ARSIZE => read_input5_U0_m_axi_HP1_ARSIZE,
        m_axi_HP1_ARBURST => read_input5_U0_m_axi_HP1_ARBURST,
        m_axi_HP1_ARLOCK => read_input5_U0_m_axi_HP1_ARLOCK,
        m_axi_HP1_ARCACHE => read_input5_U0_m_axi_HP1_ARCACHE,
        m_axi_HP1_ARPROT => read_input5_U0_m_axi_HP1_ARPROT,
        m_axi_HP1_ARQOS => read_input5_U0_m_axi_HP1_ARQOS,
        m_axi_HP1_ARREGION => read_input5_U0_m_axi_HP1_ARREGION,
        m_axi_HP1_ARUSER => read_input5_U0_m_axi_HP1_ARUSER,
        m_axi_HP1_RVALID => HP1_RVALID,
        m_axi_HP1_RREADY => read_input5_U0_m_axi_HP1_RREADY,
        m_axi_HP1_RDATA => HP1_RDATA,
        m_axi_HP1_RLAST => HP1_RLAST,
        m_axi_HP1_RID => HP1_RID,
        m_axi_HP1_RUSER => HP1_RUSER,
        m_axi_HP1_RRESP => HP1_RRESP,
        m_axi_HP1_BVALID => ap_const_logic_0,
        m_axi_HP1_BREADY => read_input5_U0_m_axi_HP1_BREADY,
        m_axi_HP1_BRESP => ap_const_lv2_0,
        m_axi_HP1_BID => ap_const_lv1_0,
        m_axi_HP1_BUSER => ap_const_lv1_0,
        input_r_din => read_input5_U0_input_r_din,
        input_r_full_n => input_stream_full_n,
        input_r_write => read_input5_U0_input_r_write,
        s1 => s1,
        output_r => output_r,
        output_out_din => read_input5_U0_output_out_din,
        output_out_full_n => output_c_full_n,
        output_out_write => read_input5_U0_output_out_write);

    computing_U0 : component hardware_encoding_computing
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => computing_U0_ap_start,
        ap_done => computing_U0_ap_done,
        ap_continue => computing_U0_ap_continue,
        ap_idle => computing_U0_ap_idle,
        ap_ready => computing_U0_ap_ready,
        input_r_dout => input_stream_dout,
        input_r_empty_n => input_stream_empty_n,
        input_r_read => computing_U0_input_r_read,
        output_r_din => computing_U0_output_r_din,
        output_r_full_n => output_stream_full_n,
        output_r_write => computing_U0_output_r_write);

    write_output_U0 : component hardware_encoding_write_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_output_U0_ap_start,
        ap_done => write_output_U0_ap_done,
        ap_continue => write_output_U0_ap_continue,
        ap_idle => write_output_U0_ap_idle,
        ap_ready => write_output_U0_ap_ready,
        output_stream_dout => output_stream_dout,
        output_stream_empty_n => output_stream_empty_n,
        output_stream_read => write_output_U0_output_stream_read,
        m_axi_HP3_AWVALID => write_output_U0_m_axi_HP3_AWVALID,
        m_axi_HP3_AWREADY => HP3_AWREADY,
        m_axi_HP3_AWADDR => write_output_U0_m_axi_HP3_AWADDR,
        m_axi_HP3_AWID => write_output_U0_m_axi_HP3_AWID,
        m_axi_HP3_AWLEN => write_output_U0_m_axi_HP3_AWLEN,
        m_axi_HP3_AWSIZE => write_output_U0_m_axi_HP3_AWSIZE,
        m_axi_HP3_AWBURST => write_output_U0_m_axi_HP3_AWBURST,
        m_axi_HP3_AWLOCK => write_output_U0_m_axi_HP3_AWLOCK,
        m_axi_HP3_AWCACHE => write_output_U0_m_axi_HP3_AWCACHE,
        m_axi_HP3_AWPROT => write_output_U0_m_axi_HP3_AWPROT,
        m_axi_HP3_AWQOS => write_output_U0_m_axi_HP3_AWQOS,
        m_axi_HP3_AWREGION => write_output_U0_m_axi_HP3_AWREGION,
        m_axi_HP3_AWUSER => write_output_U0_m_axi_HP3_AWUSER,
        m_axi_HP3_WVALID => write_output_U0_m_axi_HP3_WVALID,
        m_axi_HP3_WREADY => HP3_WREADY,
        m_axi_HP3_WDATA => write_output_U0_m_axi_HP3_WDATA,
        m_axi_HP3_WSTRB => write_output_U0_m_axi_HP3_WSTRB,
        m_axi_HP3_WLAST => write_output_U0_m_axi_HP3_WLAST,
        m_axi_HP3_WID => write_output_U0_m_axi_HP3_WID,
        m_axi_HP3_WUSER => write_output_U0_m_axi_HP3_WUSER,
        m_axi_HP3_ARVALID => write_output_U0_m_axi_HP3_ARVALID,
        m_axi_HP3_ARREADY => ap_const_logic_0,
        m_axi_HP3_ARADDR => write_output_U0_m_axi_HP3_ARADDR,
        m_axi_HP3_ARID => write_output_U0_m_axi_HP3_ARID,
        m_axi_HP3_ARLEN => write_output_U0_m_axi_HP3_ARLEN,
        m_axi_HP3_ARSIZE => write_output_U0_m_axi_HP3_ARSIZE,
        m_axi_HP3_ARBURST => write_output_U0_m_axi_HP3_ARBURST,
        m_axi_HP3_ARLOCK => write_output_U0_m_axi_HP3_ARLOCK,
        m_axi_HP3_ARCACHE => write_output_U0_m_axi_HP3_ARCACHE,
        m_axi_HP3_ARPROT => write_output_U0_m_axi_HP3_ARPROT,
        m_axi_HP3_ARQOS => write_output_U0_m_axi_HP3_ARQOS,
        m_axi_HP3_ARREGION => write_output_U0_m_axi_HP3_ARREGION,
        m_axi_HP3_ARUSER => write_output_U0_m_axi_HP3_ARUSER,
        m_axi_HP3_RVALID => ap_const_logic_0,
        m_axi_HP3_RREADY => write_output_U0_m_axi_HP3_RREADY,
        m_axi_HP3_RDATA => ap_const_lv16_0,
        m_axi_HP3_RLAST => ap_const_logic_0,
        m_axi_HP3_RID => ap_const_lv1_0,
        m_axi_HP3_RUSER => ap_const_lv1_0,
        m_axi_HP3_RRESP => ap_const_lv2_0,
        m_axi_HP3_BVALID => HP3_BVALID,
        m_axi_HP3_BREADY => write_output_U0_m_axi_HP3_BREADY,
        m_axi_HP3_BRESP => HP3_BRESP,
        m_axi_HP3_BID => HP3_BID,
        m_axi_HP3_BUSER => HP3_BUSER,
        output_r_dout => output_c_dout,
        output_r_empty_n => output_c_empty_n,
        output_r_read => write_output_U0_output_r_read);

    input_stream_U : component hardware_encoding_fifo_w8_d500_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input5_U0_input_r_din,
        if_full_n => input_stream_full_n,
        if_write => read_input5_U0_input_r_write,
        if_dout => input_stream_dout,
        if_empty_n => input_stream_empty_n,
        if_read => computing_U0_input_r_read);

    output_c_U : component hardware_encoding_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input5_U0_output_out_din,
        if_full_n => output_c_full_n,
        if_write => read_input5_U0_output_out_write,
        if_dout => output_c_dout,
        if_empty_n => output_c_empty_n,
        if_read => write_output_U0_output_r_read);

    output_stream_U : component hardware_encoding_fifo_w16_d500_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => computing_U0_output_r_din,
        if_full_n => output_stream_full_n,
        if_write => computing_U0_output_r_write,
        if_dout => output_stream_dout,
        if_empty_n => output_stream_empty_n,
        if_read => write_output_U0_output_stream_read);

    start_for_computing_U0_U : component hardware_encoding_start_for_computing_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_computing_U0_din,
        if_full_n => start_for_computing_U0_full_n,
        if_write => read_input5_U0_start_write,
        if_dout => start_for_computing_U0_dout,
        if_empty_n => start_for_computing_U0_empty_n,
        if_read => computing_U0_ap_ready);

    start_for_write_output_U0_U : component hardware_encoding_start_for_write_output_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_output_U0_din,
        if_full_n => start_for_write_output_U0_full_n,
        if_write => read_input5_U0_start_write,
        if_dout => start_for_write_output_U0_dout,
        if_empty_n => start_for_write_output_U0_empty_n,
        if_read => write_output_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    ap_done <= write_output_U0_ap_done;
    ap_idle <= (write_output_U0_ap_idle and read_input5_U0_ap_idle and computing_U0_ap_idle);
    ap_ready <= read_input5_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= write_output_U0_ap_done;
    ap_sync_ready <= read_input5_U0_ap_ready;
    computing_U0_ap_continue <= ap_const_logic_1;
    computing_U0_ap_start <= start_for_computing_U0_empty_n;
    computing_U0_start_full_n <= ap_const_logic_1;
    computing_U0_start_write <= ap_const_logic_0;
    read_input5_U0_ap_continue <= ap_const_logic_1;
    read_input5_U0_ap_start <= ap_start;
    read_input5_U0_start_full_n <= (start_for_write_output_U0_full_n and start_for_computing_U0_full_n);
    start_for_computing_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_output_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_output_U0_ap_continue <= ap_continue;
    write_output_U0_ap_start <= start_for_write_output_U0_empty_n;
    write_output_U0_start_full_n <= ap_const_logic_1;
    write_output_U0_start_write <= ap_const_logic_0;
end behav;

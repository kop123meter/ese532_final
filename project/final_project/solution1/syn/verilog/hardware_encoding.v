// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hardware_encoding_hardware_encoding,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=136,HLS_SYN_DSP=0,HLS_SYN_FF=4256,HLS_SYN_LUT=10141,HLS_VERSION=2020_2}" *)

module hardware_encoding (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_HP1_AWVALID,
        m_axi_HP1_AWREADY,
        m_axi_HP1_AWADDR,
        m_axi_HP1_AWID,
        m_axi_HP1_AWLEN,
        m_axi_HP1_AWSIZE,
        m_axi_HP1_AWBURST,
        m_axi_HP1_AWLOCK,
        m_axi_HP1_AWCACHE,
        m_axi_HP1_AWPROT,
        m_axi_HP1_AWQOS,
        m_axi_HP1_AWREGION,
        m_axi_HP1_AWUSER,
        m_axi_HP1_WVALID,
        m_axi_HP1_WREADY,
        m_axi_HP1_WDATA,
        m_axi_HP1_WSTRB,
        m_axi_HP1_WLAST,
        m_axi_HP1_WID,
        m_axi_HP1_WUSER,
        m_axi_HP1_ARVALID,
        m_axi_HP1_ARREADY,
        m_axi_HP1_ARADDR,
        m_axi_HP1_ARID,
        m_axi_HP1_ARLEN,
        m_axi_HP1_ARSIZE,
        m_axi_HP1_ARBURST,
        m_axi_HP1_ARLOCK,
        m_axi_HP1_ARCACHE,
        m_axi_HP1_ARPROT,
        m_axi_HP1_ARQOS,
        m_axi_HP1_ARREGION,
        m_axi_HP1_ARUSER,
        m_axi_HP1_RVALID,
        m_axi_HP1_RREADY,
        m_axi_HP1_RDATA,
        m_axi_HP1_RLAST,
        m_axi_HP1_RID,
        m_axi_HP1_RUSER,
        m_axi_HP1_RRESP,
        m_axi_HP1_BVALID,
        m_axi_HP1_BREADY,
        m_axi_HP1_BRESP,
        m_axi_HP1_BID,
        m_axi_HP1_BUSER,
        m_axi_HP3_AWVALID,
        m_axi_HP3_AWREADY,
        m_axi_HP3_AWADDR,
        m_axi_HP3_AWID,
        m_axi_HP3_AWLEN,
        m_axi_HP3_AWSIZE,
        m_axi_HP3_AWBURST,
        m_axi_HP3_AWLOCK,
        m_axi_HP3_AWCACHE,
        m_axi_HP3_AWPROT,
        m_axi_HP3_AWQOS,
        m_axi_HP3_AWREGION,
        m_axi_HP3_AWUSER,
        m_axi_HP3_WVALID,
        m_axi_HP3_WREADY,
        m_axi_HP3_WDATA,
        m_axi_HP3_WSTRB,
        m_axi_HP3_WLAST,
        m_axi_HP3_WID,
        m_axi_HP3_WUSER,
        m_axi_HP3_ARVALID,
        m_axi_HP3_ARREADY,
        m_axi_HP3_ARADDR,
        m_axi_HP3_ARID,
        m_axi_HP3_ARLEN,
        m_axi_HP3_ARSIZE,
        m_axi_HP3_ARBURST,
        m_axi_HP3_ARLOCK,
        m_axi_HP3_ARCACHE,
        m_axi_HP3_ARPROT,
        m_axi_HP3_ARQOS,
        m_axi_HP3_ARREGION,
        m_axi_HP3_ARUSER,
        m_axi_HP3_RVALID,
        m_axi_HP3_RREADY,
        m_axi_HP3_RDATA,
        m_axi_HP3_RLAST,
        m_axi_HP3_RID,
        m_axi_HP3_RUSER,
        m_axi_HP3_RRESP,
        m_axi_HP3_BVALID,
        m_axi_HP3_BREADY,
        m_axi_HP3_BRESP,
        m_axi_HP3_BID,
        m_axi_HP3_BUSER
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_HP1_ID_WIDTH = 1;
parameter    C_M_AXI_HP1_ADDR_WIDTH = 64;
parameter    C_M_AXI_HP1_DATA_WIDTH = 32;
parameter    C_M_AXI_HP1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_WUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_RUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_BUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_USER_VALUE = 0;
parameter    C_M_AXI_HP1_PROT_VALUE = 0;
parameter    C_M_AXI_HP1_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_ID_WIDTH = 1;
parameter    C_M_AXI_HP3_ADDR_WIDTH = 64;
parameter    C_M_AXI_HP3_DATA_WIDTH = 32;
parameter    C_M_AXI_HP3_AWUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_ARUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_WUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_RUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_BUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_USER_VALUE = 0;
parameter    C_M_AXI_HP3_PROT_VALUE = 0;
parameter    C_M_AXI_HP3_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_HP1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_HP3_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_HP1_AWVALID;
input   m_axi_HP1_AWREADY;
output  [C_M_AXI_HP1_ADDR_WIDTH - 1:0] m_axi_HP1_AWADDR;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_AWID;
output  [7:0] m_axi_HP1_AWLEN;
output  [2:0] m_axi_HP1_AWSIZE;
output  [1:0] m_axi_HP1_AWBURST;
output  [1:0] m_axi_HP1_AWLOCK;
output  [3:0] m_axi_HP1_AWCACHE;
output  [2:0] m_axi_HP1_AWPROT;
output  [3:0] m_axi_HP1_AWQOS;
output  [3:0] m_axi_HP1_AWREGION;
output  [C_M_AXI_HP1_AWUSER_WIDTH - 1:0] m_axi_HP1_AWUSER;
output   m_axi_HP1_WVALID;
input   m_axi_HP1_WREADY;
output  [C_M_AXI_HP1_DATA_WIDTH - 1:0] m_axi_HP1_WDATA;
output  [C_M_AXI_HP1_WSTRB_WIDTH - 1:0] m_axi_HP1_WSTRB;
output   m_axi_HP1_WLAST;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_WID;
output  [C_M_AXI_HP1_WUSER_WIDTH - 1:0] m_axi_HP1_WUSER;
output   m_axi_HP1_ARVALID;
input   m_axi_HP1_ARREADY;
output  [C_M_AXI_HP1_ADDR_WIDTH - 1:0] m_axi_HP1_ARADDR;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_ARID;
output  [7:0] m_axi_HP1_ARLEN;
output  [2:0] m_axi_HP1_ARSIZE;
output  [1:0] m_axi_HP1_ARBURST;
output  [1:0] m_axi_HP1_ARLOCK;
output  [3:0] m_axi_HP1_ARCACHE;
output  [2:0] m_axi_HP1_ARPROT;
output  [3:0] m_axi_HP1_ARQOS;
output  [3:0] m_axi_HP1_ARREGION;
output  [C_M_AXI_HP1_ARUSER_WIDTH - 1:0] m_axi_HP1_ARUSER;
input   m_axi_HP1_RVALID;
output   m_axi_HP1_RREADY;
input  [C_M_AXI_HP1_DATA_WIDTH - 1:0] m_axi_HP1_RDATA;
input   m_axi_HP1_RLAST;
input  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_RID;
input  [C_M_AXI_HP1_RUSER_WIDTH - 1:0] m_axi_HP1_RUSER;
input  [1:0] m_axi_HP1_RRESP;
input   m_axi_HP1_BVALID;
output   m_axi_HP1_BREADY;
input  [1:0] m_axi_HP1_BRESP;
input  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_BID;
input  [C_M_AXI_HP1_BUSER_WIDTH - 1:0] m_axi_HP1_BUSER;
output   m_axi_HP3_AWVALID;
input   m_axi_HP3_AWREADY;
output  [C_M_AXI_HP3_ADDR_WIDTH - 1:0] m_axi_HP3_AWADDR;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_AWID;
output  [7:0] m_axi_HP3_AWLEN;
output  [2:0] m_axi_HP3_AWSIZE;
output  [1:0] m_axi_HP3_AWBURST;
output  [1:0] m_axi_HP3_AWLOCK;
output  [3:0] m_axi_HP3_AWCACHE;
output  [2:0] m_axi_HP3_AWPROT;
output  [3:0] m_axi_HP3_AWQOS;
output  [3:0] m_axi_HP3_AWREGION;
output  [C_M_AXI_HP3_AWUSER_WIDTH - 1:0] m_axi_HP3_AWUSER;
output   m_axi_HP3_WVALID;
input   m_axi_HP3_WREADY;
output  [C_M_AXI_HP3_DATA_WIDTH - 1:0] m_axi_HP3_WDATA;
output  [C_M_AXI_HP3_WSTRB_WIDTH - 1:0] m_axi_HP3_WSTRB;
output   m_axi_HP3_WLAST;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_WID;
output  [C_M_AXI_HP3_WUSER_WIDTH - 1:0] m_axi_HP3_WUSER;
output   m_axi_HP3_ARVALID;
input   m_axi_HP3_ARREADY;
output  [C_M_AXI_HP3_ADDR_WIDTH - 1:0] m_axi_HP3_ARADDR;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_ARID;
output  [7:0] m_axi_HP3_ARLEN;
output  [2:0] m_axi_HP3_ARSIZE;
output  [1:0] m_axi_HP3_ARBURST;
output  [1:0] m_axi_HP3_ARLOCK;
output  [3:0] m_axi_HP3_ARCACHE;
output  [2:0] m_axi_HP3_ARPROT;
output  [3:0] m_axi_HP3_ARQOS;
output  [3:0] m_axi_HP3_ARREGION;
output  [C_M_AXI_HP3_ARUSER_WIDTH - 1:0] m_axi_HP3_ARUSER;
input   m_axi_HP3_RVALID;
output   m_axi_HP3_RREADY;
input  [C_M_AXI_HP3_DATA_WIDTH - 1:0] m_axi_HP3_RDATA;
input   m_axi_HP3_RLAST;
input  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_RID;
input  [C_M_AXI_HP3_RUSER_WIDTH - 1:0] m_axi_HP3_RUSER;
input  [1:0] m_axi_HP3_RRESP;
input   m_axi_HP3_BVALID;
output   m_axi_HP3_BREADY;
input  [1:0] m_axi_HP3_BRESP;
input  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_BID;
input  [C_M_AXI_HP3_BUSER_WIDTH - 1:0] m_axi_HP3_BUSER;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire   [63:0] s1;
wire   [63:0] output_r;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_continue;
wire    ap_idle;
wire    HP1_AWREADY;
wire    HP1_WREADY;
wire    HP1_ARREADY;
wire    HP1_RVALID;
wire   [15:0] HP1_RDATA;
wire    HP1_RLAST;
wire   [0:0] HP1_RID;
wire   [0:0] HP1_RUSER;
wire   [1:0] HP1_RRESP;
wire    HP1_BVALID;
wire   [1:0] HP1_BRESP;
wire   [0:0] HP1_BID;
wire   [0:0] HP1_BUSER;
wire    HP3_AWREADY;
wire    HP3_WREADY;
wire    HP3_ARREADY;
wire    HP3_RVALID;
wire   [15:0] HP3_RDATA;
wire    HP3_RLAST;
wire   [0:0] HP3_RID;
wire   [0:0] HP3_RUSER;
wire   [1:0] HP3_RRESP;
wire    HP3_BVALID;
wire   [1:0] HP3_BRESP;
wire   [0:0] HP3_BID;
wire   [0:0] HP3_BUSER;
wire    read_input5_U0_ap_start;
wire    read_input5_U0_start_full_n;
wire    read_input5_U0_ap_done;
wire    read_input5_U0_ap_continue;
wire    read_input5_U0_ap_idle;
wire    read_input5_U0_ap_ready;
wire    read_input5_U0_start_out;
wire    read_input5_U0_start_write;
wire    read_input5_U0_m_axi_HP1_AWVALID;
wire   [63:0] read_input5_U0_m_axi_HP1_AWADDR;
wire   [0:0] read_input5_U0_m_axi_HP1_AWID;
wire   [31:0] read_input5_U0_m_axi_HP1_AWLEN;
wire   [2:0] read_input5_U0_m_axi_HP1_AWSIZE;
wire   [1:0] read_input5_U0_m_axi_HP1_AWBURST;
wire   [1:0] read_input5_U0_m_axi_HP1_AWLOCK;
wire   [3:0] read_input5_U0_m_axi_HP1_AWCACHE;
wire   [2:0] read_input5_U0_m_axi_HP1_AWPROT;
wire   [3:0] read_input5_U0_m_axi_HP1_AWQOS;
wire   [3:0] read_input5_U0_m_axi_HP1_AWREGION;
wire   [0:0] read_input5_U0_m_axi_HP1_AWUSER;
wire    read_input5_U0_m_axi_HP1_WVALID;
wire   [15:0] read_input5_U0_m_axi_HP1_WDATA;
wire   [1:0] read_input5_U0_m_axi_HP1_WSTRB;
wire    read_input5_U0_m_axi_HP1_WLAST;
wire   [0:0] read_input5_U0_m_axi_HP1_WID;
wire   [0:0] read_input5_U0_m_axi_HP1_WUSER;
wire    read_input5_U0_m_axi_HP1_ARVALID;
wire   [63:0] read_input5_U0_m_axi_HP1_ARADDR;
wire   [0:0] read_input5_U0_m_axi_HP1_ARID;
wire   [31:0] read_input5_U0_m_axi_HP1_ARLEN;
wire   [2:0] read_input5_U0_m_axi_HP1_ARSIZE;
wire   [1:0] read_input5_U0_m_axi_HP1_ARBURST;
wire   [1:0] read_input5_U0_m_axi_HP1_ARLOCK;
wire   [3:0] read_input5_U0_m_axi_HP1_ARCACHE;
wire   [2:0] read_input5_U0_m_axi_HP1_ARPROT;
wire   [3:0] read_input5_U0_m_axi_HP1_ARQOS;
wire   [3:0] read_input5_U0_m_axi_HP1_ARREGION;
wire   [0:0] read_input5_U0_m_axi_HP1_ARUSER;
wire    read_input5_U0_m_axi_HP1_RREADY;
wire    read_input5_U0_m_axi_HP1_BREADY;
wire   [7:0] read_input5_U0_input_r_din;
wire    read_input5_U0_input_r_write;
wire   [63:0] read_input5_U0_output_out_din;
wire    read_input5_U0_output_out_write;
wire    computing_U0_ap_start;
wire    computing_U0_ap_done;
wire    computing_U0_ap_continue;
wire    computing_U0_ap_idle;
wire    computing_U0_ap_ready;
wire    computing_U0_input_r_read;
wire   [15:0] computing_U0_output_r_din;
wire    computing_U0_output_r_write;
wire    write_output_U0_ap_start;
wire    write_output_U0_ap_done;
wire    write_output_U0_ap_continue;
wire    write_output_U0_ap_idle;
wire    write_output_U0_ap_ready;
wire    write_output_U0_output_stream_read;
wire    write_output_U0_m_axi_HP3_AWVALID;
wire   [63:0] write_output_U0_m_axi_HP3_AWADDR;
wire   [0:0] write_output_U0_m_axi_HP3_AWID;
wire   [31:0] write_output_U0_m_axi_HP3_AWLEN;
wire   [2:0] write_output_U0_m_axi_HP3_AWSIZE;
wire   [1:0] write_output_U0_m_axi_HP3_AWBURST;
wire   [1:0] write_output_U0_m_axi_HP3_AWLOCK;
wire   [3:0] write_output_U0_m_axi_HP3_AWCACHE;
wire   [2:0] write_output_U0_m_axi_HP3_AWPROT;
wire   [3:0] write_output_U0_m_axi_HP3_AWQOS;
wire   [3:0] write_output_U0_m_axi_HP3_AWREGION;
wire   [0:0] write_output_U0_m_axi_HP3_AWUSER;
wire    write_output_U0_m_axi_HP3_WVALID;
wire   [15:0] write_output_U0_m_axi_HP3_WDATA;
wire   [1:0] write_output_U0_m_axi_HP3_WSTRB;
wire    write_output_U0_m_axi_HP3_WLAST;
wire   [0:0] write_output_U0_m_axi_HP3_WID;
wire   [0:0] write_output_U0_m_axi_HP3_WUSER;
wire    write_output_U0_m_axi_HP3_ARVALID;
wire   [63:0] write_output_U0_m_axi_HP3_ARADDR;
wire   [0:0] write_output_U0_m_axi_HP3_ARID;
wire   [31:0] write_output_U0_m_axi_HP3_ARLEN;
wire   [2:0] write_output_U0_m_axi_HP3_ARSIZE;
wire   [1:0] write_output_U0_m_axi_HP3_ARBURST;
wire   [1:0] write_output_U0_m_axi_HP3_ARLOCK;
wire   [3:0] write_output_U0_m_axi_HP3_ARCACHE;
wire   [2:0] write_output_U0_m_axi_HP3_ARPROT;
wire   [3:0] write_output_U0_m_axi_HP3_ARQOS;
wire   [3:0] write_output_U0_m_axi_HP3_ARREGION;
wire   [0:0] write_output_U0_m_axi_HP3_ARUSER;
wire    write_output_U0_m_axi_HP3_RREADY;
wire    write_output_U0_m_axi_HP3_BREADY;
wire    write_output_U0_output_r_read;
wire    ap_sync_continue;
wire    input_stream_full_n;
wire   [7:0] input_stream_dout;
wire    input_stream_empty_n;
wire    output_c_full_n;
wire   [63:0] output_c_dout;
wire    output_c_empty_n;
wire    output_stream_full_n;
wire   [15:0] output_stream_dout;
wire    output_stream_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_computing_U0_din;
wire    start_for_computing_U0_full_n;
wire   [0:0] start_for_computing_U0_dout;
wire    start_for_computing_U0_empty_n;
wire   [0:0] start_for_write_output_U0_din;
wire    start_for_write_output_U0_full_n;
wire   [0:0] start_for_write_output_U0_dout;
wire    start_for_write_output_U0_empty_n;
wire    computing_U0_start_full_n;
wire    computing_U0_start_write;
wire    write_output_U0_start_full_n;
wire    write_output_U0_start_write;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
end

hardware_encoding_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .s1(s1),
    .output_r(output_r),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

hardware_encoding_HP1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_HP1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_HP1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_HP1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_HP1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_HP1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_HP1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_HP1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_HP1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_HP1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_HP1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_HP1_CACHE_VALUE ))
HP1_m_axi_U(
    .AWVALID(m_axi_HP1_AWVALID),
    .AWREADY(m_axi_HP1_AWREADY),
    .AWADDR(m_axi_HP1_AWADDR),
    .AWID(m_axi_HP1_AWID),
    .AWLEN(m_axi_HP1_AWLEN),
    .AWSIZE(m_axi_HP1_AWSIZE),
    .AWBURST(m_axi_HP1_AWBURST),
    .AWLOCK(m_axi_HP1_AWLOCK),
    .AWCACHE(m_axi_HP1_AWCACHE),
    .AWPROT(m_axi_HP1_AWPROT),
    .AWQOS(m_axi_HP1_AWQOS),
    .AWREGION(m_axi_HP1_AWREGION),
    .AWUSER(m_axi_HP1_AWUSER),
    .WVALID(m_axi_HP1_WVALID),
    .WREADY(m_axi_HP1_WREADY),
    .WDATA(m_axi_HP1_WDATA),
    .WSTRB(m_axi_HP1_WSTRB),
    .WLAST(m_axi_HP1_WLAST),
    .WID(m_axi_HP1_WID),
    .WUSER(m_axi_HP1_WUSER),
    .ARVALID(m_axi_HP1_ARVALID),
    .ARREADY(m_axi_HP1_ARREADY),
    .ARADDR(m_axi_HP1_ARADDR),
    .ARID(m_axi_HP1_ARID),
    .ARLEN(m_axi_HP1_ARLEN),
    .ARSIZE(m_axi_HP1_ARSIZE),
    .ARBURST(m_axi_HP1_ARBURST),
    .ARLOCK(m_axi_HP1_ARLOCK),
    .ARCACHE(m_axi_HP1_ARCACHE),
    .ARPROT(m_axi_HP1_ARPROT),
    .ARQOS(m_axi_HP1_ARQOS),
    .ARREGION(m_axi_HP1_ARREGION),
    .ARUSER(m_axi_HP1_ARUSER),
    .RVALID(m_axi_HP1_RVALID),
    .RREADY(m_axi_HP1_RREADY),
    .RDATA(m_axi_HP1_RDATA),
    .RLAST(m_axi_HP1_RLAST),
    .RID(m_axi_HP1_RID),
    .RUSER(m_axi_HP1_RUSER),
    .RRESP(m_axi_HP1_RRESP),
    .BVALID(m_axi_HP1_BVALID),
    .BREADY(m_axi_HP1_BREADY),
    .BRESP(m_axi_HP1_BRESP),
    .BID(m_axi_HP1_BID),
    .BUSER(m_axi_HP1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(read_input5_U0_m_axi_HP1_ARVALID),
    .I_ARREADY(HP1_ARREADY),
    .I_ARADDR(read_input5_U0_m_axi_HP1_ARADDR),
    .I_ARID(read_input5_U0_m_axi_HP1_ARID),
    .I_ARLEN(read_input5_U0_m_axi_HP1_ARLEN),
    .I_ARSIZE(read_input5_U0_m_axi_HP1_ARSIZE),
    .I_ARLOCK(read_input5_U0_m_axi_HP1_ARLOCK),
    .I_ARCACHE(read_input5_U0_m_axi_HP1_ARCACHE),
    .I_ARQOS(read_input5_U0_m_axi_HP1_ARQOS),
    .I_ARPROT(read_input5_U0_m_axi_HP1_ARPROT),
    .I_ARUSER(read_input5_U0_m_axi_HP1_ARUSER),
    .I_ARBURST(read_input5_U0_m_axi_HP1_ARBURST),
    .I_ARREGION(read_input5_U0_m_axi_HP1_ARREGION),
    .I_RVALID(HP1_RVALID),
    .I_RREADY(read_input5_U0_m_axi_HP1_RREADY),
    .I_RDATA(HP1_RDATA),
    .I_RID(HP1_RID),
    .I_RUSER(HP1_RUSER),
    .I_RRESP(HP1_RRESP),
    .I_RLAST(HP1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(HP1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(HP1_WREADY),
    .I_WDATA(16'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd0),
    .I_BVALID(HP1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(HP1_BRESP),
    .I_BID(HP1_BID),
    .I_BUSER(HP1_BUSER)
);

hardware_encoding_HP3_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_HP3_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_HP3_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_HP3_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_HP3_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_HP3_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_HP3_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_HP3_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_HP3_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_HP3_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_HP3_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_HP3_CACHE_VALUE ))
HP3_m_axi_U(
    .AWVALID(m_axi_HP3_AWVALID),
    .AWREADY(m_axi_HP3_AWREADY),
    .AWADDR(m_axi_HP3_AWADDR),
    .AWID(m_axi_HP3_AWID),
    .AWLEN(m_axi_HP3_AWLEN),
    .AWSIZE(m_axi_HP3_AWSIZE),
    .AWBURST(m_axi_HP3_AWBURST),
    .AWLOCK(m_axi_HP3_AWLOCK),
    .AWCACHE(m_axi_HP3_AWCACHE),
    .AWPROT(m_axi_HP3_AWPROT),
    .AWQOS(m_axi_HP3_AWQOS),
    .AWREGION(m_axi_HP3_AWREGION),
    .AWUSER(m_axi_HP3_AWUSER),
    .WVALID(m_axi_HP3_WVALID),
    .WREADY(m_axi_HP3_WREADY),
    .WDATA(m_axi_HP3_WDATA),
    .WSTRB(m_axi_HP3_WSTRB),
    .WLAST(m_axi_HP3_WLAST),
    .WID(m_axi_HP3_WID),
    .WUSER(m_axi_HP3_WUSER),
    .ARVALID(m_axi_HP3_ARVALID),
    .ARREADY(m_axi_HP3_ARREADY),
    .ARADDR(m_axi_HP3_ARADDR),
    .ARID(m_axi_HP3_ARID),
    .ARLEN(m_axi_HP3_ARLEN),
    .ARSIZE(m_axi_HP3_ARSIZE),
    .ARBURST(m_axi_HP3_ARBURST),
    .ARLOCK(m_axi_HP3_ARLOCK),
    .ARCACHE(m_axi_HP3_ARCACHE),
    .ARPROT(m_axi_HP3_ARPROT),
    .ARQOS(m_axi_HP3_ARQOS),
    .ARREGION(m_axi_HP3_ARREGION),
    .ARUSER(m_axi_HP3_ARUSER),
    .RVALID(m_axi_HP3_RVALID),
    .RREADY(m_axi_HP3_RREADY),
    .RDATA(m_axi_HP3_RDATA),
    .RLAST(m_axi_HP3_RLAST),
    .RID(m_axi_HP3_RID),
    .RUSER(m_axi_HP3_RUSER),
    .RRESP(m_axi_HP3_RRESP),
    .BVALID(m_axi_HP3_BVALID),
    .BREADY(m_axi_HP3_BREADY),
    .BRESP(m_axi_HP3_BRESP),
    .BID(m_axi_HP3_BID),
    .BUSER(m_axi_HP3_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(HP3_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(HP3_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(HP3_RDATA),
    .I_RID(HP3_RID),
    .I_RUSER(HP3_RUSER),
    .I_RRESP(HP3_RRESP),
    .I_RLAST(HP3_RLAST),
    .I_AWVALID(write_output_U0_m_axi_HP3_AWVALID),
    .I_AWREADY(HP3_AWREADY),
    .I_AWADDR(write_output_U0_m_axi_HP3_AWADDR),
    .I_AWID(write_output_U0_m_axi_HP3_AWID),
    .I_AWLEN(write_output_U0_m_axi_HP3_AWLEN),
    .I_AWSIZE(write_output_U0_m_axi_HP3_AWSIZE),
    .I_AWLOCK(write_output_U0_m_axi_HP3_AWLOCK),
    .I_AWCACHE(write_output_U0_m_axi_HP3_AWCACHE),
    .I_AWQOS(write_output_U0_m_axi_HP3_AWQOS),
    .I_AWPROT(write_output_U0_m_axi_HP3_AWPROT),
    .I_AWUSER(write_output_U0_m_axi_HP3_AWUSER),
    .I_AWBURST(write_output_U0_m_axi_HP3_AWBURST),
    .I_AWREGION(write_output_U0_m_axi_HP3_AWREGION),
    .I_WVALID(write_output_U0_m_axi_HP3_WVALID),
    .I_WREADY(HP3_WREADY),
    .I_WDATA(write_output_U0_m_axi_HP3_WDATA),
    .I_WID(write_output_U0_m_axi_HP3_WID),
    .I_WUSER(write_output_U0_m_axi_HP3_WUSER),
    .I_WLAST(write_output_U0_m_axi_HP3_WLAST),
    .I_WSTRB(write_output_U0_m_axi_HP3_WSTRB),
    .I_BVALID(HP3_BVALID),
    .I_BREADY(write_output_U0_m_axi_HP3_BREADY),
    .I_BRESP(HP3_BRESP),
    .I_BID(HP3_BID),
    .I_BUSER(HP3_BUSER)
);

hardware_encoding_read_input5 read_input5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(read_input5_U0_ap_start),
    .start_full_n(read_input5_U0_start_full_n),
    .ap_done(read_input5_U0_ap_done),
    .ap_continue(read_input5_U0_ap_continue),
    .ap_idle(read_input5_U0_ap_idle),
    .ap_ready(read_input5_U0_ap_ready),
    .start_out(read_input5_U0_start_out),
    .start_write(read_input5_U0_start_write),
    .m_axi_HP1_AWVALID(read_input5_U0_m_axi_HP1_AWVALID),
    .m_axi_HP1_AWREADY(1'b0),
    .m_axi_HP1_AWADDR(read_input5_U0_m_axi_HP1_AWADDR),
    .m_axi_HP1_AWID(read_input5_U0_m_axi_HP1_AWID),
    .m_axi_HP1_AWLEN(read_input5_U0_m_axi_HP1_AWLEN),
    .m_axi_HP1_AWSIZE(read_input5_U0_m_axi_HP1_AWSIZE),
    .m_axi_HP1_AWBURST(read_input5_U0_m_axi_HP1_AWBURST),
    .m_axi_HP1_AWLOCK(read_input5_U0_m_axi_HP1_AWLOCK),
    .m_axi_HP1_AWCACHE(read_input5_U0_m_axi_HP1_AWCACHE),
    .m_axi_HP1_AWPROT(read_input5_U0_m_axi_HP1_AWPROT),
    .m_axi_HP1_AWQOS(read_input5_U0_m_axi_HP1_AWQOS),
    .m_axi_HP1_AWREGION(read_input5_U0_m_axi_HP1_AWREGION),
    .m_axi_HP1_AWUSER(read_input5_U0_m_axi_HP1_AWUSER),
    .m_axi_HP1_WVALID(read_input5_U0_m_axi_HP1_WVALID),
    .m_axi_HP1_WREADY(1'b0),
    .m_axi_HP1_WDATA(read_input5_U0_m_axi_HP1_WDATA),
    .m_axi_HP1_WSTRB(read_input5_U0_m_axi_HP1_WSTRB),
    .m_axi_HP1_WLAST(read_input5_U0_m_axi_HP1_WLAST),
    .m_axi_HP1_WID(read_input5_U0_m_axi_HP1_WID),
    .m_axi_HP1_WUSER(read_input5_U0_m_axi_HP1_WUSER),
    .m_axi_HP1_ARVALID(read_input5_U0_m_axi_HP1_ARVALID),
    .m_axi_HP1_ARREADY(HP1_ARREADY),
    .m_axi_HP1_ARADDR(read_input5_U0_m_axi_HP1_ARADDR),
    .m_axi_HP1_ARID(read_input5_U0_m_axi_HP1_ARID),
    .m_axi_HP1_ARLEN(read_input5_U0_m_axi_HP1_ARLEN),
    .m_axi_HP1_ARSIZE(read_input5_U0_m_axi_HP1_ARSIZE),
    .m_axi_HP1_ARBURST(read_input5_U0_m_axi_HP1_ARBURST),
    .m_axi_HP1_ARLOCK(read_input5_U0_m_axi_HP1_ARLOCK),
    .m_axi_HP1_ARCACHE(read_input5_U0_m_axi_HP1_ARCACHE),
    .m_axi_HP1_ARPROT(read_input5_U0_m_axi_HP1_ARPROT),
    .m_axi_HP1_ARQOS(read_input5_U0_m_axi_HP1_ARQOS),
    .m_axi_HP1_ARREGION(read_input5_U0_m_axi_HP1_ARREGION),
    .m_axi_HP1_ARUSER(read_input5_U0_m_axi_HP1_ARUSER),
    .m_axi_HP1_RVALID(HP1_RVALID),
    .m_axi_HP1_RREADY(read_input5_U0_m_axi_HP1_RREADY),
    .m_axi_HP1_RDATA(HP1_RDATA),
    .m_axi_HP1_RLAST(HP1_RLAST),
    .m_axi_HP1_RID(HP1_RID),
    .m_axi_HP1_RUSER(HP1_RUSER),
    .m_axi_HP1_RRESP(HP1_RRESP),
    .m_axi_HP1_BVALID(1'b0),
    .m_axi_HP1_BREADY(read_input5_U0_m_axi_HP1_BREADY),
    .m_axi_HP1_BRESP(2'd0),
    .m_axi_HP1_BID(1'd0),
    .m_axi_HP1_BUSER(1'd0),
    .input_r_din(read_input5_U0_input_r_din),
    .input_r_full_n(input_stream_full_n),
    .input_r_write(read_input5_U0_input_r_write),
    .s1(s1),
    .output_r(output_r),
    .output_out_din(read_input5_U0_output_out_din),
    .output_out_full_n(output_c_full_n),
    .output_out_write(read_input5_U0_output_out_write)
);

hardware_encoding_computing computing_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(computing_U0_ap_start),
    .ap_done(computing_U0_ap_done),
    .ap_continue(computing_U0_ap_continue),
    .ap_idle(computing_U0_ap_idle),
    .ap_ready(computing_U0_ap_ready),
    .input_r_dout(input_stream_dout),
    .input_r_empty_n(input_stream_empty_n),
    .input_r_read(computing_U0_input_r_read),
    .output_r_din(computing_U0_output_r_din),
    .output_r_full_n(output_stream_full_n),
    .output_r_write(computing_U0_output_r_write)
);

hardware_encoding_write_output write_output_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(write_output_U0_ap_start),
    .ap_done(write_output_U0_ap_done),
    .ap_continue(write_output_U0_ap_continue),
    .ap_idle(write_output_U0_ap_idle),
    .ap_ready(write_output_U0_ap_ready),
    .output_stream_dout(output_stream_dout),
    .output_stream_empty_n(output_stream_empty_n),
    .output_stream_read(write_output_U0_output_stream_read),
    .m_axi_HP3_AWVALID(write_output_U0_m_axi_HP3_AWVALID),
    .m_axi_HP3_AWREADY(HP3_AWREADY),
    .m_axi_HP3_AWADDR(write_output_U0_m_axi_HP3_AWADDR),
    .m_axi_HP3_AWID(write_output_U0_m_axi_HP3_AWID),
    .m_axi_HP3_AWLEN(write_output_U0_m_axi_HP3_AWLEN),
    .m_axi_HP3_AWSIZE(write_output_U0_m_axi_HP3_AWSIZE),
    .m_axi_HP3_AWBURST(write_output_U0_m_axi_HP3_AWBURST),
    .m_axi_HP3_AWLOCK(write_output_U0_m_axi_HP3_AWLOCK),
    .m_axi_HP3_AWCACHE(write_output_U0_m_axi_HP3_AWCACHE),
    .m_axi_HP3_AWPROT(write_output_U0_m_axi_HP3_AWPROT),
    .m_axi_HP3_AWQOS(write_output_U0_m_axi_HP3_AWQOS),
    .m_axi_HP3_AWREGION(write_output_U0_m_axi_HP3_AWREGION),
    .m_axi_HP3_AWUSER(write_output_U0_m_axi_HP3_AWUSER),
    .m_axi_HP3_WVALID(write_output_U0_m_axi_HP3_WVALID),
    .m_axi_HP3_WREADY(HP3_WREADY),
    .m_axi_HP3_WDATA(write_output_U0_m_axi_HP3_WDATA),
    .m_axi_HP3_WSTRB(write_output_U0_m_axi_HP3_WSTRB),
    .m_axi_HP3_WLAST(write_output_U0_m_axi_HP3_WLAST),
    .m_axi_HP3_WID(write_output_U0_m_axi_HP3_WID),
    .m_axi_HP3_WUSER(write_output_U0_m_axi_HP3_WUSER),
    .m_axi_HP3_ARVALID(write_output_U0_m_axi_HP3_ARVALID),
    .m_axi_HP3_ARREADY(1'b0),
    .m_axi_HP3_ARADDR(write_output_U0_m_axi_HP3_ARADDR),
    .m_axi_HP3_ARID(write_output_U0_m_axi_HP3_ARID),
    .m_axi_HP3_ARLEN(write_output_U0_m_axi_HP3_ARLEN),
    .m_axi_HP3_ARSIZE(write_output_U0_m_axi_HP3_ARSIZE),
    .m_axi_HP3_ARBURST(write_output_U0_m_axi_HP3_ARBURST),
    .m_axi_HP3_ARLOCK(write_output_U0_m_axi_HP3_ARLOCK),
    .m_axi_HP3_ARCACHE(write_output_U0_m_axi_HP3_ARCACHE),
    .m_axi_HP3_ARPROT(write_output_U0_m_axi_HP3_ARPROT),
    .m_axi_HP3_ARQOS(write_output_U0_m_axi_HP3_ARQOS),
    .m_axi_HP3_ARREGION(write_output_U0_m_axi_HP3_ARREGION),
    .m_axi_HP3_ARUSER(write_output_U0_m_axi_HP3_ARUSER),
    .m_axi_HP3_RVALID(1'b0),
    .m_axi_HP3_RREADY(write_output_U0_m_axi_HP3_RREADY),
    .m_axi_HP3_RDATA(16'd0),
    .m_axi_HP3_RLAST(1'b0),
    .m_axi_HP3_RID(1'd0),
    .m_axi_HP3_RUSER(1'd0),
    .m_axi_HP3_RRESP(2'd0),
    .m_axi_HP3_BVALID(HP3_BVALID),
    .m_axi_HP3_BREADY(write_output_U0_m_axi_HP3_BREADY),
    .m_axi_HP3_BRESP(HP3_BRESP),
    .m_axi_HP3_BID(HP3_BID),
    .m_axi_HP3_BUSER(HP3_BUSER),
    .output_r_dout(output_c_dout),
    .output_r_empty_n(output_c_empty_n),
    .output_r_read(write_output_U0_output_r_read)
);

hardware_encoding_fifo_w8_d500_A input_stream_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_input5_U0_input_r_din),
    .if_full_n(input_stream_full_n),
    .if_write(read_input5_U0_input_r_write),
    .if_dout(input_stream_dout),
    .if_empty_n(input_stream_empty_n),
    .if_read(computing_U0_input_r_read)
);

hardware_encoding_fifo_w64_d3_S output_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_input5_U0_output_out_din),
    .if_full_n(output_c_full_n),
    .if_write(read_input5_U0_output_out_write),
    .if_dout(output_c_dout),
    .if_empty_n(output_c_empty_n),
    .if_read(write_output_U0_output_r_read)
);

hardware_encoding_fifo_w16_d500_A output_stream_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(computing_U0_output_r_din),
    .if_full_n(output_stream_full_n),
    .if_write(computing_U0_output_r_write),
    .if_dout(output_stream_dout),
    .if_empty_n(output_stream_empty_n),
    .if_read(write_output_U0_output_stream_read)
);

hardware_encoding_start_for_computing_U0 start_for_computing_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_computing_U0_din),
    .if_full_n(start_for_computing_U0_full_n),
    .if_write(read_input5_U0_start_write),
    .if_dout(start_for_computing_U0_dout),
    .if_empty_n(start_for_computing_U0_empty_n),
    .if_read(computing_U0_ap_ready)
);

hardware_encoding_start_for_write_output_U0 start_for_write_output_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_write_output_U0_din),
    .if_full_n(start_for_write_output_U0_full_n),
    .if_write(read_input5_U0_start_write),
    .if_dout(start_for_write_output_U0_dout),
    .if_empty_n(start_for_write_output_U0_empty_n),
    .if_read(write_output_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

assign ap_done = write_output_U0_ap_done;

assign ap_idle = (write_output_U0_ap_idle & read_input5_U0_ap_idle & computing_U0_ap_idle);

assign ap_ready = read_input5_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = write_output_U0_ap_done;

assign ap_sync_ready = read_input5_U0_ap_ready;

assign computing_U0_ap_continue = 1'b1;

assign computing_U0_ap_start = start_for_computing_U0_empty_n;

assign computing_U0_start_full_n = 1'b1;

assign computing_U0_start_write = 1'b0;

assign read_input5_U0_ap_continue = 1'b1;

assign read_input5_U0_ap_start = ap_start;

assign read_input5_U0_start_full_n = (start_for_write_output_U0_full_n & start_for_computing_U0_full_n);

assign start_for_computing_U0_din = 1'b1;

assign start_for_write_output_U0_din = 1'b1;

assign write_output_U0_ap_continue = ap_continue;

assign write_output_U0_ap_start = start_for_write_output_U0_empty_n;

assign write_output_U0_start_full_n = 1'b1;

assign write_output_U0_start_write = 1'b0;

endmodule //hardware_encoding

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hardware_encoding_hardware_encoding,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=134,HLS_SYN_DSP=0,HLS_SYN_FF=2958,HLS_SYN_LUT=7261,HLS_VERSION=2020_2}" *)

module hardware_encoding (
        ap_clk,
        ap_rst_n,
        m_axi_HP1_AWVALID,
        m_axi_HP1_AWREADY,
        m_axi_HP1_AWADDR,
        m_axi_HP1_AWID,
        m_axi_HP1_AWLEN,
        m_axi_HP1_AWSIZE,
        m_axi_HP1_AWBURST,
        m_axi_HP1_AWLOCK,
        m_axi_HP1_AWCACHE,
        m_axi_HP1_AWPROT,
        m_axi_HP1_AWQOS,
        m_axi_HP1_AWREGION,
        m_axi_HP1_AWUSER,
        m_axi_HP1_WVALID,
        m_axi_HP1_WREADY,
        m_axi_HP1_WDATA,
        m_axi_HP1_WSTRB,
        m_axi_HP1_WLAST,
        m_axi_HP1_WID,
        m_axi_HP1_WUSER,
        m_axi_HP1_ARVALID,
        m_axi_HP1_ARREADY,
        m_axi_HP1_ARADDR,
        m_axi_HP1_ARID,
        m_axi_HP1_ARLEN,
        m_axi_HP1_ARSIZE,
        m_axi_HP1_ARBURST,
        m_axi_HP1_ARLOCK,
        m_axi_HP1_ARCACHE,
        m_axi_HP1_ARPROT,
        m_axi_HP1_ARQOS,
        m_axi_HP1_ARREGION,
        m_axi_HP1_ARUSER,
        m_axi_HP1_RVALID,
        m_axi_HP1_RREADY,
        m_axi_HP1_RDATA,
        m_axi_HP1_RLAST,
        m_axi_HP1_RID,
        m_axi_HP1_RUSER,
        m_axi_HP1_RRESP,
        m_axi_HP1_BVALID,
        m_axi_HP1_BREADY,
        m_axi_HP1_BRESP,
        m_axi_HP1_BID,
        m_axi_HP1_BUSER,
        m_axi_HP3_AWVALID,
        m_axi_HP3_AWREADY,
        m_axi_HP3_AWADDR,
        m_axi_HP3_AWID,
        m_axi_HP3_AWLEN,
        m_axi_HP3_AWSIZE,
        m_axi_HP3_AWBURST,
        m_axi_HP3_AWLOCK,
        m_axi_HP3_AWCACHE,
        m_axi_HP3_AWPROT,
        m_axi_HP3_AWQOS,
        m_axi_HP3_AWREGION,
        m_axi_HP3_AWUSER,
        m_axi_HP3_WVALID,
        m_axi_HP3_WREADY,
        m_axi_HP3_WDATA,
        m_axi_HP3_WSTRB,
        m_axi_HP3_WLAST,
        m_axi_HP3_WID,
        m_axi_HP3_WUSER,
        m_axi_HP3_ARVALID,
        m_axi_HP3_ARREADY,
        m_axi_HP3_ARADDR,
        m_axi_HP3_ARID,
        m_axi_HP3_ARLEN,
        m_axi_HP3_ARSIZE,
        m_axi_HP3_ARBURST,
        m_axi_HP3_ARLOCK,
        m_axi_HP3_ARCACHE,
        m_axi_HP3_ARPROT,
        m_axi_HP3_ARQOS,
        m_axi_HP3_ARREGION,
        m_axi_HP3_ARUSER,
        m_axi_HP3_RVALID,
        m_axi_HP3_RREADY,
        m_axi_HP3_RDATA,
        m_axi_HP3_RLAST,
        m_axi_HP3_RID,
        m_axi_HP3_RUSER,
        m_axi_HP3_RRESP,
        m_axi_HP3_BVALID,
        m_axi_HP3_BREADY,
        m_axi_HP3_BRESP,
        m_axi_HP3_BID,
        m_axi_HP3_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 303'd1;
parameter    ap_ST_fsm_state2 = 303'd2;
parameter    ap_ST_fsm_state3 = 303'd4;
parameter    ap_ST_fsm_state4 = 303'd8;
parameter    ap_ST_fsm_state5 = 303'd16;
parameter    ap_ST_fsm_state6 = 303'd32;
parameter    ap_ST_fsm_state7 = 303'd64;
parameter    ap_ST_fsm_state8 = 303'd128;
parameter    ap_ST_fsm_state9 = 303'd256;
parameter    ap_ST_fsm_state10 = 303'd512;
parameter    ap_ST_fsm_state11 = 303'd1024;
parameter    ap_ST_fsm_state12 = 303'd2048;
parameter    ap_ST_fsm_state13 = 303'd4096;
parameter    ap_ST_fsm_state14 = 303'd8192;
parameter    ap_ST_fsm_state15 = 303'd16384;
parameter    ap_ST_fsm_state16 = 303'd32768;
parameter    ap_ST_fsm_state17 = 303'd65536;
parameter    ap_ST_fsm_state18 = 303'd131072;
parameter    ap_ST_fsm_state19 = 303'd262144;
parameter    ap_ST_fsm_state20 = 303'd524288;
parameter    ap_ST_fsm_state21 = 303'd1048576;
parameter    ap_ST_fsm_state22 = 303'd2097152;
parameter    ap_ST_fsm_state23 = 303'd4194304;
parameter    ap_ST_fsm_state24 = 303'd8388608;
parameter    ap_ST_fsm_state25 = 303'd16777216;
parameter    ap_ST_fsm_state26 = 303'd33554432;
parameter    ap_ST_fsm_state27 = 303'd67108864;
parameter    ap_ST_fsm_state28 = 303'd134217728;
parameter    ap_ST_fsm_state29 = 303'd268435456;
parameter    ap_ST_fsm_state30 = 303'd536870912;
parameter    ap_ST_fsm_state31 = 303'd1073741824;
parameter    ap_ST_fsm_state32 = 303'd2147483648;
parameter    ap_ST_fsm_state33 = 303'd4294967296;
parameter    ap_ST_fsm_state34 = 303'd8589934592;
parameter    ap_ST_fsm_state35 = 303'd17179869184;
parameter    ap_ST_fsm_state36 = 303'd34359738368;
parameter    ap_ST_fsm_state37 = 303'd68719476736;
parameter    ap_ST_fsm_state38 = 303'd137438953472;
parameter    ap_ST_fsm_state39 = 303'd274877906944;
parameter    ap_ST_fsm_state40 = 303'd549755813888;
parameter    ap_ST_fsm_state41 = 303'd1099511627776;
parameter    ap_ST_fsm_state42 = 303'd2199023255552;
parameter    ap_ST_fsm_state43 = 303'd4398046511104;
parameter    ap_ST_fsm_state44 = 303'd8796093022208;
parameter    ap_ST_fsm_state45 = 303'd17592186044416;
parameter    ap_ST_fsm_state46 = 303'd35184372088832;
parameter    ap_ST_fsm_state47 = 303'd70368744177664;
parameter    ap_ST_fsm_state48 = 303'd140737488355328;
parameter    ap_ST_fsm_state49 = 303'd281474976710656;
parameter    ap_ST_fsm_state50 = 303'd562949953421312;
parameter    ap_ST_fsm_state51 = 303'd1125899906842624;
parameter    ap_ST_fsm_state52 = 303'd2251799813685248;
parameter    ap_ST_fsm_state53 = 303'd4503599627370496;
parameter    ap_ST_fsm_state54 = 303'd9007199254740992;
parameter    ap_ST_fsm_state55 = 303'd18014398509481984;
parameter    ap_ST_fsm_state56 = 303'd36028797018963968;
parameter    ap_ST_fsm_state57 = 303'd72057594037927936;
parameter    ap_ST_fsm_state58 = 303'd144115188075855872;
parameter    ap_ST_fsm_state59 = 303'd288230376151711744;
parameter    ap_ST_fsm_state60 = 303'd576460752303423488;
parameter    ap_ST_fsm_state61 = 303'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 303'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 303'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 303'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 303'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 303'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 303'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 303'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 303'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 303'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 303'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 303'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 303'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 303'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 303'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 303'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 303'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 303'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 303'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 303'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 303'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 303'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 303'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 303'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 303'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 303'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 303'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 303'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 303'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 303'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 303'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 303'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 303'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 303'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 303'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 303'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 303'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 303'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 303'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 303'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 303'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 303'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 303'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 303'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 303'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 303'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 303'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 303'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 303'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 303'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 303'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 303'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 303'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 303'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 303'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 303'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 303'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 303'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 303'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 303'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 303'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 303'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 303'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 303'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 303'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 303'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 303'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 303'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 303'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 303'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 303'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 303'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 303'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 303'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 303'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 303'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 303'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 303'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 303'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 303'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 303'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 303'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 303'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 303'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 303'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 303'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 303'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 303'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 303'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 303'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 303'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 303'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 303'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 303'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 303'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 303'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 303'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 303'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 303'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 303'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 303'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 303'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 303'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 303'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 303'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 303'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 303'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 303'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 303'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 303'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 303'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 303'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 303'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 303'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 303'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 303'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 303'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 303'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 303'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 303'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 303'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 303'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 303'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 303'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 303'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 303'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 303'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 303'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 303'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 303'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 303'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 303'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 303'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 303'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 303'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 303'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 303'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 303'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 303'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 303'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 303'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 303'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 303'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 303'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 303'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 303'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 303'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 303'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 303'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 303'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 303'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 303'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 303'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 303'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 303'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 303'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 303'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 303'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 303'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 303'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 303'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 303'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 303'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 303'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 303'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 303'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 303'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 303'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 303'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 303'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 303'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 303'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 303'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 303'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 303'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 303'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 303'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 303'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 303'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 303'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 303'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 303'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 303'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 303'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 303'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 303'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 303'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 303'd226156424291633194186662080095093570025917938800079226639565593765455331328;
parameter    ap_ST_fsm_state249 = 303'd452312848583266388373324160190187140051835877600158453279131187530910662656;
parameter    ap_ST_fsm_state250 = 303'd904625697166532776746648320380374280103671755200316906558262375061821325312;
parameter    ap_ST_fsm_state251 = 303'd1809251394333065553493296640760748560207343510400633813116524750123642650624;
parameter    ap_ST_fsm_state252 = 303'd3618502788666131106986593281521497120414687020801267626233049500247285301248;
parameter    ap_ST_fsm_state253 = 303'd7237005577332262213973186563042994240829374041602535252466099000494570602496;
parameter    ap_ST_fsm_state254 = 303'd14474011154664524427946373126085988481658748083205070504932198000989141204992;
parameter    ap_ST_fsm_state255 = 303'd28948022309329048855892746252171976963317496166410141009864396001978282409984;
parameter    ap_ST_fsm_state256 = 303'd57896044618658097711785492504343953926634992332820282019728792003956564819968;
parameter    ap_ST_fsm_state257 = 303'd115792089237316195423570985008687907853269984665640564039457584007913129639936;
parameter    ap_ST_fsm_state258 = 303'd231584178474632390847141970017375815706539969331281128078915168015826259279872;
parameter    ap_ST_fsm_state259 = 303'd463168356949264781694283940034751631413079938662562256157830336031652518559744;
parameter    ap_ST_fsm_state260 = 303'd926336713898529563388567880069503262826159877325124512315660672063305037119488;
parameter    ap_ST_fsm_state261 = 303'd1852673427797059126777135760139006525652319754650249024631321344126610074238976;
parameter    ap_ST_fsm_state262 = 303'd3705346855594118253554271520278013051304639509300498049262642688253220148477952;
parameter    ap_ST_fsm_state263 = 303'd7410693711188236507108543040556026102609279018600996098525285376506440296955904;
parameter    ap_ST_fsm_state264 = 303'd14821387422376473014217086081112052205218558037201992197050570753012880593911808;
parameter    ap_ST_fsm_state265 = 303'd29642774844752946028434172162224104410437116074403984394101141506025761187823616;
parameter    ap_ST_fsm_state266 = 303'd59285549689505892056868344324448208820874232148807968788202283012051522375647232;
parameter    ap_ST_fsm_state267 = 303'd118571099379011784113736688648896417641748464297615937576404566024103044751294464;
parameter    ap_ST_fsm_state268 = 303'd237142198758023568227473377297792835283496928595231875152809132048206089502588928;
parameter    ap_ST_fsm_state269 = 303'd474284397516047136454946754595585670566993857190463750305618264096412179005177856;
parameter    ap_ST_fsm_state270 = 303'd948568795032094272909893509191171341133987714380927500611236528192824358010355712;
parameter    ap_ST_fsm_state271 = 303'd1897137590064188545819787018382342682267975428761855001222473056385648716020711424;
parameter    ap_ST_fsm_state272 = 303'd3794275180128377091639574036764685364535950857523710002444946112771297432041422848;
parameter    ap_ST_fsm_state273 = 303'd7588550360256754183279148073529370729071901715047420004889892225542594864082845696;
parameter    ap_ST_fsm_state274 = 303'd15177100720513508366558296147058741458143803430094840009779784451085189728165691392;
parameter    ap_ST_fsm_state275 = 303'd30354201441027016733116592294117482916287606860189680019559568902170379456331382784;
parameter    ap_ST_fsm_state276 = 303'd60708402882054033466233184588234965832575213720379360039119137804340758912662765568;
parameter    ap_ST_fsm_state277 = 303'd121416805764108066932466369176469931665150427440758720078238275608681517825325531136;
parameter    ap_ST_fsm_state278 = 303'd242833611528216133864932738352939863330300854881517440156476551217363035650651062272;
parameter    ap_ST_fsm_state279 = 303'd485667223056432267729865476705879726660601709763034880312953102434726071301302124544;
parameter    ap_ST_fsm_state280 = 303'd971334446112864535459730953411759453321203419526069760625906204869452142602604249088;
parameter    ap_ST_fsm_state281 = 303'd1942668892225729070919461906823518906642406839052139521251812409738904285205208498176;
parameter    ap_ST_fsm_state282 = 303'd3885337784451458141838923813647037813284813678104279042503624819477808570410416996352;
parameter    ap_ST_fsm_state283 = 303'd7770675568902916283677847627294075626569627356208558085007249638955617140820833992704;
parameter    ap_ST_fsm_state284 = 303'd15541351137805832567355695254588151253139254712417116170014499277911234281641667985408;
parameter    ap_ST_fsm_state285 = 303'd31082702275611665134711390509176302506278509424834232340028998555822468563283335970816;
parameter    ap_ST_fsm_state286 = 303'd62165404551223330269422781018352605012557018849668464680057997111644937126566671941632;
parameter    ap_ST_fsm_state287 = 303'd124330809102446660538845562036705210025114037699336929360115994223289874253133343883264;
parameter    ap_ST_fsm_state288 = 303'd248661618204893321077691124073410420050228075398673858720231988446579748506266687766528;
parameter    ap_ST_fsm_state289 = 303'd497323236409786642155382248146820840100456150797347717440463976893159497012533375533056;
parameter    ap_ST_fsm_state290 = 303'd994646472819573284310764496293641680200912301594695434880927953786318994025066751066112;
parameter    ap_ST_fsm_state291 = 303'd1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224;
parameter    ap_ST_fsm_state292 = 303'd3978585891278293137243057985174566720803649206378781739523711815145275976100267004264448;
parameter    ap_ST_fsm_state293 = 303'd7957171782556586274486115970349133441607298412757563479047423630290551952200534008528896;
parameter    ap_ST_fsm_state294 = 303'd15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792;
parameter    ap_ST_fsm_state295 = 303'd31828687130226345097944463881396533766429193651030253916189694521162207808802136034115584;
parameter    ap_ST_fsm_state296 = 303'd63657374260452690195888927762793067532858387302060507832379389042324415617604272068231168;
parameter    ap_ST_fsm_state297 = 303'd127314748520905380391777855525586135065716774604121015664758778084648831235208544136462336;
parameter    ap_ST_fsm_state298 = 303'd254629497041810760783555711051172270131433549208242031329517556169297662470417088272924672;
parameter    ap_ST_fsm_state299 = 303'd509258994083621521567111422102344540262867098416484062659035112338595324940834176545849344;
parameter    ap_ST_fsm_state300 = 303'd1018517988167243043134222844204689080525734196832968125318070224677190649881668353091698688;
parameter    ap_ST_fsm_state301 = 303'd2037035976334486086268445688409378161051468393665936250636140449354381299763336706183397376;
parameter    ap_ST_fsm_state302 = 303'd4074071952668972172536891376818756322102936787331872501272280898708762599526673412366794752;
parameter    ap_ST_fsm_state303 = 303'd8148143905337944345073782753637512644205873574663745002544561797417525199053346824733589504;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_HP1_ID_WIDTH = 1;
parameter    C_M_AXI_HP1_ADDR_WIDTH = 64;
parameter    C_M_AXI_HP1_DATA_WIDTH = 32;
parameter    C_M_AXI_HP1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_WUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_RUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_BUSER_WIDTH = 1;
parameter    C_M_AXI_HP1_USER_VALUE = 0;
parameter    C_M_AXI_HP1_PROT_VALUE = 0;
parameter    C_M_AXI_HP1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_HP3_ID_WIDTH = 1;
parameter    C_M_AXI_HP3_ADDR_WIDTH = 64;
parameter    C_M_AXI_HP3_DATA_WIDTH = 32;
parameter    C_M_AXI_HP3_AWUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_ARUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_WUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_RUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_BUSER_WIDTH = 1;
parameter    C_M_AXI_HP3_USER_VALUE = 0;
parameter    C_M_AXI_HP3_PROT_VALUE = 0;
parameter    C_M_AXI_HP3_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_HP1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_HP3_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_HP1_AWVALID;
input   m_axi_HP1_AWREADY;
output  [C_M_AXI_HP1_ADDR_WIDTH - 1:0] m_axi_HP1_AWADDR;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_AWID;
output  [7:0] m_axi_HP1_AWLEN;
output  [2:0] m_axi_HP1_AWSIZE;
output  [1:0] m_axi_HP1_AWBURST;
output  [1:0] m_axi_HP1_AWLOCK;
output  [3:0] m_axi_HP1_AWCACHE;
output  [2:0] m_axi_HP1_AWPROT;
output  [3:0] m_axi_HP1_AWQOS;
output  [3:0] m_axi_HP1_AWREGION;
output  [C_M_AXI_HP1_AWUSER_WIDTH - 1:0] m_axi_HP1_AWUSER;
output   m_axi_HP1_WVALID;
input   m_axi_HP1_WREADY;
output  [C_M_AXI_HP1_DATA_WIDTH - 1:0] m_axi_HP1_WDATA;
output  [C_M_AXI_HP1_WSTRB_WIDTH - 1:0] m_axi_HP1_WSTRB;
output   m_axi_HP1_WLAST;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_WID;
output  [C_M_AXI_HP1_WUSER_WIDTH - 1:0] m_axi_HP1_WUSER;
output   m_axi_HP1_ARVALID;
input   m_axi_HP1_ARREADY;
output  [C_M_AXI_HP1_ADDR_WIDTH - 1:0] m_axi_HP1_ARADDR;
output  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_ARID;
output  [7:0] m_axi_HP1_ARLEN;
output  [2:0] m_axi_HP1_ARSIZE;
output  [1:0] m_axi_HP1_ARBURST;
output  [1:0] m_axi_HP1_ARLOCK;
output  [3:0] m_axi_HP1_ARCACHE;
output  [2:0] m_axi_HP1_ARPROT;
output  [3:0] m_axi_HP1_ARQOS;
output  [3:0] m_axi_HP1_ARREGION;
output  [C_M_AXI_HP1_ARUSER_WIDTH - 1:0] m_axi_HP1_ARUSER;
input   m_axi_HP1_RVALID;
output   m_axi_HP1_RREADY;
input  [C_M_AXI_HP1_DATA_WIDTH - 1:0] m_axi_HP1_RDATA;
input   m_axi_HP1_RLAST;
input  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_RID;
input  [C_M_AXI_HP1_RUSER_WIDTH - 1:0] m_axi_HP1_RUSER;
input  [1:0] m_axi_HP1_RRESP;
input   m_axi_HP1_BVALID;
output   m_axi_HP1_BREADY;
input  [1:0] m_axi_HP1_BRESP;
input  [C_M_AXI_HP1_ID_WIDTH - 1:0] m_axi_HP1_BID;
input  [C_M_AXI_HP1_BUSER_WIDTH - 1:0] m_axi_HP1_BUSER;
output   m_axi_HP3_AWVALID;
input   m_axi_HP3_AWREADY;
output  [C_M_AXI_HP3_ADDR_WIDTH - 1:0] m_axi_HP3_AWADDR;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_AWID;
output  [7:0] m_axi_HP3_AWLEN;
output  [2:0] m_axi_HP3_AWSIZE;
output  [1:0] m_axi_HP3_AWBURST;
output  [1:0] m_axi_HP3_AWLOCK;
output  [3:0] m_axi_HP3_AWCACHE;
output  [2:0] m_axi_HP3_AWPROT;
output  [3:0] m_axi_HP3_AWQOS;
output  [3:0] m_axi_HP3_AWREGION;
output  [C_M_AXI_HP3_AWUSER_WIDTH - 1:0] m_axi_HP3_AWUSER;
output   m_axi_HP3_WVALID;
input   m_axi_HP3_WREADY;
output  [C_M_AXI_HP3_DATA_WIDTH - 1:0] m_axi_HP3_WDATA;
output  [C_M_AXI_HP3_WSTRB_WIDTH - 1:0] m_axi_HP3_WSTRB;
output   m_axi_HP3_WLAST;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_WID;
output  [C_M_AXI_HP3_WUSER_WIDTH - 1:0] m_axi_HP3_WUSER;
output   m_axi_HP3_ARVALID;
input   m_axi_HP3_ARREADY;
output  [C_M_AXI_HP3_ADDR_WIDTH - 1:0] m_axi_HP3_ARADDR;
output  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_ARID;
output  [7:0] m_axi_HP3_ARLEN;
output  [2:0] m_axi_HP3_ARSIZE;
output  [1:0] m_axi_HP3_ARBURST;
output  [1:0] m_axi_HP3_ARLOCK;
output  [3:0] m_axi_HP3_ARCACHE;
output  [2:0] m_axi_HP3_ARPROT;
output  [3:0] m_axi_HP3_ARQOS;
output  [3:0] m_axi_HP3_ARREGION;
output  [C_M_AXI_HP3_ARUSER_WIDTH - 1:0] m_axi_HP3_ARUSER;
input   m_axi_HP3_RVALID;
output   m_axi_HP3_RREADY;
input  [C_M_AXI_HP3_DATA_WIDTH - 1:0] m_axi_HP3_RDATA;
input   m_axi_HP3_RLAST;
input  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_RID;
input  [C_M_AXI_HP3_RUSER_WIDTH - 1:0] m_axi_HP3_RUSER;
input  [1:0] m_axi_HP3_RRESP;
input   m_axi_HP3_BVALID;
output   m_axi_HP3_BREADY;
input  [1:0] m_axi_HP3_BRESP;
input  [C_M_AXI_HP3_ID_WIDTH - 1:0] m_axi_HP3_BID;
input  [C_M_AXI_HP3_BUSER_WIDTH - 1:0] m_axi_HP3_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [302:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] s1;
wire   [63:0] output_r;
wire   [63:0] lzw_size;
wire   [63:0] input_size;
reg    HP1_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    HP1_blk_n_R;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state149;
reg    HP3_blk_n_AW;
wire    ap_CS_fsm_state164;
reg    HP3_blk_n_W;
wire    ap_CS_fsm_state165;
reg    HP3_blk_n_B;
wire    ap_CS_fsm_state233;
wire    ap_CS_fsm_state234;
wire    ap_CS_fsm_state235;
wire    ap_CS_fsm_state303;
wire    HP1_AWREADY;
wire    HP1_WREADY;
reg    HP1_ARVALID;
wire    HP1_ARREADY;
reg   [63:0] HP1_ARADDR;
wire    HP1_RVALID;
reg    HP1_RREADY;
wire   [31:0] HP1_RDATA;
wire    HP1_RLAST;
wire   [0:0] HP1_RID;
wire   [0:0] HP1_RUSER;
wire   [1:0] HP1_RRESP;
wire    HP1_BVALID;
wire   [1:0] HP1_BRESP;
wire   [0:0] HP1_BID;
wire   [0:0] HP1_BUSER;
reg    HP3_AWVALID;
wire    HP3_AWREADY;
reg   [63:0] HP3_AWADDR;
reg    HP3_WVALID;
wire    HP3_WREADY;
reg   [31:0] HP3_WDATA;
reg   [3:0] HP3_WSTRB;
wire    HP3_ARREADY;
wire    HP3_RVALID;
wire   [31:0] HP3_RDATA;
wire    HP3_RLAST;
wire   [0:0] HP3_RID;
wire   [0:0] HP3_RUSER;
wire   [1:0] HP3_RRESP;
wire    HP3_BVALID;
reg    HP3_BREADY;
wire   [1:0] HP3_BRESP;
wire   [0:0] HP3_BID;
wire   [0:0] HP3_BUSER;
reg   [63:0] input_size_read_reg_1751;
reg   [63:0] lzw_size_read_reg_1756;
reg   [63:0] output_read_reg_1761;
reg   [63:0] s1_read_reg_1767;
wire   [15:0] add_ln216_fu_763_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_755_p3;
wire   [9:0] add_ln224_fu_791_p2;
wire    ap_CS_fsm_state4;
reg   [63:0] HP1_addr_1_reg_1796;
wire   [7:0] prefix_code_fu_849_p1;
reg   [7:0] prefix_code_reg_1802;
reg   [31:0] len_reg_1807;
wire   [0:0] icmp_ln252_fu_856_p2;
reg   [0:0] icmp_ln252_reg_1814;
wire    ap_CS_fsm_state77;
wire   [1:0] add_ln269_1_fu_864_p2;
reg   [1:0] add_ln269_1_reg_1863;
reg   [31:0] output_pos_1_reg_1868;
wire    ap_CS_fsm_state78;
wire   [0:0] icmp_ln252_1_fu_907_p2;
reg   [0:0] icmp_ln252_1_reg_1880;
wire   [30:0] add_ln254_fu_912_p2;
reg   [30:0] add_ln254_reg_1884;
wire   [11:0] trunc_ln252_fu_918_p1;
reg   [11:0] trunc_ln252_reg_1889;
wire   [0:0] icmp_ln254_fu_934_p2;
reg   [0:0] icmp_ln254_reg_1896;
reg   [63:0] HP1_addr_2_reg_1900;
wire   [1:0] add_ln269_2_fu_964_p2;
reg   [1:0] add_ln269_2_reg_1906;
wire   [31:0] grp_fu_711_p2;
wire   [7:0] high_four_2_fu_978_p3;
wire   [0:0] grp_load_fu_708_p1;
reg   [31:0] HP1_addr_2_read_reg_1927;
wire   [7:0] next_char_fu_1031_p1;
reg   [7:0] next_char_reg_1932;
wire    ap_CS_fsm_state150;
wire   [11:0] zext_ln273_fu_1035_p1;
reg   [11:0] zext_ln273_reg_1938;
wire   [8:0] key_cast9_fu_1043_p3;
reg   [8:0] key_cast9_reg_1943;
wire   [19:0] key_assign_fu_1051_p3;
reg   [19:0] key_assign_reg_1948;
wire   [63:0] zext_ln17_fu_1059_p1;
reg   [63:0] zext_ln17_reg_1955;
wire   [4:0] add_ln21_fu_1063_p2;
wire    ap_CS_fsm_state151;
wire   [31:0] hashed_5_fu_1124_p2;
wire   [0:0] icmp_ln21_fu_1069_p2;
wire    ap_CS_fsm_state152;
wire   [0:0] and_ln52_fu_1245_p2;
reg   [0:0] and_ln52_reg_1984;
wire    ap_CS_fsm_state153;
wire   [0:0] and_ln59_fu_1256_p2;
reg   [0:0] and_ln59_reg_1988;
wire   [0:0] hit_fu_1272_p1;
reg   [0:0] hit_reg_1992;
wire    ap_CS_fsm_state154;
wire   [4:0] add_ln21_1_fu_1348_p2;
wire    ap_CS_fsm_state155;
wire   [31:0] hashed_11_fu_1409_p2;
wire   [0:0] icmp_ln21_1_fu_1354_p2;
wire   [63:0] zext_ln78_fu_1475_p1;
reg   [63:0] zext_ln78_reg_2012;
wire    ap_CS_fsm_state156;
reg   [14:0] hash_table_0_addr_3_reg_2017;
wire   [0:0] valid_0_1_fu_1480_p3;
reg   [0:0] valid_0_1_reg_2023;
wire    ap_CS_fsm_state157;
reg   [14:0] hash_table_1_addr_3_reg_2027;
wire   [0:0] valid_1_1_fu_1499_p3;
reg   [0:0] valid_1_1_reg_2033;
wire    ap_CS_fsm_state158;
reg   [31:0] my_assoc_mem_fill_1_load_reg_2037;
reg   [8:0] mem_upper_key_mem_addr_reg_2045;
wire   [0:0] icmp_ln118_fu_1531_p2;
reg   [8:0] mem_middle_key_mem_addr_reg_2050;
reg   [8:0] mem_lower_key_mem_addr_reg_2055;
wire   [31:0] grp_fu_750_p2;
wire    ap_CS_fsm_state160;
wire   [31:0] output_pos_4_fu_1637_p2;
wire    ap_CS_fsm_state161;
wire   [1:0] trunc_ln322_fu_1648_p1;
reg   [1:0] trunc_ln322_reg_2070;
wire    ap_CS_fsm_state162;
wire   [31:0] add_ln320_fu_1651_p2;
reg   [31:0] add_ln320_reg_2075;
wire    ap_CS_fsm_state163;
wire   [0:0] icmp_ln320_fu_1662_p2;
wire   [1:0] add_ln322_1_fu_1677_p2;
reg   [1:0] add_ln322_1_reg_2088;
reg   [63:0] HP3_addr_1_reg_2094;
reg   [63:0] HP3_addr_reg_2100;
wire   [3:0] shl_ln322_fu_1728_p2;
reg   [3:0] shl_ln322_reg_2106;
wire   [31:0] shl_ln322_2_fu_1745_p2;
reg   [31:0] shl_ln322_2_reg_2111;
reg   [12:0] temp_output_address0;
reg    temp_output_ce0;
reg    temp_output_we0;
reg   [7:0] temp_output_d0;
reg   [12:0] temp_output_address1;
reg    temp_output_ce1;
reg    temp_output_we1;
reg   [7:0] temp_output_d1;
wire   [7:0] temp_output_q1;
reg   [14:0] hash_table_0_address0;
reg    hash_table_0_ce0;
reg    hash_table_0_we0;
reg   [32:0] hash_table_0_d0;
wire   [32:0] hash_table_0_q0;
reg   [14:0] hash_table_0_address1;
reg    hash_table_0_ce1;
reg    hash_table_0_we1;
wire   [32:0] hash_table_0_q1;
reg   [14:0] hash_table_1_address0;
reg    hash_table_1_ce0;
reg    hash_table_1_we0;
reg   [32:0] hash_table_1_d0;
wire   [32:0] hash_table_1_q0;
reg   [14:0] hash_table_1_address1;
reg    hash_table_1_ce1;
reg    hash_table_1_we1;
wire   [32:0] hash_table_1_q1;
reg   [8:0] my_assoc_mem_upper_key_mem_address0;
reg    my_assoc_mem_upper_key_mem_ce0;
reg    my_assoc_mem_upper_key_mem_we0;
reg   [63:0] my_assoc_mem_upper_key_mem_d0;
wire   [63:0] my_assoc_mem_upper_key_mem_q0;
reg   [8:0] my_assoc_mem_middle_key_mem_address0;
reg    my_assoc_mem_middle_key_mem_ce0;
reg    my_assoc_mem_middle_key_mem_we0;
reg   [63:0] my_assoc_mem_middle_key_mem_d0;
wire   [63:0] my_assoc_mem_middle_key_mem_q0;
reg   [8:0] my_assoc_mem_lower_key_mem_address0;
reg    my_assoc_mem_lower_key_mem_ce0;
reg    my_assoc_mem_lower_key_mem_we0;
reg   [63:0] my_assoc_mem_lower_key_mem_d0;
wire   [63:0] my_assoc_mem_lower_key_mem_q0;
reg   [5:0] my_assoc_mem_value_address0;
reg    my_assoc_mem_value_ce0;
reg    my_assoc_mem_value_we0;
wire   [11:0] my_assoc_mem_value_q0;
wire    grp_assoc_lookup_fu_696_ap_start;
wire    grp_assoc_lookup_fu_696_ap_done;
wire    grp_assoc_lookup_fu_696_ap_idle;
wire    grp_assoc_lookup_fu_696_ap_ready;
wire   [8:0] grp_assoc_lookup_fu_696_mem_upper_key_mem_address0;
wire    grp_assoc_lookup_fu_696_mem_upper_key_mem_ce0;
wire   [8:0] grp_assoc_lookup_fu_696_mem_middle_key_mem_address0;
wire    grp_assoc_lookup_fu_696_mem_middle_key_mem_ce0;
wire   [8:0] grp_assoc_lookup_fu_696_mem_lower_key_mem_address0;
wire    grp_assoc_lookup_fu_696_mem_lower_key_mem_ce0;
wire   [5:0] grp_assoc_lookup_fu_696_mem_value_address0;
wire    grp_assoc_lookup_fu_696_mem_value_ce0;
wire   [0:0] grp_assoc_lookup_fu_696_ap_return_0;
wire   [31:0] grp_assoc_lookup_fu_696_ap_return_1;
reg   [15:0] i_reg_558;
reg    ap_block_state1;
reg   [9:0] i_1_reg_569;
wire   [0:0] icmp_ln224_fu_797_p2;
wire    ap_CS_fsm_state3;
reg   [30:0] i_2_reg_580;
wire    ap_CS_fsm_state159;
reg   [4:0] i_3_reg_591;
reg   [31:0] hashed_2_reg_602;
reg   [0:0] send_two_1_reg_614;
reg   [4:0] i_5_reg_626;
reg   [31:0] hashed_8_reg_637;
reg   [7:0] high_four_4141_reg_649;
reg   [31:0] output_pos_4140_reg_659;
reg   [31:0] output_pos_5_reg_668;
reg   [31:0] i_4_reg_685;
reg    grp_assoc_lookup_fu_696_ap_start_reg;
wire   [63:0] i_cast10_fu_769_p1;
wire   [63:0] zext_ln219_fu_785_p1;
wire   [63:0] i_1_cast_fu_803_p1;
wire   [63:0] zext_ln262_fu_969_p1;
wire   [63:0] zext_ln263_fu_1010_p1;
wire   [63:0] zext_ln40_fu_1190_p1;
wire   [63:0] zext_ln278_fu_1284_p1;
wire   [63:0] zext_ln283_fu_1333_p1;
wire   [63:0] zext_ln120_fu_1547_p1;
wire   [63:0] zext_ln121_fu_1562_p1;
wire   [63:0] zext_ln122_fu_1567_p1;
wire   [63:0] zext_ln123_fu_1571_p1;
wire   [63:0] zext_ln316_fu_1643_p1;
wire   [63:0] zext_ln320_fu_1657_p1;
wire  signed [63:0] sext_ln245_fu_819_p1;
wire  signed [63:0] sext_ln250_fu_839_p1;
wire  signed [63:0] sext_ln269_fu_954_p1;
wire  signed [63:0] sext_ln322_fu_1692_p1;
wire  signed [63:0] sext_ln325_fu_1711_p1;
reg   [11:0] prefix_code_1_fu_240;
wire   [11:0] trunc_ln186_fu_1280_p1;
wire   [11:0] zext_ln245_fu_853_p1;
reg   [31:0] output_pos_fu_244;
reg   [7:0] high_four_fu_248;
wire   [7:0] high_four_3_fu_1292_p3;
reg   [31:0] my_assoc_mem_fill_1_fu_252;
wire   [31:0] my_assoc_mem_fill_fu_1576_p2;
reg   [31:0] value_fu_256;
wire   [31:0] next_code_fu_1617_p2;
reg   [0:0] send_two_fu_260;
wire   [32:0] or_ln2_fu_1488_p5;
wire   [32:0] or_ln3_fu_1507_p5;
wire   [63:0] or_ln120_fu_1596_p2;
wire   [63:0] or_ln121_fu_1603_p2;
wire   [63:0] or_ln122_fu_1610_p2;
wire   [7:0] or_ln_fu_996_p3;
wire   [7:0] trunc_ln263_fu_1005_p1;
wire   [7:0] or_ln1_fu_1319_p3;
wire   [7:0] trunc_ln283_fu_1328_p1;
reg   [31:0] grp_fu_750_p0;
wire   [14:0] empty_36_fu_775_p1;
wire   [14:0] or_ln216_fu_779_p2;
wire   [61:0] trunc_ln245_1_fu_810_p4;
wire   [61:0] trunc_ln_fu_830_p4;
wire   [1:0] trunc_ln269_fu_861_p1;
wire   [31:0] zext_ln252_fu_903_p1;
wire   [31:0] zext_ln254_fu_926_p1;
wire   [63:0] zext_ln254_1_fu_930_p1;
wire   [63:0] add_ln269_fu_939_p2;
wire   [61:0] trunc_ln269_1_fu_944_p4;
wire   [1:0] trunc_ln254_fu_922_p1;
wire   [3:0] trunc_ln260_fu_974_p1;
wire   [3:0] trunc_ln262_fu_986_p1;
wire   [3:0] grp_fu_731_p4;
wire   [3:0] grp_fu_741_p4;
wire   [3:0] or_ln262_fu_990_p2;
wire   [4:0] shl_ln_fu_1015_p3;
wire   [31:0] zext_ln269_fu_1022_p1;
wire   [31:0] lshr_ln269_fu_1026_p2;
wire   [0:0] trunc_ln273_fu_1039_p1;
wire   [63:0] zext_ln21_fu_1075_p1;
wire   [63:0] lshr_ln24_fu_1079_p2;
wire   [0:0] trunc_ln24_fu_1084_p1;
wire   [31:0] zext_ln24_fu_1088_p1;
wire   [31:0] hashed_3_fu_1092_p2;
wire   [31:0] shl_ln25_fu_1098_p2;
wire   [31:0] hashed_4_fu_1104_p2;
wire   [25:0] lshr_ln_fu_1110_p4;
wire   [31:0] zext_ln26_fu_1120_p1;
wire   [22:0] trunc_ln28_fu_1134_p1;
wire   [11:0] trunc_ln28_4_fu_1150_p1;
wire   [25:0] shl_ln1_fu_1138_p3;
wire   [25:0] trunc_ln21_fu_1130_p1;
wire   [14:0] trunc_ln28_1_fu_1154_p3;
wire   [14:0] trunc_ln28_2_fu_1146_p1;
wire   [25:0] hashed_fu_1162_p2;
wire   [14:0] trunc_ln8_fu_1174_p4;
wire   [14:0] add_ln19_fu_1168_p2;
wire   [14:0] hashed_1_fu_1184_p2;
wire   [19:0] stored_key_0_fu_1196_p1;
wire   [0:0] valid_0_fu_1210_p3;
wire   [0:0] icmp_ln52_fu_1240_p2;
wire   [19:0] stored_key_1_fu_1218_p1;
wire   [0:0] valid_1_fu_1232_p3;
wire   [0:0] icmp_ln59_fu_1251_p2;
wire   [3:0] trunc_ln280_fu_1288_p1;
wire   [3:0] trunc_ln282_fu_1310_p1;
wire   [3:0] or_ln282_fu_1313_p2;
wire   [63:0] zext_ln21_1_fu_1360_p1;
wire   [63:0] lshr_ln24_1_fu_1364_p2;
wire   [0:0] trunc_ln24_1_fu_1369_p1;
wire   [31:0] zext_ln24_1_fu_1373_p1;
wire   [31:0] hashed_9_fu_1377_p2;
wire   [31:0] shl_ln25_1_fu_1383_p2;
wire   [31:0] hashed_10_fu_1389_p2;
wire   [25:0] lshr_ln26_1_fu_1395_p4;
wire   [31:0] zext_ln26_1_fu_1405_p1;
wire   [22:0] trunc_ln28_5_fu_1419_p1;
wire   [11:0] trunc_ln28_7_fu_1435_p1;
wire   [25:0] shl_ln28_1_fu_1423_p3;
wire   [25:0] trunc_ln21_1_fu_1415_p1;
wire   [14:0] trunc_ln28_3_fu_1439_p3;
wire   [14:0] trunc_ln28_6_fu_1431_p1;
wire   [25:0] hashed_6_fu_1447_p2;
wire   [14:0] trunc_ln29_1_fu_1459_p4;
wire   [14:0] add_ln19_1_fu_1453_p2;
wire   [14:0] hashed_12_fu_1469_p2;
wire   [25:0] tmp_7_fu_1521_p4;
wire   [1:0] lshr_ln1_fu_1537_p4;
wire   [8:0] trunc_ln7_fu_1552_p4;
wire   [31:0] shl_ln120_fu_1587_p2;
wire  signed [63:0] sext_ln120_fu_1592_p1;
wire   [1:0] trunc_ln322_1_fu_1668_p1;
wire   [63:0] add_ln322_fu_1672_p2;
wire   [61:0] trunc_ln2_fu_1682_p4;
wire   [61:0] trunc_ln1_fu_1702_p4;
wire   [3:0] zext_ln322_1_fu_1725_p1;
wire   [4:0] shl_ln322_1_fu_1734_p3;
wire   [31:0] zext_ln322_fu_1721_p1;
wire   [31:0] zext_ln322_2_fu_1741_p1;
reg   [302:0] ap_NS_fsm;
reg    ap_condition_768;
reg    ap_condition_1080;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 303'd1;
#0 grp_assoc_lookup_fu_696_ap_start_reg = 1'b0;
end

hardware_encoding_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .s1(s1),
    .output_r(output_r),
    .lzw_size(lzw_size),
    .input_size(input_size),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

hardware_encoding_HP1_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_HP1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_HP1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_HP1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_HP1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_HP1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_HP1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_HP1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_HP1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_HP1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_HP1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_HP1_CACHE_VALUE ))
HP1_m_axi_U(
    .AWVALID(m_axi_HP1_AWVALID),
    .AWREADY(m_axi_HP1_AWREADY),
    .AWADDR(m_axi_HP1_AWADDR),
    .AWID(m_axi_HP1_AWID),
    .AWLEN(m_axi_HP1_AWLEN),
    .AWSIZE(m_axi_HP1_AWSIZE),
    .AWBURST(m_axi_HP1_AWBURST),
    .AWLOCK(m_axi_HP1_AWLOCK),
    .AWCACHE(m_axi_HP1_AWCACHE),
    .AWPROT(m_axi_HP1_AWPROT),
    .AWQOS(m_axi_HP1_AWQOS),
    .AWREGION(m_axi_HP1_AWREGION),
    .AWUSER(m_axi_HP1_AWUSER),
    .WVALID(m_axi_HP1_WVALID),
    .WREADY(m_axi_HP1_WREADY),
    .WDATA(m_axi_HP1_WDATA),
    .WSTRB(m_axi_HP1_WSTRB),
    .WLAST(m_axi_HP1_WLAST),
    .WID(m_axi_HP1_WID),
    .WUSER(m_axi_HP1_WUSER),
    .ARVALID(m_axi_HP1_ARVALID),
    .ARREADY(m_axi_HP1_ARREADY),
    .ARADDR(m_axi_HP1_ARADDR),
    .ARID(m_axi_HP1_ARID),
    .ARLEN(m_axi_HP1_ARLEN),
    .ARSIZE(m_axi_HP1_ARSIZE),
    .ARBURST(m_axi_HP1_ARBURST),
    .ARLOCK(m_axi_HP1_ARLOCK),
    .ARCACHE(m_axi_HP1_ARCACHE),
    .ARPROT(m_axi_HP1_ARPROT),
    .ARQOS(m_axi_HP1_ARQOS),
    .ARREGION(m_axi_HP1_ARREGION),
    .ARUSER(m_axi_HP1_ARUSER),
    .RVALID(m_axi_HP1_RVALID),
    .RREADY(m_axi_HP1_RREADY),
    .RDATA(m_axi_HP1_RDATA),
    .RLAST(m_axi_HP1_RLAST),
    .RID(m_axi_HP1_RID),
    .RUSER(m_axi_HP1_RUSER),
    .RRESP(m_axi_HP1_RRESP),
    .BVALID(m_axi_HP1_BVALID),
    .BREADY(m_axi_HP1_BREADY),
    .BRESP(m_axi_HP1_BRESP),
    .BID(m_axi_HP1_BID),
    .BUSER(m_axi_HP1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(HP1_ARVALID),
    .I_ARREADY(HP1_ARREADY),
    .I_ARADDR(HP1_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(HP1_RVALID),
    .I_RREADY(HP1_RREADY),
    .I_RDATA(HP1_RDATA),
    .I_RID(HP1_RID),
    .I_RUSER(HP1_RUSER),
    .I_RRESP(HP1_RRESP),
    .I_RLAST(HP1_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(HP1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(HP1_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(HP1_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(HP1_BRESP),
    .I_BID(HP1_BID),
    .I_BUSER(HP1_BUSER)
);

hardware_encoding_HP3_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_HP3_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_HP3_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_HP3_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_HP3_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_HP3_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_HP3_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_HP3_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_HP3_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_HP3_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_HP3_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_HP3_CACHE_VALUE ))
HP3_m_axi_U(
    .AWVALID(m_axi_HP3_AWVALID),
    .AWREADY(m_axi_HP3_AWREADY),
    .AWADDR(m_axi_HP3_AWADDR),
    .AWID(m_axi_HP3_AWID),
    .AWLEN(m_axi_HP3_AWLEN),
    .AWSIZE(m_axi_HP3_AWSIZE),
    .AWBURST(m_axi_HP3_AWBURST),
    .AWLOCK(m_axi_HP3_AWLOCK),
    .AWCACHE(m_axi_HP3_AWCACHE),
    .AWPROT(m_axi_HP3_AWPROT),
    .AWQOS(m_axi_HP3_AWQOS),
    .AWREGION(m_axi_HP3_AWREGION),
    .AWUSER(m_axi_HP3_AWUSER),
    .WVALID(m_axi_HP3_WVALID),
    .WREADY(m_axi_HP3_WREADY),
    .WDATA(m_axi_HP3_WDATA),
    .WSTRB(m_axi_HP3_WSTRB),
    .WLAST(m_axi_HP3_WLAST),
    .WID(m_axi_HP3_WID),
    .WUSER(m_axi_HP3_WUSER),
    .ARVALID(m_axi_HP3_ARVALID),
    .ARREADY(m_axi_HP3_ARREADY),
    .ARADDR(m_axi_HP3_ARADDR),
    .ARID(m_axi_HP3_ARID),
    .ARLEN(m_axi_HP3_ARLEN),
    .ARSIZE(m_axi_HP3_ARSIZE),
    .ARBURST(m_axi_HP3_ARBURST),
    .ARLOCK(m_axi_HP3_ARLOCK),
    .ARCACHE(m_axi_HP3_ARCACHE),
    .ARPROT(m_axi_HP3_ARPROT),
    .ARQOS(m_axi_HP3_ARQOS),
    .ARREGION(m_axi_HP3_ARREGION),
    .ARUSER(m_axi_HP3_ARUSER),
    .RVALID(m_axi_HP3_RVALID),
    .RREADY(m_axi_HP3_RREADY),
    .RDATA(m_axi_HP3_RDATA),
    .RLAST(m_axi_HP3_RLAST),
    .RID(m_axi_HP3_RID),
    .RUSER(m_axi_HP3_RUSER),
    .RRESP(m_axi_HP3_RRESP),
    .BVALID(m_axi_HP3_BVALID),
    .BREADY(m_axi_HP3_BREADY),
    .BRESP(m_axi_HP3_BRESP),
    .BID(m_axi_HP3_BID),
    .BUSER(m_axi_HP3_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(HP3_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(HP3_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(HP3_RDATA),
    .I_RID(HP3_RID),
    .I_RUSER(HP3_RUSER),
    .I_RRESP(HP3_RRESP),
    .I_RLAST(HP3_RLAST),
    .I_AWVALID(HP3_AWVALID),
    .I_AWREADY(HP3_AWREADY),
    .I_AWADDR(HP3_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(HP3_WVALID),
    .I_WREADY(HP3_WREADY),
    .I_WDATA(HP3_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(HP3_WSTRB),
    .I_BVALID(HP3_BVALID),
    .I_BREADY(HP3_BREADY),
    .I_BRESP(HP3_BRESP),
    .I_BID(HP3_BID),
    .I_BUSER(HP3_BUSER)
);

hardware_encoding_temp_output #(
    .DataWidth( 8 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
temp_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_output_address0),
    .ce0(temp_output_ce0),
    .we0(temp_output_we0),
    .d0(temp_output_d0),
    .address1(temp_output_address1),
    .ce1(temp_output_ce1),
    .we1(temp_output_we1),
    .d1(temp_output_d1),
    .q1(temp_output_q1)
);

hardware_encoding_hash_table_0 #(
    .DataWidth( 33 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
hash_table_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_table_0_address0),
    .ce0(hash_table_0_ce0),
    .we0(hash_table_0_we0),
    .d0(hash_table_0_d0),
    .q0(hash_table_0_q0),
    .address1(hash_table_0_address1),
    .ce1(hash_table_0_ce1),
    .we1(hash_table_0_we1),
    .d1(33'd0),
    .q1(hash_table_0_q1)
);

hardware_encoding_hash_table_0 #(
    .DataWidth( 33 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
hash_table_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_table_1_address0),
    .ce0(hash_table_1_ce0),
    .we0(hash_table_1_we0),
    .d0(hash_table_1_d0),
    .q0(hash_table_1_q0),
    .address1(hash_table_1_address1),
    .ce1(hash_table_1_ce1),
    .we1(hash_table_1_we1),
    .d1(33'd0),
    .q1(hash_table_1_q1)
);

hardware_encoding_my_assoc_mem_upper_key_mem #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
my_assoc_mem_upper_key_mem_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(my_assoc_mem_upper_key_mem_address0),
    .ce0(my_assoc_mem_upper_key_mem_ce0),
    .we0(my_assoc_mem_upper_key_mem_we0),
    .d0(my_assoc_mem_upper_key_mem_d0),
    .q0(my_assoc_mem_upper_key_mem_q0)
);

hardware_encoding_my_assoc_mem_upper_key_mem #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
my_assoc_mem_middle_key_mem_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(my_assoc_mem_middle_key_mem_address0),
    .ce0(my_assoc_mem_middle_key_mem_ce0),
    .we0(my_assoc_mem_middle_key_mem_we0),
    .d0(my_assoc_mem_middle_key_mem_d0),
    .q0(my_assoc_mem_middle_key_mem_q0)
);

hardware_encoding_my_assoc_mem_upper_key_mem #(
    .DataWidth( 64 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
my_assoc_mem_lower_key_mem_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(my_assoc_mem_lower_key_mem_address0),
    .ce0(my_assoc_mem_lower_key_mem_ce0),
    .we0(my_assoc_mem_lower_key_mem_we0),
    .d0(my_assoc_mem_lower_key_mem_d0),
    .q0(my_assoc_mem_lower_key_mem_q0)
);

hardware_encoding_my_assoc_mem_value #(
    .DataWidth( 12 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
my_assoc_mem_value_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(my_assoc_mem_value_address0),
    .ce0(my_assoc_mem_value_ce0),
    .we0(my_assoc_mem_value_we0),
    .d0(trunc_ln252_reg_1889),
    .q0(my_assoc_mem_value_q0)
);

hardware_encoding_assoc_lookup grp_assoc_lookup_fu_696(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_assoc_lookup_fu_696_ap_start),
    .ap_done(grp_assoc_lookup_fu_696_ap_done),
    .ap_idle(grp_assoc_lookup_fu_696_ap_idle),
    .ap_ready(grp_assoc_lookup_fu_696_ap_ready),
    .mem_upper_key_mem_address0(grp_assoc_lookup_fu_696_mem_upper_key_mem_address0),
    .mem_upper_key_mem_ce0(grp_assoc_lookup_fu_696_mem_upper_key_mem_ce0),
    .mem_upper_key_mem_q0(my_assoc_mem_upper_key_mem_q0),
    .mem_middle_key_mem_address0(grp_assoc_lookup_fu_696_mem_middle_key_mem_address0),
    .mem_middle_key_mem_ce0(grp_assoc_lookup_fu_696_mem_middle_key_mem_ce0),
    .mem_middle_key_mem_q0(my_assoc_mem_middle_key_mem_q0),
    .mem_lower_key_mem_address0(grp_assoc_lookup_fu_696_mem_lower_key_mem_address0),
    .mem_lower_key_mem_ce0(grp_assoc_lookup_fu_696_mem_lower_key_mem_ce0),
    .mem_lower_key_mem_q0(my_assoc_mem_lower_key_mem_q0),
    .mem_value_address0(grp_assoc_lookup_fu_696_mem_value_address0),
    .mem_value_ce0(grp_assoc_lookup_fu_696_mem_value_ce0),
    .mem_value_q0(my_assoc_mem_value_q0),
    .key(key_assign_reg_1948),
    .ap_return_0(grp_assoc_lookup_fu_696_ap_return_0),
    .ap_return_1(grp_assoc_lookup_fu_696_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state158) & ((icmp_ln252_reg_1814 == 1'd0) | ((icmp_ln252_1_reg_1880 == 1'd0) | ((icmp_ln254_reg_1896 == 1'd1) | ((icmp_ln118_fu_1531_p2 == 1'd0) & (valid_1_1_fu_1499_p3 == 1'd1))))))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_assoc_lookup_fu_696_ap_start_reg <= 1'b0;
    end else begin
        if (((1'd0 == and_ln59_fu_1256_p2) & (1'd0 == and_ln52_fu_1245_p2) & (1'b1 == ap_CS_fsm_state153))) begin
            grp_assoc_lookup_fu_696_ap_start_reg <= 1'b1;
        end else if ((grp_assoc_lookup_fu_696_ap_ready == 1'b1)) begin
            grp_assoc_lookup_fu_696_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        hashed_2_reg_602 <= 32'd0;
    end else if (((icmp_ln21_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state151))) begin
        hashed_2_reg_602 <= hashed_5_fu_1124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((hit_fu_1272_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        hashed_8_reg_637 <= 32'd0;
    end else if (((icmp_ln21_1_fu_1354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state155))) begin
        hashed_8_reg_637 <= hashed_11_fu_1409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        if (((grp_load_fu_708_p1 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd0))) begin
                        high_four_4141_reg_649[7 : 4] <= high_four_fu_248[7 : 4];
        end else if ((1'b1 == ap_condition_768)) begin
                        high_four_4141_reg_649[7 : 4] <= high_four_2_fu_978_p3[7 : 4];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_569 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln224_fu_797_p2 == 1'd0))) begin
        i_1_reg_569 <= add_ln224_fu_791_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        i_2_reg_580 <= add_ln254_reg_1884;
    end else if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        i_2_reg_580 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        i_3_reg_591 <= 5'd0;
    end else if (((icmp_ln21_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state151))) begin
        i_3_reg_591 <= add_ln21_fu_1063_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        i_4_reg_685 <= 32'd0;
    end else if (((1'b1 == HP3_BVALID) & (1'b1 == ap_CS_fsm_state233))) begin
        i_4_reg_685 <= add_ln320_reg_2075;
    end
end

always @ (posedge ap_clk) begin
    if (((hit_fu_1272_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        i_5_reg_626 <= 5'd0;
    end else if (((icmp_ln21_1_fu_1354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state155))) begin
        i_5_reg_626 <= add_ln21_1_fu_1348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_558 <= 16'd0;
    end else if (((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_558 <= add_ln216_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        my_assoc_mem_fill_1_fu_252 <= 32'd0;
    end else if (((icmp_ln118_fu_1531_p2 == 1'd1) & (valid_1_1_fu_1499_p3 == 1'd1) & (icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        my_assoc_mem_fill_1_fu_252 <= my_assoc_mem_fill_fu_1576_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        if (((grp_load_fu_708_p1 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd0))) begin
            output_pos_4140_reg_659 <= output_pos_fu_244;
        end else if ((1'b1 == ap_condition_768)) begin
            output_pos_4140_reg_659 <= grp_fu_711_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_load_fu_708_p1 == 1'd0) & (icmp_ln252_1_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
        output_pos_5_reg_668 <= output_pos_fu_244;
    end else if (((icmp_ln252_fu_856_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state77))) begin
        output_pos_5_reg_668 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        output_pos_5_reg_668 <= grp_fu_750_p2;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        output_pos_5_reg_668 <= output_pos_4_fu_1637_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        output_pos_fu_244 <= 32'd0;
    end else if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        output_pos_fu_244 <= grp_fu_750_p2;
    end else if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        output_pos_fu_244 <= grp_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        prefix_code_1_fu_240 <= zext_ln245_fu_853_p1;
    end else if (((1'd1 == and_ln52_fu_1245_p2) & (1'b1 == ap_CS_fsm_state153))) begin
        prefix_code_1_fu_240 <= {{hash_table_0_q0[31:20]}};
    end else if (((1'd1 == and_ln59_fu_1256_p2) & (1'd0 == and_ln52_fu_1245_p2) & (1'b1 == ap_CS_fsm_state153))) begin
        prefix_code_1_fu_240 <= {{hash_table_1_q0[31:20]}};
    end else if (((hit_fu_1272_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        prefix_code_1_fu_240 <= trunc_ln186_fu_1280_p1;
    end else if (((hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159))) begin
        prefix_code_1_fu_240 <= zext_ln273_reg_1938;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1080)) begin
        if ((grp_load_fu_708_p1 == 1'd0)) begin
            send_two_1_reg_614 <= 1'd1;
        end else if ((grp_load_fu_708_p1 == 1'd1)) begin
            send_two_1_reg_614 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        send_two_fu_260 <= 1'd0;
    end else if (((hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159))) begin
        send_two_fu_260 <= send_two_1_reg_614;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        value_fu_256 <= 32'd256;
    end else if (((hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159))) begin
        value_fu_256 <= next_code_fu_1617_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        HP1_addr_1_reg_1796 <= sext_ln250_fu_839_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        HP1_addr_2_read_reg_1927 <= HP1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_fu_934_p2 == 1'd0) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        HP1_addr_2_reg_1900 <= sext_ln269_fu_954_p1;
        add_ln269_2_reg_1906 <= add_ln269_2_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_1662_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state163))) begin
        HP3_addr_1_reg_2094 <= sext_ln322_fu_1692_p1;
        add_ln322_1_reg_2088 <= add_ln322_1_fu_1677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln320_fu_1662_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state163))) begin
        HP3_addr_reg_2100 <= sext_ln325_fu_1711_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln254_reg_1884 <= add_ln254_fu_912_p2;
        icmp_ln252_1_reg_1880 <= icmp_ln252_1_fu_907_p2;
        output_pos_1_reg_1868 <= output_pos_fu_244;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
        add_ln269_1_reg_1863 <= add_ln269_1_fu_864_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        add_ln320_reg_2075 <= add_ln320_fu_1651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        and_ln52_reg_1984 <= and_ln52_fu_1245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln52_fu_1245_p2) & (1'b1 == ap_CS_fsm_state153))) begin
        and_ln59_reg_1988 <= and_ln59_fu_1256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state156)) begin
        hash_table_0_addr_3_reg_2017 <= zext_ln78_fu_1475_p1;
        zext_ln78_reg_2012[14 : 0] <= zext_ln78_fu_1475_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((valid_0_1_fu_1480_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state157))) begin
        hash_table_1_addr_3_reg_2027 <= zext_ln78_reg_2012;
    end
end

always @ (posedge ap_clk) begin
    if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
        high_four_fu_248[7 : 4] <= high_four_3_fu_1292_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        hit_reg_1992 <= grp_assoc_lookup_fu_696_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        icmp_ln252_reg_1814 <= icmp_ln252_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        icmp_ln254_reg_1896 <= icmp_ln254_fu_934_p2;
        trunc_ln252_reg_1889 <= trunc_ln252_fu_918_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_size_read_reg_1751 <= input_size;
        lzw_size_read_reg_1756 <= lzw_size;
        output_read_reg_1761 <= output_r;
        s1_read_reg_1767 <= s1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        key_assign_reg_1948 <= key_assign_fu_1051_p3;
        key_cast9_reg_1943 <= key_cast9_fu_1043_p3;
        next_char_reg_1932 <= next_char_fu_1031_p1;
        zext_ln17_reg_1955[19 : 0] <= zext_ln17_fu_1059_p1[19 : 0];
        zext_ln273_reg_1938[7 : 0] <= zext_ln273_fu_1035_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        len_reg_1807 <= HP1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln118_fu_1531_p2 == 1'd1) & (valid_1_1_fu_1499_p3 == 1'd1) & (icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        mem_lower_key_mem_addr_reg_2055 <= zext_ln122_fu_1567_p1;
        mem_middle_key_mem_addr_reg_2050 <= zext_ln121_fu_1562_p1;
        mem_upper_key_mem_addr_reg_2045[1 : 0] <= zext_ln120_fu_1547_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((valid_1_1_fu_1499_p3 == 1'd1) & (icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        my_assoc_mem_fill_1_load_reg_2037 <= my_assoc_mem_fill_1_fu_252;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        prefix_code_reg_1802 <= prefix_code_fu_849_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        shl_ln322_2_reg_2111 <= shl_ln322_2_fu_1745_p2;
        shl_ln322_reg_2106 <= shl_ln322_fu_1728_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state162)) begin
        trunc_ln322_reg_2070 <= trunc_ln322_fu_1648_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        valid_0_1_reg_2023 <= hash_table_0_q1[32'd32];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        valid_1_1_reg_2033 <= hash_table_1_q1[32'd32];
    end
end

always @ (*) begin
    if ((1'b1 == HP1_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            HP1_ARADDR = HP1_addr_2_reg_1900;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            HP1_ARADDR = HP1_addr_1_reg_1796;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            HP1_ARADDR = sext_ln245_fu_819_p1;
        end else begin
            HP1_ARADDR = 'bx;
        end
    end else begin
        HP1_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state79)) | ((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state5)))) begin
        HP1_ARVALID = 1'b1;
    end else begin
        HP1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state149)) | ((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state76)) | ((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state75)))) begin
        HP1_RREADY = 1'b1;
    end else begin
        HP1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        HP1_blk_n_AR = m_axi_HP1_ARREADY;
    end else begin
        HP1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state149) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75))) begin
        HP1_blk_n_R = m_axi_HP1_RVALID;
    end else begin
        HP1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == HP3_AWREADY)) begin
        if ((1'b1 == ap_CS_fsm_state234)) begin
            HP3_AWADDR = HP3_addr_reg_2100;
        end else if ((1'b1 == ap_CS_fsm_state164)) begin
            HP3_AWADDR = HP3_addr_1_reg_2094;
        end else begin
            HP3_AWADDR = 'bx;
        end
    end else begin
        HP3_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == HP3_AWREADY) & (1'b1 == ap_CS_fsm_state234)) | ((1'b1 == HP3_AWREADY) & (1'b1 == ap_CS_fsm_state164)))) begin
        HP3_AWVALID = 1'b1;
    end else begin
        HP3_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == HP3_BVALID) & (1'b1 == ap_CS_fsm_state303)) | ((1'b1 == HP3_BVALID) & (1'b1 == ap_CS_fsm_state233)))) begin
        HP3_BREADY = 1'b1;
    end else begin
        HP3_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state235)) begin
        HP3_WDATA = output_pos_5_reg_668;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        HP3_WDATA = shl_ln322_2_reg_2111;
    end else begin
        HP3_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state235)) begin
        HP3_WSTRB = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        HP3_WSTRB = shl_ln322_reg_2106;
    end else begin
        HP3_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == HP3_WREADY) & (1'b1 == ap_CS_fsm_state235)) | ((1'b1 == HP3_WREADY) & (1'b1 == ap_CS_fsm_state165)))) begin
        HP3_WVALID = 1'b1;
    end else begin
        HP3_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state234) | (1'b1 == ap_CS_fsm_state164))) begin
        HP3_blk_n_AW = m_axi_HP3_AWREADY;
    end else begin
        HP3_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state303) | (1'b1 == ap_CS_fsm_state233))) begin
        HP3_blk_n_B = m_axi_HP3_BVALID;
    end else begin
        HP3_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state235) | (1'b1 == ap_CS_fsm_state165))) begin
        HP3_blk_n_W = m_axi_HP3_WREADY;
    end else begin
        HP3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) & ((icmp_ln252_reg_1814 == 1'd0) | ((icmp_ln252_1_reg_1880 == 1'd0) | ((icmp_ln254_reg_1896 == 1'd1) | ((icmp_ln118_fu_1531_p2 == 1'd0) & (valid_1_1_fu_1499_p3 == 1'd1))))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) & ((icmp_ln252_reg_1814 == 1'd0) | ((icmp_ln252_1_reg_1880 == 1'd0) | ((icmp_ln254_reg_1896 == 1'd1) | ((icmp_ln118_fu_1531_p2 == 1'd0) & (valid_1_1_fu_1499_p3 == 1'd1))))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        grp_fu_750_p0 = output_pos_1_reg_1868;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        grp_fu_750_p0 = output_pos_fu_244;
    end else begin
        grp_fu_750_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        hash_table_0_address0 = hash_table_0_addr_3_reg_2017;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        hash_table_0_address0 = zext_ln40_fu_1190_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_0_address0 = zext_ln219_fu_785_p1;
    end else begin
        hash_table_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state156)) begin
        hash_table_0_address1 = zext_ln78_fu_1475_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_0_address1 = i_cast10_fu_769_p1;
    end else begin
        hash_table_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_0_ce0 = 1'b1;
    end else begin
        hash_table_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_0_ce1 = 1'b1;
    end else begin
        hash_table_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        hash_table_0_d0 = or_ln2_fu_1488_p5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_0_d0 = 33'd0;
    end else begin
        hash_table_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((valid_0_1_fu_1480_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state157)))) begin
        hash_table_0_we0 = 1'b1;
    end else begin
        hash_table_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_0_we1 = 1'b1;
    end else begin
        hash_table_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        hash_table_1_address0 = hash_table_1_addr_3_reg_2027;
    end else if ((1'b1 == ap_CS_fsm_state152)) begin
        hash_table_1_address0 = zext_ln40_fu_1190_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_1_address0 = zext_ln219_fu_785_p1;
    end else begin
        hash_table_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        hash_table_1_address1 = zext_ln78_reg_2012;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_1_address1 = i_cast10_fu_769_p1;
    end else begin
        hash_table_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_1_ce0 = 1'b1;
    end else begin
        hash_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state157) | (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_1_ce1 = 1'b1;
    end else begin
        hash_table_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        hash_table_1_d0 = or_ln3_fu_1507_p5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_table_1_d0 = 33'd0;
    end else begin
        hash_table_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((valid_1_1_fu_1499_p3 == 1'd0) & (icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158)))) begin
        hash_table_1_we0 = 1'b1;
    end else begin
        hash_table_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        hash_table_1_we1 = 1'b1;
    end else begin
        hash_table_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_lower_key_mem_address0 = mem_lower_key_mem_addr_reg_2055;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        my_assoc_mem_lower_key_mem_address0 = zext_ln122_fu_1567_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_lower_key_mem_address0 = i_1_cast_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_lower_key_mem_address0 = grp_assoc_lookup_fu_696_mem_lower_key_mem_address0;
    end else begin
        my_assoc_mem_lower_key_mem_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state159))) begin
        my_assoc_mem_lower_key_mem_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_lower_key_mem_ce0 = grp_assoc_lookup_fu_696_mem_lower_key_mem_ce0;
    end else begin
        my_assoc_mem_lower_key_mem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_lower_key_mem_d0 = or_ln122_fu_1610_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_lower_key_mem_d0 = 64'd0;
    end else begin
        my_assoc_mem_lower_key_mem_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln224_fu_797_p2 == 1'd0)) | ((valid_1_1_reg_2033 == 1'd1) & (valid_0_1_reg_2023 == 1'd1) & (hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159)))) begin
        my_assoc_mem_lower_key_mem_we0 = 1'b1;
    end else begin
        my_assoc_mem_lower_key_mem_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_middle_key_mem_address0 = mem_middle_key_mem_addr_reg_2050;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        my_assoc_mem_middle_key_mem_address0 = zext_ln121_fu_1562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_middle_key_mem_address0 = i_1_cast_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_middle_key_mem_address0 = grp_assoc_lookup_fu_696_mem_middle_key_mem_address0;
    end else begin
        my_assoc_mem_middle_key_mem_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state159))) begin
        my_assoc_mem_middle_key_mem_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_middle_key_mem_ce0 = grp_assoc_lookup_fu_696_mem_middle_key_mem_ce0;
    end else begin
        my_assoc_mem_middle_key_mem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_middle_key_mem_d0 = or_ln121_fu_1603_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_middle_key_mem_d0 = 64'd0;
    end else begin
        my_assoc_mem_middle_key_mem_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln224_fu_797_p2 == 1'd0)) | ((valid_1_1_reg_2033 == 1'd1) & (valid_0_1_reg_2023 == 1'd1) & (hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159)))) begin
        my_assoc_mem_middle_key_mem_we0 = 1'b1;
    end else begin
        my_assoc_mem_middle_key_mem_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_upper_key_mem_address0 = mem_upper_key_mem_addr_reg_2045;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        my_assoc_mem_upper_key_mem_address0 = zext_ln120_fu_1547_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_upper_key_mem_address0 = i_1_cast_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_upper_key_mem_address0 = grp_assoc_lookup_fu_696_mem_upper_key_mem_address0;
    end else begin
        my_assoc_mem_upper_key_mem_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state159))) begin
        my_assoc_mem_upper_key_mem_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_upper_key_mem_ce0 = grp_assoc_lookup_fu_696_mem_upper_key_mem_ce0;
    end else begin
        my_assoc_mem_upper_key_mem_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        my_assoc_mem_upper_key_mem_d0 = or_ln120_fu_1596_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        my_assoc_mem_upper_key_mem_d0 = 64'd0;
    end else begin
        my_assoc_mem_upper_key_mem_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (icmp_ln224_fu_797_p2 == 1'd0)) | ((valid_1_1_reg_2033 == 1'd1) & (valid_0_1_reg_2023 == 1'd1) & (hit_reg_1992 == 1'd0) & (1'd0 == and_ln59_reg_1988) & (1'd0 == and_ln52_reg_1984) & (1'b1 == ap_CS_fsm_state159)))) begin
        my_assoc_mem_upper_key_mem_we0 = 1'b1;
    end else begin
        my_assoc_mem_upper_key_mem_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        my_assoc_mem_value_address0 = zext_ln123_fu_1571_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_value_address0 = grp_assoc_lookup_fu_696_mem_value_address0;
    end else begin
        my_assoc_mem_value_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        my_assoc_mem_value_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        my_assoc_mem_value_ce0 = grp_assoc_lookup_fu_696_mem_value_ce0;
    end else begin
        my_assoc_mem_value_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln118_fu_1531_p2 == 1'd1) & (valid_1_1_fu_1499_p3 == 1'd1) & (icmp_ln254_reg_1896 == 1'd0) & (icmp_ln252_1_reg_1880 == 1'd1) & (icmp_ln252_reg_1814 == 1'd1) & (1'b1 == ap_CS_fsm_state158))) begin
        my_assoc_mem_value_we0 = 1'b1;
    end else begin
        my_assoc_mem_value_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        temp_output_address0 = zext_ln316_fu_1643_p1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        temp_output_address0 = zext_ln278_fu_1284_p1;
    end else if (((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        temp_output_address0 = zext_ln263_fu_1010_p1;
    end else if (((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        temp_output_address0 = zext_ln262_fu_969_p1;
    end else begin
        temp_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        temp_output_address1 = zext_ln320_fu_1657_p1;
    end else if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        temp_output_address1 = zext_ln283_fu_1333_p1;
    end else if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154))) begin
        temp_output_address1 = zext_ln278_fu_1284_p1;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        temp_output_address1 = zext_ln262_fu_969_p1;
    end else begin
        temp_output_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state161) | ((1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)) | ((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78)) | ((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78)))) begin
        temp_output_ce0 = 1'b1;
    end else begin
        temp_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state78) | ((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)) | ((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)))) begin
        temp_output_ce1 = 1'b1;
    end else begin
        temp_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state161)) begin
        temp_output_d0 = high_four_4141_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        temp_output_d0 = or_ln1_fu_1319_p3;
    end else if (((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        temp_output_d0 = trunc_ln263_fu_1005_p1;
    end else if (((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
        temp_output_d0 = {{prefix_code_1_fu_240[11:4]}};
    end else begin
        temp_output_d0 = 'bx;
    end
end

always @ (*) begin
    if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154))) begin
        temp_output_d1 = trunc_ln283_fu_1328_p1;
    end else if (((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154))) begin
        temp_output_d1 = {{prefix_code_1_fu_240[11:4]}};
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        temp_output_d1 = or_ln_fu_996_p3;
    end else begin
        temp_output_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state161) | ((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78)) | ((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78)) | ((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)))) begin
        temp_output_we0 = 1'b1;
    end else begin
        temp_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78)) | ((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)) | ((hit_fu_1272_p1 == 1'd0) & (grp_load_fu_708_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1)))) begin
        temp_output_we1 = 1'b1;
    end else begin
        temp_output_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_755_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln224_fu_797_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((icmp_ln252_fu_856_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end
        end
        ap_ST_fsm_state78 : begin
            if (((grp_load_fu_708_p1 == 1'd0) & (icmp_ln252_1_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end else if (((1'b1 == ap_CS_fsm_state78) & (((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1)) | ((grp_load_fu_708_p1 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else if (((grp_load_fu_708_p1 == 1'd1) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state79 : begin
            if (((1'b1 == HP1_ARREADY) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            if (((1'b1 == HP1_RVALID) & (1'b1 == ap_CS_fsm_state149))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            if (((icmp_ln21_fu_1069_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state151))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state152;
            end
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            if (((1'b1 == ap_CS_fsm_state153) & ((1'd1 == and_ln59_fu_1256_p2) | (1'd1 == and_ln52_fu_1245_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end
        end
        ap_ST_fsm_state154 : begin
            if (((hit_fu_1272_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else if (((hit_fu_1272_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end
        end
        ap_ST_fsm_state155 : begin
            if (((icmp_ln21_1_fu_1354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state155))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            if (((valid_0_1_fu_1480_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state157))) begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end
        end
        ap_ST_fsm_state158 : begin
            if (((1'b1 == ap_CS_fsm_state158) & ((icmp_ln252_reg_1814 == 1'd0) | ((icmp_ln252_1_reg_1880 == 1'd0) | ((icmp_ln254_reg_1896 == 1'd1) | ((icmp_ln118_fu_1531_p2 == 1'd0) & (valid_1_1_fu_1499_p3 == 1'd1))))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            if (((icmp_ln320_fu_1662_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state163))) begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state164 : begin
            if (((1'b1 == HP3_AWREADY) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state165 : begin
            if (((1'b1 == HP3_WREADY) & (1'b1 == ap_CS_fsm_state165))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            if (((1'b1 == HP3_BVALID) & (1'b1 == ap_CS_fsm_state233))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state233;
            end
        end
        ap_ST_fsm_state234 : begin
            if (((1'b1 == HP3_AWREADY) & (1'b1 == ap_CS_fsm_state234))) begin
                ap_NS_fsm = ap_ST_fsm_state235;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state234;
            end
        end
        ap_ST_fsm_state235 : begin
            if (((1'b1 == HP3_WREADY) & (1'b1 == ap_CS_fsm_state235))) begin
                ap_NS_fsm = ap_ST_fsm_state236;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state235;
            end
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            ap_NS_fsm = ap_ST_fsm_state249;
        end
        ap_ST_fsm_state249 : begin
            ap_NS_fsm = ap_ST_fsm_state250;
        end
        ap_ST_fsm_state250 : begin
            ap_NS_fsm = ap_ST_fsm_state251;
        end
        ap_ST_fsm_state251 : begin
            ap_NS_fsm = ap_ST_fsm_state252;
        end
        ap_ST_fsm_state252 : begin
            ap_NS_fsm = ap_ST_fsm_state253;
        end
        ap_ST_fsm_state253 : begin
            ap_NS_fsm = ap_ST_fsm_state254;
        end
        ap_ST_fsm_state254 : begin
            ap_NS_fsm = ap_ST_fsm_state255;
        end
        ap_ST_fsm_state255 : begin
            ap_NS_fsm = ap_ST_fsm_state256;
        end
        ap_ST_fsm_state256 : begin
            ap_NS_fsm = ap_ST_fsm_state257;
        end
        ap_ST_fsm_state257 : begin
            ap_NS_fsm = ap_ST_fsm_state258;
        end
        ap_ST_fsm_state258 : begin
            ap_NS_fsm = ap_ST_fsm_state259;
        end
        ap_ST_fsm_state259 : begin
            ap_NS_fsm = ap_ST_fsm_state260;
        end
        ap_ST_fsm_state260 : begin
            ap_NS_fsm = ap_ST_fsm_state261;
        end
        ap_ST_fsm_state261 : begin
            ap_NS_fsm = ap_ST_fsm_state262;
        end
        ap_ST_fsm_state262 : begin
            ap_NS_fsm = ap_ST_fsm_state263;
        end
        ap_ST_fsm_state263 : begin
            ap_NS_fsm = ap_ST_fsm_state264;
        end
        ap_ST_fsm_state264 : begin
            ap_NS_fsm = ap_ST_fsm_state265;
        end
        ap_ST_fsm_state265 : begin
            ap_NS_fsm = ap_ST_fsm_state266;
        end
        ap_ST_fsm_state266 : begin
            ap_NS_fsm = ap_ST_fsm_state267;
        end
        ap_ST_fsm_state267 : begin
            ap_NS_fsm = ap_ST_fsm_state268;
        end
        ap_ST_fsm_state268 : begin
            ap_NS_fsm = ap_ST_fsm_state269;
        end
        ap_ST_fsm_state269 : begin
            ap_NS_fsm = ap_ST_fsm_state270;
        end
        ap_ST_fsm_state270 : begin
            ap_NS_fsm = ap_ST_fsm_state271;
        end
        ap_ST_fsm_state271 : begin
            ap_NS_fsm = ap_ST_fsm_state272;
        end
        ap_ST_fsm_state272 : begin
            ap_NS_fsm = ap_ST_fsm_state273;
        end
        ap_ST_fsm_state273 : begin
            ap_NS_fsm = ap_ST_fsm_state274;
        end
        ap_ST_fsm_state274 : begin
            ap_NS_fsm = ap_ST_fsm_state275;
        end
        ap_ST_fsm_state275 : begin
            ap_NS_fsm = ap_ST_fsm_state276;
        end
        ap_ST_fsm_state276 : begin
            ap_NS_fsm = ap_ST_fsm_state277;
        end
        ap_ST_fsm_state277 : begin
            ap_NS_fsm = ap_ST_fsm_state278;
        end
        ap_ST_fsm_state278 : begin
            ap_NS_fsm = ap_ST_fsm_state279;
        end
        ap_ST_fsm_state279 : begin
            ap_NS_fsm = ap_ST_fsm_state280;
        end
        ap_ST_fsm_state280 : begin
            ap_NS_fsm = ap_ST_fsm_state281;
        end
        ap_ST_fsm_state281 : begin
            ap_NS_fsm = ap_ST_fsm_state282;
        end
        ap_ST_fsm_state282 : begin
            ap_NS_fsm = ap_ST_fsm_state283;
        end
        ap_ST_fsm_state283 : begin
            ap_NS_fsm = ap_ST_fsm_state284;
        end
        ap_ST_fsm_state284 : begin
            ap_NS_fsm = ap_ST_fsm_state285;
        end
        ap_ST_fsm_state285 : begin
            ap_NS_fsm = ap_ST_fsm_state286;
        end
        ap_ST_fsm_state286 : begin
            ap_NS_fsm = ap_ST_fsm_state287;
        end
        ap_ST_fsm_state287 : begin
            ap_NS_fsm = ap_ST_fsm_state288;
        end
        ap_ST_fsm_state288 : begin
            ap_NS_fsm = ap_ST_fsm_state289;
        end
        ap_ST_fsm_state289 : begin
            ap_NS_fsm = ap_ST_fsm_state290;
        end
        ap_ST_fsm_state290 : begin
            ap_NS_fsm = ap_ST_fsm_state291;
        end
        ap_ST_fsm_state291 : begin
            ap_NS_fsm = ap_ST_fsm_state292;
        end
        ap_ST_fsm_state292 : begin
            ap_NS_fsm = ap_ST_fsm_state293;
        end
        ap_ST_fsm_state293 : begin
            ap_NS_fsm = ap_ST_fsm_state294;
        end
        ap_ST_fsm_state294 : begin
            ap_NS_fsm = ap_ST_fsm_state295;
        end
        ap_ST_fsm_state295 : begin
            ap_NS_fsm = ap_ST_fsm_state296;
        end
        ap_ST_fsm_state296 : begin
            ap_NS_fsm = ap_ST_fsm_state297;
        end
        ap_ST_fsm_state297 : begin
            ap_NS_fsm = ap_ST_fsm_state298;
        end
        ap_ST_fsm_state298 : begin
            ap_NS_fsm = ap_ST_fsm_state299;
        end
        ap_ST_fsm_state299 : begin
            ap_NS_fsm = ap_ST_fsm_state300;
        end
        ap_ST_fsm_state300 : begin
            ap_NS_fsm = ap_ST_fsm_state301;
        end
        ap_ST_fsm_state301 : begin
            ap_NS_fsm = ap_ST_fsm_state302;
        end
        ap_ST_fsm_state302 : begin
            ap_NS_fsm = ap_ST_fsm_state303;
        end
        ap_ST_fsm_state303 : begin
            if (((1'b1 == HP3_BVALID) & (1'b1 == ap_CS_fsm_state303))) begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state303;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_1_fu_1453_p2 = (trunc_ln28_3_fu_1439_p3 + trunc_ln28_6_fu_1431_p1);

assign add_ln19_fu_1168_p2 = (trunc_ln28_1_fu_1154_p3 + trunc_ln28_2_fu_1146_p1);

assign add_ln216_fu_763_p2 = (i_reg_558 + 16'd2);

assign add_ln21_1_fu_1348_p2 = (i_5_reg_626 + 5'd1);

assign add_ln21_fu_1063_p2 = (i_3_reg_591 + 5'd1);

assign add_ln224_fu_791_p2 = (i_1_reg_569 + 10'd1);

assign add_ln254_fu_912_p2 = (i_2_reg_580 + 31'd1);

assign add_ln269_1_fu_864_p2 = (trunc_ln269_fu_861_p1 + 2'd1);

assign add_ln269_2_fu_964_p2 = (add_ln269_1_reg_1863 + trunc_ln254_fu_922_p1);

assign add_ln269_fu_939_p2 = (zext_ln254_1_fu_930_p1 + s1_read_reg_1767);

assign add_ln320_fu_1651_p2 = (i_4_reg_685 + 32'd1);

assign add_ln322_1_fu_1677_p2 = (trunc_ln322_1_fu_1668_p1 + trunc_ln322_reg_2070);

assign add_ln322_fu_1672_p2 = (zext_ln320_fu_1657_p1 + output_read_reg_1761);

assign and_ln52_fu_1245_p2 = (valid_0_fu_1210_p3 & icmp_ln52_fu_1240_p2);

assign and_ln59_fu_1256_p2 = (valid_1_fu_1232_p3 & icmp_ln59_fu_1251_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state233 = ap_CS_fsm[32'd232];

assign ap_CS_fsm_state234 = ap_CS_fsm[32'd233];

assign ap_CS_fsm_state235 = ap_CS_fsm[32'd234];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state303 = ap_CS_fsm[32'd302];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_condition_1080 = ((hit_fu_1272_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state154) & (grp_assoc_lookup_fu_696_ap_done == 1'b1));
end

always @ (*) begin
    ap_condition_768 = ((grp_load_fu_708_p1 == 1'd0) & (icmp_ln254_fu_934_p2 == 1'd1) & (icmp_ln252_1_fu_907_p2 == 1'd1));
end

assign empty_36_fu_775_p1 = i_reg_558[14:0];

assign grp_assoc_lookup_fu_696_ap_start = grp_assoc_lookup_fu_696_ap_start_reg;

assign grp_fu_711_p2 = (output_pos_fu_244 + 32'd1);

assign grp_fu_731_p4 = {{prefix_code_1_fu_240[11:8]}};

assign grp_fu_741_p4 = {{high_four_fu_248[7:4]}};

assign grp_fu_750_p2 = (grp_fu_750_p0 + 32'd2);

assign grp_load_fu_708_p1 = send_two_fu_260;

assign hashed_10_fu_1389_p2 = (shl_ln25_1_fu_1383_p2 + hashed_9_fu_1377_p2);

assign hashed_11_fu_1409_p2 = (zext_ln26_1_fu_1405_p1 ^ hashed_10_fu_1389_p2);

assign hashed_12_fu_1469_p2 = (trunc_ln29_1_fu_1459_p4 ^ add_ln19_1_fu_1453_p2);

assign hashed_1_fu_1184_p2 = (trunc_ln8_fu_1174_p4 ^ add_ln19_fu_1168_p2);

assign hashed_3_fu_1092_p2 = (zext_ln24_fu_1088_p1 + hashed_2_reg_602);

assign hashed_4_fu_1104_p2 = (shl_ln25_fu_1098_p2 + hashed_3_fu_1092_p2);

assign hashed_5_fu_1124_p2 = (zext_ln26_fu_1120_p1 ^ hashed_4_fu_1104_p2);

assign hashed_6_fu_1447_p2 = (shl_ln28_1_fu_1423_p3 + trunc_ln21_1_fu_1415_p1);

assign hashed_9_fu_1377_p2 = (zext_ln24_1_fu_1373_p1 + hashed_8_reg_637);

assign hashed_fu_1162_p2 = (shl_ln1_fu_1138_p3 + trunc_ln21_fu_1130_p1);

assign high_four_2_fu_978_p3 = {{trunc_ln260_fu_974_p1}, {4'd0}};

assign high_four_3_fu_1292_p3 = {{trunc_ln280_fu_1288_p1}, {4'd0}};

assign hit_fu_1272_p1 = grp_assoc_lookup_fu_696_ap_return_0;

assign i_1_cast_fu_803_p1 = i_1_reg_569;

assign i_cast10_fu_769_p1 = i_reg_558;

assign icmp_ln118_fu_1531_p2 = ((tmp_7_fu_1521_p4 == 26'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_1354_p2 = ((i_5_reg_626 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_1069_p2 = ((i_3_reg_591 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_797_p2 = ((i_1_reg_569 == 10'd512) ? 1'b1 : 1'b0);

assign icmp_ln252_1_fu_907_p2 = (($signed(zext_ln252_fu_903_p1) < $signed(len_reg_1807)) ? 1'b1 : 1'b0);

assign icmp_ln252_fu_856_p2 = (($signed(len_reg_1807) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln254_fu_934_p2 = ((zext_ln254_fu_926_p1 == len_reg_1807) ? 1'b1 : 1'b0);

assign icmp_ln320_fu_1662_p2 = ((i_4_reg_685 == output_pos_5_reg_668) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1240_p2 = ((key_assign_reg_1948 == stored_key_0_fu_1196_p1) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_1251_p2 = ((key_assign_reg_1948 == stored_key_1_fu_1218_p1) ? 1'b1 : 1'b0);

assign key_assign_fu_1051_p3 = {{prefix_code_1_fu_240}, {next_char_fu_1031_p1}};

assign key_cast9_fu_1043_p3 = {{trunc_ln273_fu_1039_p1}, {next_char_fu_1031_p1}};

assign lshr_ln1_fu_1537_p4 = {{prefix_code_1_fu_240[11:10]}};

assign lshr_ln24_1_fu_1364_p2 = zext_ln17_reg_1955 >> zext_ln21_1_fu_1360_p1;

assign lshr_ln24_fu_1079_p2 = zext_ln17_reg_1955 >> zext_ln21_fu_1075_p1;

assign lshr_ln269_fu_1026_p2 = HP1_addr_2_read_reg_1927 >> zext_ln269_fu_1022_p1;

assign lshr_ln26_1_fu_1395_p4 = {{hashed_10_fu_1389_p2[31:6]}};

assign lshr_ln_fu_1110_p4 = {{hashed_4_fu_1104_p2[31:6]}};

assign my_assoc_mem_fill_fu_1576_p2 = (my_assoc_mem_fill_1_fu_252 + 32'd1);

assign next_char_fu_1031_p1 = lshr_ln269_fu_1026_p2[7:0];

assign next_code_fu_1617_p2 = (value_fu_256 + 32'd1);

assign or_ln120_fu_1596_p2 = (sext_ln120_fu_1592_p1 | my_assoc_mem_upper_key_mem_q0);

assign or_ln121_fu_1603_p2 = (sext_ln120_fu_1592_p1 | my_assoc_mem_middle_key_mem_q0);

assign or_ln122_fu_1610_p2 = (sext_ln120_fu_1592_p1 | my_assoc_mem_lower_key_mem_q0);

assign or_ln1_fu_1319_p3 = {{grp_fu_741_p4}, {or_ln282_fu_1313_p2}};

assign or_ln216_fu_779_p2 = (empty_36_fu_775_p1 | 15'd1);

assign or_ln262_fu_990_p2 = (trunc_ln262_fu_986_p1 | grp_fu_731_p4);

assign or_ln282_fu_1313_p2 = (trunc_ln282_fu_1310_p1 | grp_fu_731_p4);

assign or_ln2_fu_1488_p5 = {{{{{{1'd1}, {trunc_ln252_reg_1889}}}, {prefix_code_1_fu_240}}}, {next_char_reg_1932}};

assign or_ln3_fu_1507_p5 = {{{{{{1'd1}, {trunc_ln252_reg_1889}}}, {prefix_code_1_fu_240}}}, {next_char_reg_1932}};

assign or_ln_fu_996_p3 = {{grp_fu_741_p4}, {or_ln262_fu_990_p2}};

assign output_pos_4_fu_1637_p2 = (output_pos_4140_reg_659 + 32'd1);

assign prefix_code_fu_849_p1 = HP1_RDATA[7:0];

assign sext_ln120_fu_1592_p1 = $signed(shl_ln120_fu_1587_p2);

assign sext_ln245_fu_819_p1 = $signed(trunc_ln245_1_fu_810_p4);

assign sext_ln250_fu_839_p1 = $signed(trunc_ln_fu_830_p4);

assign sext_ln269_fu_954_p1 = $signed(trunc_ln269_1_fu_944_p4);

assign sext_ln322_fu_1692_p1 = $signed(trunc_ln2_fu_1682_p4);

assign sext_ln325_fu_1711_p1 = $signed(trunc_ln1_fu_1702_p4);

assign shl_ln120_fu_1587_p2 = 32'd1 << my_assoc_mem_fill_1_load_reg_2037;

assign shl_ln1_fu_1138_p3 = {{trunc_ln28_fu_1134_p1}, {3'd0}};

assign shl_ln25_1_fu_1383_p2 = hashed_9_fu_1377_p2 << 32'd10;

assign shl_ln25_fu_1098_p2 = hashed_3_fu_1092_p2 << 32'd10;

assign shl_ln28_1_fu_1423_p3 = {{trunc_ln28_5_fu_1419_p1}, {3'd0}};

assign shl_ln322_1_fu_1734_p3 = {{add_ln322_1_reg_2088}, {3'd0}};

assign shl_ln322_2_fu_1745_p2 = zext_ln322_fu_1721_p1 << zext_ln322_2_fu_1741_p1;

assign shl_ln322_fu_1728_p2 = 4'd1 << zext_ln322_1_fu_1725_p1;

assign shl_ln_fu_1015_p3 = {{add_ln269_2_reg_1906}, {3'd0}};

assign stored_key_0_fu_1196_p1 = hash_table_0_q0[19:0];

assign stored_key_1_fu_1218_p1 = hash_table_1_q0[19:0];

assign tmp_7_fu_1521_p4 = {{my_assoc_mem_fill_1_fu_252[31:6]}};

assign tmp_fu_755_p3 = i_reg_558[32'd15];

assign trunc_ln186_fu_1280_p1 = grp_assoc_lookup_fu_696_ap_return_1[11:0];

assign trunc_ln1_fu_1702_p4 = {{lzw_size_read_reg_1756[63:2]}};

assign trunc_ln21_1_fu_1415_p1 = hashed_8_reg_637[25:0];

assign trunc_ln21_fu_1130_p1 = hashed_2_reg_602[25:0];

assign trunc_ln245_1_fu_810_p4 = {{s1_read_reg_1767[63:2]}};

assign trunc_ln24_1_fu_1369_p1 = lshr_ln24_1_fu_1364_p2[0:0];

assign trunc_ln24_fu_1084_p1 = lshr_ln24_fu_1079_p2[0:0];

assign trunc_ln252_fu_918_p1 = value_fu_256[11:0];

assign trunc_ln254_fu_922_p1 = i_2_reg_580[1:0];

assign trunc_ln260_fu_974_p1 = prefix_code_1_fu_240[3:0];

assign trunc_ln262_fu_986_p1 = high_four_fu_248[3:0];

assign trunc_ln263_fu_1005_p1 = prefix_code_1_fu_240[7:0];

assign trunc_ln269_1_fu_944_p4 = {{add_ln269_fu_939_p2[63:2]}};

assign trunc_ln269_fu_861_p1 = s1_read_reg_1767[1:0];

assign trunc_ln273_fu_1039_p1 = prefix_code_1_fu_240[0:0];

assign trunc_ln280_fu_1288_p1 = prefix_code_1_fu_240[3:0];

assign trunc_ln282_fu_1310_p1 = high_four_fu_248[3:0];

assign trunc_ln283_fu_1328_p1 = prefix_code_1_fu_240[7:0];

assign trunc_ln28_1_fu_1154_p3 = {{trunc_ln28_4_fu_1150_p1}, {3'd0}};

assign trunc_ln28_2_fu_1146_p1 = hashed_2_reg_602[14:0];

assign trunc_ln28_3_fu_1439_p3 = {{trunc_ln28_7_fu_1435_p1}, {3'd0}};

assign trunc_ln28_4_fu_1150_p1 = hashed_2_reg_602[11:0];

assign trunc_ln28_5_fu_1419_p1 = hashed_8_reg_637[22:0];

assign trunc_ln28_6_fu_1431_p1 = hashed_8_reg_637[14:0];

assign trunc_ln28_7_fu_1435_p1 = hashed_8_reg_637[11:0];

assign trunc_ln28_fu_1134_p1 = hashed_2_reg_602[22:0];

assign trunc_ln29_1_fu_1459_p4 = {{hashed_6_fu_1447_p2[25:11]}};

assign trunc_ln2_fu_1682_p4 = {{add_ln322_fu_1672_p2[63:2]}};

assign trunc_ln322_1_fu_1668_p1 = i_4_reg_685[1:0];

assign trunc_ln322_fu_1648_p1 = output_read_reg_1761[1:0];

assign trunc_ln7_fu_1552_p4 = {{prefix_code_1_fu_240[9:1]}};

assign trunc_ln8_fu_1174_p4 = {{hashed_fu_1162_p2[25:11]}};

assign trunc_ln_fu_830_p4 = {{input_size_read_reg_1751[63:2]}};

assign valid_0_1_fu_1480_p3 = hash_table_0_q1[32'd32];

assign valid_0_fu_1210_p3 = hash_table_0_q0[32'd32];

assign valid_1_1_fu_1499_p3 = hash_table_1_q1[32'd32];

assign valid_1_fu_1232_p3 = hash_table_1_q0[32'd32];

assign zext_ln120_fu_1547_p1 = lshr_ln1_fu_1537_p4;

assign zext_ln121_fu_1562_p1 = trunc_ln7_fu_1552_p4;

assign zext_ln122_fu_1567_p1 = key_cast9_reg_1943;

assign zext_ln123_fu_1571_p1 = my_assoc_mem_fill_1_fu_252;

assign zext_ln17_fu_1059_p1 = key_assign_fu_1051_p3;

assign zext_ln219_fu_785_p1 = or_ln216_fu_779_p2;

assign zext_ln21_1_fu_1360_p1 = i_5_reg_626;

assign zext_ln21_fu_1075_p1 = i_3_reg_591;

assign zext_ln245_fu_853_p1 = prefix_code_reg_1802;

assign zext_ln24_1_fu_1373_p1 = trunc_ln24_1_fu_1369_p1;

assign zext_ln24_fu_1088_p1 = trunc_ln24_fu_1084_p1;

assign zext_ln252_fu_903_p1 = i_2_reg_580;

assign zext_ln254_1_fu_930_p1 = add_ln254_fu_912_p2;

assign zext_ln254_fu_926_p1 = add_ln254_fu_912_p2;

assign zext_ln262_fu_969_p1 = output_pos_fu_244;

assign zext_ln263_fu_1010_p1 = grp_fu_711_p2;

assign zext_ln269_fu_1022_p1 = shl_ln_fu_1015_p3;

assign zext_ln26_1_fu_1405_p1 = lshr_ln26_1_fu_1395_p4;

assign zext_ln26_fu_1120_p1 = lshr_ln_fu_1110_p4;

assign zext_ln273_fu_1035_p1 = next_char_fu_1031_p1;

assign zext_ln278_fu_1284_p1 = output_pos_fu_244;

assign zext_ln283_fu_1333_p1 = grp_fu_711_p2;

assign zext_ln316_fu_1643_p1 = output_pos_4140_reg_659;

assign zext_ln320_fu_1657_p1 = i_4_reg_685;

assign zext_ln322_1_fu_1725_p1 = add_ln322_1_reg_2088;

assign zext_ln322_2_fu_1741_p1 = shl_ln322_1_fu_1734_p3;

assign zext_ln322_fu_1721_p1 = temp_output_q1;

assign zext_ln40_fu_1190_p1 = hashed_1_fu_1184_p2;

assign zext_ln78_fu_1475_p1 = hashed_12_fu_1469_p2;

always @ (posedge ap_clk) begin
    zext_ln273_reg_1938[11:8] <= 4'b0000;
    zext_ln17_reg_1955[63:20] <= 44'b00000000000000000000000000000000000000000000;
    zext_ln78_reg_2012[63:15] <= 49'b0000000000000000000000000000000000000000000000000;
    mem_upper_key_mem_addr_reg_2045[8:2] <= 7'b0000000;
    high_four_4141_reg_649[3:0] <= 4'b0000;
    high_four_fu_248[3:0] <= 4'b0000;
end

endmodule //hardware_encoding
